
spectrometerFrontend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d074  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001200  0800d258  0800d258  0001d258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e458  0800e458  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e458  0800e458  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e458  0800e458  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e458  0800e458  0001e458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e45c  0800e45c  0001e45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019cc  200001e8  0800e648  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  0800e648  00021bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b760  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003689  00000000  00000000  0003b978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0003f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  000405e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002265d  00000000  00000000  00041a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194a8  00000000  00000000  0006406d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daf85  00000000  00000000  0007d515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015849a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000711c  00000000  00000000  001584f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d23c 	.word	0x0800d23c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800d23c 	.word	0x0800d23c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2220      	movs	r2, #32
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f007 fac3 	bl	800823c <memset>

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cb6:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000cb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000cc0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc6:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000cd2:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cd8:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cde:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ce4:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000cf0:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000cfe:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d00:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d0c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d3c:	481f      	ldr	r0, [pc, #124]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d3e:	f002 fb53 	bl	80033e8 <HAL_ADC_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000d48:	f001 f9de 	bl	8002108 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	4619      	mov	r1, r3
 8000d56:	4819      	ldr	r0, [pc, #100]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d58:	f003 fcac 	bl	80046b4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000d62:	f001 f9d1 	bl	8002108 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_ADC1_Init+0x128>)
 8000d68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d72:	237f      	movs	r3, #127	; 0x7f
 8000d74:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d76:	2304      	movs	r3, #4
 8000d78:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000d84:	f002 fd8a 	bl	800389c <HAL_ADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000d8e:	f001 f9bb 	bl	8002108 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_ADC1_Init+0x12c>)
 8000d94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d96:	230c      	movs	r3, #12
 8000d98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_ADC1_Init+0x124>)
 8000da4:	f002 fd7a 	bl	800389c <HAL_ADC_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000dae:	f001 f9ab 	bl	8002108 <Error_Handler>
  }

}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	; 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200002e8 	.word	0x200002e8
 8000dc0:	14f00020 	.word	0x14f00020
 8000dc4:	2e300800 	.word	0x2e300800

08000dc8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b090      	sub	sp, #64	; 0x40
 8000dcc:	af00      	add	r7, sp, #0
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
 8000dde:	615a      	str	r2, [r3, #20]
 8000de0:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2220      	movs	r2, #32
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f007 fa27 	bl	800823c <memset>

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dee:	4b54      	ldr	r3, [pc, #336]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000df0:	4a54      	ldr	r2, [pc, #336]	; (8000f44 <MX_ADC2_Init+0x17c>)
 8000df2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000df4:	4b52      	ldr	r3, [pc, #328]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000df6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dfa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dfc:	4b50      	ldr	r3, [pc, #320]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e02:	4b4f      	ldr	r3, [pc, #316]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000e08:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e14:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e1a:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e20:	4b47      	ldr	r3, [pc, #284]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 8000e26:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e2c:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e34:	4b42      	ldr	r3, [pc, #264]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000e40:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e48:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000e4e:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000e56:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e58:	220c      	movs	r2, #12
 8000e5a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000e5c:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000e68:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e6e:	4834      	ldr	r0, [pc, #208]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000e70:	f002 faba 	bl	80033e8 <HAL_ADC_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000e7a:	f001 f945 	bl	8002108 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000e7e:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <MX_ADC2_Init+0x180>)
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000e82:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <MX_ADC2_Init+0x184>)
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_8SAMPLES;
 8000e9a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4826      	ldr	r0, [pc, #152]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000ea8:	f003 f8e8 	bl	800407c <HAL_ADC_AnalogWDGConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000eb2:	f001 f929 	bl	8002108 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MX_ADC2_Init+0x184>)
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ec2:	237f      	movs	r3, #127	; 0x7f
 8000ec4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481b      	ldr	r0, [pc, #108]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000ed4:	f002 fce2 	bl	800389c <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 8000ede:	f001 f913 	bl	8002108 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_ADC2_Init+0x188>)
 8000ee4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000ef0:	f002 fcd4 	bl	800389c <HAL_ADC_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC2_Init+0x136>
  {
    Error_Handler();
 8000efa:	f001 f905 	bl	8002108 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_ADC2_Init+0x18c>)
 8000f00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f02:	2312      	movs	r3, #18
 8000f04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000f0c:	f002 fcc6 	bl	800389c <HAL_ADC_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC2_Init+0x152>
  {
    Error_Handler();
 8000f16:	f001 f8f7 	bl	8002108 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_ADC2_Init+0x190>)
 8000f1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f1e:	2318      	movs	r3, #24
 8000f20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_ADC2_Init+0x178>)
 8000f28:	f002 fcb8 	bl	800389c <HAL_ADC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC2_Init+0x16e>
  {
    Error_Handler();
 8000f32:	f001 f8e9 	bl	8002108 <Error_Handler>
  }

}
 8000f36:	bf00      	nop
 8000f38:	3740      	adds	r7, #64	; 0x40
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000027c 	.word	0x2000027c
 8000f44:	50000100 	.word	0x50000100
 8000f48:	7dc00000 	.word	0x7dc00000
 8000f4c:	14f00020 	.word	0x14f00020
 8000f50:	04300002 	.word	0x04300002
 8000f54:	3ac04000 	.word	0x3ac04000
 8000f58:	3ef08000 	.word	0x3ef08000

08000f5c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08e      	sub	sp, #56	; 0x38
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f7c:	d159      	bne.n	8001032 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f7e:	4b77      	ldr	r3, [pc, #476]	; (800115c <HAL_ADC_MspInit+0x200>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a75      	ldr	r2, [pc, #468]	; (800115c <HAL_ADC_MspInit+0x200>)
 8000f86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f88:	4b74      	ldr	r3, [pc, #464]	; (800115c <HAL_ADC_MspInit+0x200>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d10b      	bne.n	8000fa8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f90:	4b73      	ldr	r3, [pc, #460]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	4a72      	ldr	r2, [pc, #456]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8000f96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9c:	4b70      	ldr	r3, [pc, #448]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fa4:	623b      	str	r3, [r7, #32]
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b6d      	ldr	r3, [pc, #436]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	4a6c      	ldr	r2, [pc, #432]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb4:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = VFPI_SENSE_Pin|I_LAMP_Pin;
 8000fc0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4863      	ldr	r0, [pc, #396]	; (8001164 <HAL_ADC_MspInit+0x208>)
 8000fd6:	f003 ff5f 	bl	8004e98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fda:	4b63      	ldr	r3, [pc, #396]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 8000fdc:	4a63      	ldr	r2, [pc, #396]	; (800116c <HAL_ADC_MspInit+0x210>)
 8000fde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fe0:	4b61      	ldr	r3, [pc, #388]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 8000fe2:	2205      	movs	r2, #5
 8000fe4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe6:	4b60      	ldr	r3, [pc, #384]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fec:	4b5e      	ldr	r3, [pc, #376]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff8:	4b5b      	ldr	r3, [pc, #364]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 8000ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001000:	4b59      	ldr	r3, [pc, #356]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 8001002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001006:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001008:	4b57      	ldr	r3, [pc, #348]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 800100a:	2220      	movs	r2, #32
 800100c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800100e:	4b56      	ldr	r3, [pc, #344]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001014:	4854      	ldr	r0, [pc, #336]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 8001016:	f003 fccd 	bl	80049b4 <HAL_DMA_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001020:	f001 f872 	bl	8002108 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a50      	ldr	r2, [pc, #320]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
 800102a:	4a4f      	ldr	r2, [pc, #316]	; (8001168 <HAL_ADC_MspInit+0x20c>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001030:	e08f      	b.n	8001152 <HAL_ADC_MspInit+0x1f6>
  else if(adcHandle->Instance==ADC2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a4e      	ldr	r2, [pc, #312]	; (8001170 <HAL_ADC_MspInit+0x214>)
 8001038:	4293      	cmp	r3, r2
 800103a:	f040 808a 	bne.w	8001152 <HAL_ADC_MspInit+0x1f6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800103e:	4b47      	ldr	r3, [pc, #284]	; (800115c <HAL_ADC_MspInit+0x200>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a45      	ldr	r2, [pc, #276]	; (800115c <HAL_ADC_MspInit+0x200>)
 8001046:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001048:	4b44      	ldr	r3, [pc, #272]	; (800115c <HAL_ADC_MspInit+0x200>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d10b      	bne.n	8001068 <HAL_ADC_MspInit+0x10c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001050:	4b43      	ldr	r3, [pc, #268]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	4a42      	ldr	r2, [pc, #264]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8001056:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800105a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105c:	4b40      	ldr	r3, [pc, #256]	; (8001160 <HAL_ADC_MspInit+0x204>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <HAL_ADC_MspInit+0x204>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106c:	4a3c      	ldr	r2, [pc, #240]	; (8001160 <HAL_ADC_MspInit+0x204>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001074:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001080:	4b37      	ldr	r3, [pc, #220]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	4a36      	ldr	r2, [pc, #216]	; (8001160 <HAL_ADC_MspInit+0x204>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108c:	4b34      	ldr	r3, [pc, #208]	; (8001160 <HAL_ADC_MspInit+0x204>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b31      	ldr	r3, [pc, #196]	; (8001160 <HAL_ADC_MspInit+0x204>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	4a30      	ldr	r2, [pc, #192]	; (8001160 <HAL_ADC_MspInit+0x204>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <HAL_ADC_MspInit+0x204>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f003 fee7 	bl	8004e98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = V__SENSE_Pin;
 80010ca:	2310      	movs	r3, #16
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V__SENSE_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	4825      	ldr	r0, [pc, #148]	; (8001174 <HAL_ADC_MspInit+0x218>)
 80010de:	f003 fedb 	bl	8004e98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_PHOTO_N_Pin|ADC_PHOTO_P_Pin;
 80010e2:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e8:	2303      	movs	r3, #3
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	481b      	ldr	r0, [pc, #108]	; (8001164 <HAL_ADC_MspInit+0x208>)
 80010f8:	f003 fece 	bl	8004e98 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 80010fe:	4a1f      	ldr	r2, [pc, #124]	; (800117c <HAL_ADC_MspInit+0x220>)
 8001100:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 8001104:	2224      	movs	r2, #36	; 0x24
 8001106:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 800111c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001120:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 8001124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001128:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 800112c:	2220      	movs	r2, #32
 800112e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001136:	4810      	ldr	r0, [pc, #64]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 8001138:	f003 fc3c 	bl	80049b4 <HAL_DMA_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_ADC_MspInit+0x1ea>
      Error_Handler();
 8001142:	f000 ffe1 	bl	8002108 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_ADC_MspInit+0x21c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001152:	bf00      	nop
 8001154:	3738      	adds	r7, #56	; 0x38
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000204 	.word	0x20000204
 8001160:	40021000 	.word	0x40021000
 8001164:	48000400 	.word	0x48000400
 8001168:	20000354 	.word	0x20000354
 800116c:	40020008 	.word	0x40020008
 8001170:	50000100 	.word	0x50000100
 8001174:	48000800 	.word	0x48000800
 8001178:	200003b4 	.word	0x200003b4
 800117c:	4002001c 	.word	0x4002001c

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_DMA_Init+0x70>)
 8001188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118a:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <MX_DMA_Init+0x70>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6493      	str	r3, [r2, #72]	; 0x48
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_DMA_Init+0x70>)
 8001194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_DMA_Init+0x70>)
 80011a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <MX_DMA_Init+0x70>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6493      	str	r3, [r2, #72]	; 0x48
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_DMA_Init+0x70>)
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	200b      	movs	r0, #11
 80011bc:	f003 fbd2 	bl	8004964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c0:	200b      	movs	r0, #11
 80011c2:	f003 fbe9 	bl	8004998 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	200c      	movs	r0, #12
 80011cc:	f003 fbca 	bl	8004964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011d0:	200c      	movs	r0, #12
 80011d2:	f003 fbe1 	bl	8004998 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	200d      	movs	r0, #13
 80011dc:	f003 fbc2 	bl	8004964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011e0:	200d      	movs	r0, #13
 80011e2:	f003 fbd9 	bl	8004998 <HAL_NVIC_EnableIRQ>

}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b50      	ldr	r3, [pc, #320]	; (800134c <MX_GPIO_Init+0x158>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a4f      	ldr	r2, [pc, #316]	; (800134c <MX_GPIO_Init+0x158>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b4d      	ldr	r3, [pc, #308]	; (800134c <MX_GPIO_Init+0x158>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001222:	4b4a      	ldr	r3, [pc, #296]	; (800134c <MX_GPIO_Init+0x158>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a49      	ldr	r2, [pc, #292]	; (800134c <MX_GPIO_Init+0x158>)
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <MX_GPIO_Init+0x158>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0320 	and.w	r3, r3, #32
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800123a:	4b44      	ldr	r3, [pc, #272]	; (800134c <MX_GPIO_Init+0x158>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a43      	ldr	r2, [pc, #268]	; (800134c <MX_GPIO_Init+0x158>)
 8001240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <MX_GPIO_Init+0x158>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <MX_GPIO_Init+0x158>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a3d      	ldr	r2, [pc, #244]	; (800134c <MX_GPIO_Init+0x158>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <MX_GPIO_Init+0x158>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b38      	ldr	r3, [pc, #224]	; (800134c <MX_GPIO_Init+0x158>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a37      	ldr	r2, [pc, #220]	; (800134c <MX_GPIO_Init+0x158>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <MX_GPIO_Init+0x158>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_PWM_GPIO_Port, EN_PWM_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f003 ff9e 	bl	80051cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 8001290:	f44f 436c 	mov.w	r3, #60416	; 0xec00
 8001294:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001296:	2303      	movs	r3, #3
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	482a      	ldr	r0, [pc, #168]	; (8001350 <MX_GPIO_Init+0x15c>)
 80012a6:	f003 fdf7 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b0:	2303      	movs	r3, #3
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4825      	ldr	r0, [pc, #148]	; (8001354 <MX_GPIO_Init+0x160>)
 80012c0:	f003 fdea 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12;
 80012c4:	f641 0310 	movw	r3, #6160	; 0x1810
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f003 fddc 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7
 80012e0:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80012e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e6:	2303      	movs	r3, #3
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	4818      	ldr	r0, [pc, #96]	; (8001358 <MX_GPIO_Init+0x164>)
 80012f6:	f003 fdcf 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nI_LAMP_ALERT_Pin;
 80012fa:	2340      	movs	r3, #64	; 0x40
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_GPIO_Init+0x168>)
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nI_LAMP_ALERT_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4810      	ldr	r0, [pc, #64]	; (8001350 <MX_GPIO_Init+0x15c>)
 800130e:	f003 fdc3 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_PWM_Pin;
 8001312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132e:	f003 fdb3 	bl	8004e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	2017      	movs	r0, #23
 8001338:	f003 fb14 	bl	8004964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800133c:	2017      	movs	r0, #23
 800133e:	f003 fb2b 	bl	8004998 <HAL_NVIC_EnableIRQ>

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	48000800 	.word	0x48000800
 8001354:	48001800 	.word	0x48001800
 8001358:	48000400 	.word	0x48000400
 800135c:	10310000 	.word	0x10310000

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001364:	f001 fcf1 	bl	8002d4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001368:	f000 f820 	bl	80013ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  lastCycleTick = HAL_GetTick();
 800136c:	f001 fd18 	bl	8002da0 <HAL_GetTick>
 8001370:	4603      	mov	r3, r0
 8001372:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <main+0x48>)
 8001374:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001376:	f7ff ff3d 	bl	80011f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800137a:	f7ff ff01 	bl	8001180 <MX_DMA_Init>
  MX_TIM1_Init();
 800137e:	f001 fa85 	bl	800288c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001382:	f001 fb81 	bl	8002a88 <MX_TIM8_Init>
  MX_ADC1_Init();
 8001386:	f7ff fc87 	bl	8000c98 <MX_ADC1_Init>
  MX_OPAMP1_Init();
 800138a:	f000 fecb 	bl	8002124 <MX_OPAMP1_Init>
  MX_ADC2_Init();
 800138e:	f7ff fd1b 	bl	8000dc8 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001392:	f001 fb0f 	bl	80029b4 <MX_TIM2_Init>
  MX_OPAMP2_Init();
 8001396:	f000 ff01 	bl	800219c <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 800139a:	f000 ff2d 	bl	80021f8 <MX_OPAMP3_Init>
  MX_SPI1_Init();
 800139e:	f000 ffcf 	bl	8002340 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  initializePeripherals();
 80013a2:	f000 f925 	bl	80015f0 <initializePeripherals>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <main+0x46>
 80013a8:	20000208 	.word	0x20000208

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0a4      	sub	sp, #144	; 0x90
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013b6:	2238      	movs	r2, #56	; 0x38
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f006 ff3e 	bl	800823c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2244      	movs	r2, #68	; 0x44
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f006 ff30 	bl	800823c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013dc:	2000      	movs	r0, #0
 80013de:	f004 f94b 	bl	8005678 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e2:	2301      	movs	r3, #1
 80013e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f0:	2303      	movs	r3, #3
 80013f2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013f4:	2304      	movs	r3, #4
 80013f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013f8:	2355      	movs	r3, #85	; 0x55
 80013fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001414:	4618      	mov	r0, r3
 8001416:	f004 f9e3 	bl	80057e0 <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001420:	f000 fe72 	bl	8002108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001424:	230f      	movs	r3, #15
 8001426:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001428:	2303      	movs	r3, #3
 800142a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001438:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800143c:	2104      	movs	r1, #4
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fce6 	bl	8005e10 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800144a:	f000 fe5d 	bl	8002108 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800144e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001452:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001454:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	4618      	mov	r0, r3
 800145e:	f004 ff0b 	bl	8006278 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001468:	f000 fe4e 	bl	8002108 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	3790      	adds	r7, #144	; 0x90
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <loop>:

/* USER CODE BEGIN 4 */

/* LOOP function called every 50us by TIM8 */
void loop(void){
 8001474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001478:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800147c:	af08      	add	r7, sp, #32
	/* called every 50us */
	measureFast();
 800147e:	f000 fa1b 	bl	80018b8 <measureFast>
	boostConverter();
 8001482:	f000 fbfd 	bl	8001c80 <boostConverter>

	uint32_t tick = HAL_GetTick();
 8001486:	f001 fc8b 	bl	8002da0 <HAL_GetTick>
 800148a:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204

	/* called every 1 ms */
	if(tick >= lastCycleTick + EXECUTION_PERIOD_MS)
 800148e:	4b4d      	ldr	r3, [pc, #308]	; (80015c4 <loop+0x150>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8001498:	429a      	cmp	r2, r3
 800149a:	f0c0 808d 	bcc.w	80015b8 <loop+0x144>
	{
		lastCycleTick = tick;
 800149e:	4a49      	ldr	r2, [pc, #292]	; (80015c4 <loop+0x150>)
 80014a0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80014a4:	6013      	str	r3, [r2, #0]
		measureSlow();
 80014a6:	f000 f92b 	bl	8001700 <measureSlow>
		lampOn();
 80014aa:	f000 fccf 	bl	8001e4c <lampOn>
		//lampPulsing();

		/* called when the voltage has settled and at least 10ms have passed*/
		if (abs(averageError) < VOLTAGE_ERROR_MEASURE && tick >= lastTime + STEP_TIME)
 80014ae:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <loop+0x154>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b8:	ee17 3a90 	vmov	r3, s15
 80014bc:	f113 0f09 	cmn.w	r3, #9
 80014c0:	db7a      	blt.n	80015b8 <loop+0x144>
 80014c2:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <loop+0x154>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014cc:	ee17 3a90 	vmov	r3, s15
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	dc71      	bgt.n	80015b8 <loop+0x144>
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <loop+0x158>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3305      	adds	r3, #5
 80014da:	461a      	mov	r2, r3
 80014dc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d369      	bcc.n	80015b8 <loop+0x144>
		{
			uint8_t data[512];
			memset(data, 0, 512);
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f006 fea5 	bl	800823c <memset>
			sprintf((char *)data, "DATA:$%d$%.2f$%.2f$%.2f$%.5f\n", wavelengthSetpoint, tempDegC, vFPISetpoint, vFPI, vPhotoDiff);
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <loop+0x15c>)
 80014f4:	681e      	ldr	r6, [r3, #0]
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <loop+0x160>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f84c 	bl	8000598 <__aeabi_f2d>
 8001500:	4604      	mov	r4, r0
 8001502:	460d      	mov	r5, r1
 8001504:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <loop+0x164>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f845 	bl	8000598 <__aeabi_f2d>
 800150e:	4680      	mov	r8, r0
 8001510:	4689      	mov	r9, r1
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <loop+0x168>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f83e 	bl	8000598 <__aeabi_f2d>
 800151c:	4682      	mov	sl, r0
 800151e:	468b      	mov	fp, r1
 8001520:	4b2f      	ldr	r3, [pc, #188]	; (80015e0 <loop+0x16c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f837 	bl	8000598 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	1d38      	adds	r0, r7, #4
 8001530:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001534:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001538:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800153c:	e9cd 4500 	strd	r4, r5, [sp]
 8001540:	4632      	mov	r2, r6
 8001542:	4928      	ldr	r1, [pc, #160]	; (80015e4 <loop+0x170>)
 8001544:	f007 faec 	bl	8008b20 <siprintf>
			/* transmit the measurement value */
			HAL_SPI_Transmit_DMA(&hspi1, data, strlen((char *)data));
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe fe68 	bl	8000220 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	4823      	ldr	r0, [pc, #140]	; (80015e8 <loop+0x174>)
 800155a:	f005 f929 	bl	80067b0 <HAL_SPI_Transmit_DMA>


			lastTime = tick;
 800155e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001562:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <loop+0x158>)
 8001564:	6013      	str	r3, [r2, #0]
			if(wavelengthSetpoint > MEASURE_RANGE_MIN){
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <loop+0x15c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f240 620e 	movw	r2, #1550	; 0x60e
 800156e:	4293      	cmp	r3, r2
 8001570:	dd05      	ble.n	800157e <loop+0x10a>
				wavelengthSetpoint = wavelengthSetpoint - MEASURE_STEP_SIZE;
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <loop+0x15c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3b01      	subs	r3, #1
 8001578:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <loop+0x15c>)
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e003      	b.n	8001586 <loop+0x112>
			} else {
				wavelengthSetpoint = MEASURE_RANGE_MAX;
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <loop+0x15c>)
 8001580:	f240 723a 	movw	r2, #1850	; 0x73a
 8001584:	601a      	str	r2, [r3, #0]
				// sprintf((char *)data, "NEW MEASUREMENT SERIES:\n");
				// /* transmit the measurement value */
				// HAL_SPI_Transmit_DMA(&hspi1, data, strlen((char *)data));
			}

			tempDegC = tempCalc();
 8001586:	f000 fa67 	bl	8001a58 <tempCalc>
 800158a:	eef0 7a40 	vmov.f32	s15, s0
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <loop+0x160>)
 8001590:	edc3 7a00 	vstr	s15, [r3]
			vFPISetpoint = wavelengthToVoltage(wavelengthSetpoint, tempDegC);
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <loop+0x15c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <loop+0x160>)
 800159a:	edd2 7a00 	vldr	s15, [r2]
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fca6 	bl	8001ef4 <wavelengthToVoltage>
 80015a8:	4603      	mov	r3, r0
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <loop+0x164>)
 80015b4:	edc3 7a00 	vstr	s15, [r3]

		}
	}
}
 80015b8:	bf00      	nop
 80015ba:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 80015be:	46bd      	mov	sp, r7
 80015c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015c4:	20000208 	.word	0x20000208
 80015c8:	20000268 	.word	0x20000268
 80015cc:	20000264 	.word	0x20000264
 80015d0:	20000004 	.word	0x20000004
 80015d4:	2000024c 	.word	0x2000024c
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000228 	.word	0x20000228
 80015e0:	20000260 	.word	0x20000260
 80015e4:	0800d258 	.word	0x0800d258
 80015e8:	200019ac 	.word	0x200019ac
 80015ec:	00000000 	.word	0x00000000

080015f0 <initializePeripherals>:

void initializePeripherals(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

	/* Calculate SIN Lookup */
	for( int i = 0; i < SIN_STEPS; i ++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	e02c      	b.n	8001656 <initializePeripherals+0x66>
	{
		sinLookup[i] = sin( ( (float) i / (float) SIN_STEPS ) * 2 * M_PI );
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001606:	eddf 6a30 	vldr	s13, [pc, #192]	; 80016c8 <initializePeripherals+0xd8>
 800160a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800160e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001612:	ee17 0a90 	vmov	r0, s15
 8001616:	f7fe ffbf 	bl	8000598 <__aeabi_f2d>
 800161a:	a329      	add	r3, pc, #164	; (adr r3, 80016c0 <initializePeripherals+0xd0>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7ff f812 	bl	8000648 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	ec43 2b17 	vmov	d7, r2, r3
 800162c:	eeb0 0a47 	vmov.f32	s0, s14
 8001630:	eef0 0a67 	vmov.f32	s1, s15
 8001634:	f009 fca0 	bl	800af78 <sin>
 8001638:	ec53 2b10 	vmov	r2, r3, d0
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff fada 	bl	8000bf8 <__aeabi_d2f>
 8001644:	4602      	mov	r2, r0
 8001646:	4921      	ldr	r1, [pc, #132]	; (80016cc <initializePeripherals+0xdc>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	601a      	str	r2, [r3, #0]
	for( int i = 0; i < SIN_STEPS; i ++)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165c:	dbce      	blt.n	80015fc <initializePeripherals+0xc>
	}

	/* read initial values of exti pins */
	nLAMP_CURRENT_ALERT = HAL_GPIO_ReadPin(nI_LAMP_ALERT_GPIO_Port, nI_LAMP_ALERT_Pin);
 800165e:	2140      	movs	r1, #64	; 0x40
 8001660:	481b      	ldr	r0, [pc, #108]	; (80016d0 <initializePeripherals+0xe0>)
 8001662:	f003 fd9b 	bl	800519c <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <initializePeripherals+0xe4>)
 800166c:	601a      	str	r2, [r3, #0]

	/* ADCs */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1Buf, 2);
 800166e:	2202      	movs	r2, #2
 8001670:	4919      	ldr	r1, [pc, #100]	; (80016d8 <initializePeripherals+0xe8>)
 8001672:	481a      	ldr	r0, [pc, #104]	; (80016dc <initializePeripherals+0xec>)
 8001674:	f002 f840 	bl	80036f8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2Buf, 4);
 8001678:	2204      	movs	r2, #4
 800167a:	4919      	ldr	r1, [pc, #100]	; (80016e0 <initializePeripherals+0xf0>)
 800167c:	4819      	ldr	r0, [pc, #100]	; (80016e4 <initializePeripherals+0xf4>)
 800167e:	f002 f83b 	bl	80036f8 <HAL_ADC_Start_DMA>
	/* This way a thermistor resistance value of 20k will produce a output of 0mV. */
	/* PGA Values bewtween 2 and 16 should be automatically used for range detection */

	/* TODO: expand the usage to more then 16x amplification with correction */

	HAL_OPAMP_Start(&hopamp1);
 8001682:	4819      	ldr	r0, [pc, #100]	; (80016e8 <initializePeripherals+0xf8>)
 8001684:	f003 fea2 	bl	80053cc <HAL_OPAMP_Start>
	/* OPAMP2 and OPAMP3 for Photodiode amplification */
	/* With PGA gain of 8 the OPAMPS saturates when the light is directly in front of the MEMS */

	/* TODO: expand the software to dynamically adapt the PGA gain */

	HAL_OPAMP_Start(&hopamp2);
 8001688:	4818      	ldr	r0, [pc, #96]	; (80016ec <initializePeripherals+0xfc>)
 800168a:	f003 fe9f 	bl	80053cc <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 800168e:	4818      	ldr	r0, [pc, #96]	; (80016f0 <initializePeripherals+0x100>)
 8001690:	f003 fe9c 	bl	80053cc <HAL_OPAMP_Start>


	/* Timers */
	//Lamp
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001694:	2108      	movs	r1, #8
 8001696:	4817      	ldr	r0, [pc, #92]	; (80016f4 <initializePeripherals+0x104>)
 8001698:	f005 fc9e 	bl	8006fd8 <HAL_TIM_PWM_Start>

	//Boost Converter
	//LM5106 EN
	HAL_GPIO_WritePin(EN_PWM_GPIO_Port, EN_PWM_Pin, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a6:	f003 fd91 	bl	80051cc <HAL_GPIO_WritePin>
	//LM5106 IN
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80016aa:	2108      	movs	r1, #8
 80016ac:	4812      	ldr	r0, [pc, #72]	; (80016f8 <initializePeripherals+0x108>)
 80016ae:	f005 fc93 	bl	8006fd8 <HAL_TIM_PWM_Start>

	/* Start timer for loop triggering */
	HAL_TIM_Base_Start_IT(&htim8);
 80016b2:	4812      	ldr	r0, [pc, #72]	; (80016fc <initializePeripherals+0x10c>)
 80016b4:	f005 fbce 	bl	8006e54 <HAL_TIM_Base_Start_IT>

}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	54442d18 	.word	0x54442d18
 80016c4:	400921fb 	.word	0x400921fb
 80016c8:	44800000 	.word	0x44800000
 80016cc:	2000043c 	.word	0x2000043c
 80016d0:	48000800 	.word	0x48000800
 80016d4:	2000020c 	.word	0x2000020c
 80016d8:	2000143c 	.word	0x2000143c
 80016dc:	200002e8 	.word	0x200002e8
 80016e0:	20001440 	.word	0x20001440
 80016e4:	2000027c 	.word	0x2000027c
 80016e8:	20001970 	.word	0x20001970
 80016ec:	200018f8 	.word	0x200018f8
 80016f0:	20001934 	.word	0x20001934
 80016f4:	20001b08 	.word	0x20001b08
 80016f8:	20001b54 	.word	0x20001b54
 80016fc:	20001abc 	.word	0x20001abc

08001700 <measureSlow>:

void measureSlow(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	lampCurrentRAW = ADC1Buf[0];
 8001706:	4b5e      	ldr	r3, [pc, #376]	; (8001880 <measureSlow+0x180>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <measureSlow+0x184>)
 800170e:	601a      	str	r2, [r3, #0]
	vPhotoNRAW = ADC2Buf[2];
 8001710:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <measureSlow+0x188>)
 8001712:	889b      	ldrh	r3, [r3, #4]
 8001714:	461a      	mov	r2, r3
 8001716:	4b5d      	ldr	r3, [pc, #372]	; (800188c <measureSlow+0x18c>)
 8001718:	601a      	str	r2, [r3, #0]
	vPhotoPRAW = ADC2Buf[3];
 800171a:	4b5b      	ldr	r3, [pc, #364]	; (8001888 <measureSlow+0x188>)
 800171c:	88db      	ldrh	r3, [r3, #6]
 800171e:	461a      	mov	r2, r3
 8001720:	4b5b      	ldr	r3, [pc, #364]	; (8001890 <measureSlow+0x190>)
 8001722:	601a      	str	r2, [r3, #0]
	lampI = 	( (float)lampCurrentRAW 	* ADC_CONVERSION_CONSTANT ) / 200.0 / 0.1;
 8001724:	4b57      	ldr	r3, [pc, #348]	; (8001884 <measureSlow+0x184>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001730:	ee17 0a90 	vmov	r0, s15
 8001734:	f7fe ff30 	bl	8000598 <__aeabi_f2d>
 8001738:	a34d      	add	r3, pc, #308	; (adr r3, 8001870 <measureSlow+0x170>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff83 	bl	8000648 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b51      	ldr	r3, [pc, #324]	; (8001894 <measureSlow+0x194>)
 8001750:	f7ff f8a4 	bl	800089c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <measureSlow+0x198>)
 8001762:	f7ff f89b 	bl	800089c <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	a342      	add	r3, pc, #264	; (adr r3, 8001878 <measureSlow+0x178>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7ff f892 	bl	800089c <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff fa3a 	bl	8000bf8 <__aeabi_d2f>
 8001784:	4603      	mov	r3, r0
 8001786:	4a45      	ldr	r2, [pc, #276]	; (800189c <measureSlow+0x19c>)
 8001788:	6013      	str	r3, [r2, #0]
	vPhotoN = 	( (float)vPhotoNRAW 		* ADC_CONVERSION_CONSTANT );
 800178a:	4b40      	ldr	r3, [pc, #256]	; (800188c <measureSlow+0x18c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001796:	ee17 0a90 	vmov	r0, s15
 800179a:	f7fe fefd 	bl	8000598 <__aeabi_f2d>
 800179e:	a334      	add	r3, pc, #208	; (adr r3, 8001870 <measureSlow+0x170>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe ff50 	bl	8000648 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b37      	ldr	r3, [pc, #220]	; (8001894 <measureSlow+0x194>)
 80017b6:	f7ff f871 	bl	800089c <__aeabi_ddiv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff fa19 	bl	8000bf8 <__aeabi_d2f>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a35      	ldr	r2, [pc, #212]	; (80018a0 <measureSlow+0x1a0>)
 80017ca:	6013      	str	r3, [r2, #0]
	vPhotoP = 	( (float)vPhotoPRAW 		* ADC_CONVERSION_CONSTANT );
 80017cc:	4b30      	ldr	r3, [pc, #192]	; (8001890 <measureSlow+0x190>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d8:	ee17 0a90 	vmov	r0, s15
 80017dc:	f7fe fedc 	bl	8000598 <__aeabi_f2d>
 80017e0:	a323      	add	r3, pc, #140	; (adr r3, 8001870 <measureSlow+0x170>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7fe ff2f 	bl	8000648 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <measureSlow+0x194>)
 80017f8:	f7ff f850 	bl	800089c <__aeabi_ddiv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f9f8 	bl	8000bf8 <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	4a26      	ldr	r2, [pc, #152]	; (80018a4 <measureSlow+0x1a4>)
 800180c:	6013      	str	r3, [r2, #0]
	vPhotoDiff = vPhotoP - vPhotoN;
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <measureSlow+0x1a4>)
 8001810:	ed93 7a00 	vldr	s14, [r3]
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <measureSlow+0x1a0>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <measureSlow+0x1a8>)
 8001820:	edc3 7a00 	vstr	s15, [r3]

	for (uint8_t i = 0; i < VOLTAGE_ERROR_AVG_COUNT; i++)
 8001824:	2300      	movs	r3, #0
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	e010      	b.n	800184c <measureSlow+0x14c>
	{
		averageError += errorAccumulation[i];
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <measureSlow+0x1ac>)
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <measureSlow+0x1b0>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <measureSlow+0x1b0>)
 8001842:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < VOLTAGE_ERROR_AVG_COUNT; i++)
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	3301      	adds	r3, #1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b09      	cmp	r3, #9
 8001850:	d9eb      	bls.n	800182a <measureSlow+0x12a>
	}
	averageError = averageError / (float)VOLTAGE_ERROR_AVG_COUNT;
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <measureSlow+0x1b0>)
 8001854:	ed93 7a00 	vldr	s14, [r3]
 8001858:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800185c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <measureSlow+0x1b0>)
 8001862:	edc3 7a00 	vstr	s15, [r3]

}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	00000000 	.word	0x00000000
 8001874:	40a9c800 	.word	0x40a9c800
 8001878:	9999999a 	.word	0x9999999a
 800187c:	3fb99999 	.word	0x3fb99999
 8001880:	2000143c 	.word	0x2000143c
 8001884:	20000210 	.word	0x20000210
 8001888:	20001440 	.word	0x20001440
 800188c:	20000254 	.word	0x20000254
 8001890:	20000250 	.word	0x20000250
 8001894:	40f00000 	.word	0x40f00000
 8001898:	40690000 	.word	0x40690000
 800189c:	20000214 	.word	0x20000214
 80018a0:	2000025c 	.word	0x2000025c
 80018a4:	20000258 	.word	0x20000258
 80018a8:	20000260 	.word	0x20000260
 80018ac:	20000414 	.word	0x20000414
 80018b0:	20000268 	.word	0x20000268
 80018b4:	00000000 	.word	0x00000000

080018b8 <measureFast>:

void measureFast(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0

	vfpiRAW = ADC1Buf[1];
 80018bc:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <measureFast+0x178>)
 80018be:	885b      	ldrh	r3, [r3, #2]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b5c      	ldr	r3, [pc, #368]	; (8001a34 <measureFast+0x17c>)
 80018c4:	601a      	str	r2, [r3, #0]
	vPlusRAW = ADC2Buf[0];
 80018c6:	4b5c      	ldr	r3, [pc, #368]	; (8001a38 <measureFast+0x180>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b5b      	ldr	r3, [pc, #364]	; (8001a3c <measureFast+0x184>)
 80018ce:	601a      	str	r2, [r3, #0]
	vPlus = 	( (float)vPlusRAW			* ADC_CONVERSION_CONSTANT ) * VPLUS_DIVIDER * PLUS_VOLTAGE_MEASUREMENT_CORRECTION;
 80018d0:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <measureFast+0x184>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018dc:	ee17 0a90 	vmov	r0, s15
 80018e0:	f7fe fe5a 	bl	8000598 <__aeabi_f2d>
 80018e4:	a346      	add	r3, pc, #280	; (adr r3, 8001a00 <measureFast+0x148>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fead 	bl	8000648 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b51      	ldr	r3, [pc, #324]	; (8001a40 <measureFast+0x188>)
 80018fc:	f7fe ffce 	bl	800089c <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <measureFast+0x18c>)
 800190e:	f7fe fe9b 	bl	8000648 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	a33b      	add	r3, pc, #236	; (adr r3, 8001a08 <measureFast+0x150>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fe92 	bl	8000648 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	a338      	add	r3, pc, #224	; (adr r3, 8001a10 <measureFast+0x158>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe ffb3 	bl	800089c <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f7ff f95b 	bl	8000bf8 <__aeabi_d2f>
 8001942:	4603      	mov	r3, r0
 8001944:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <measureFast+0x190>)
 8001946:	6013      	str	r3, [r2, #0]
	vFPI = 		( (float)vfpiRAW			* ADC_CONVERSION_CONSTANT ) * VFPI_DIVIDER * FPI_VOLTAGE_MEASUREMENT_CORRECTION;
 8001948:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <measureFast+0x17c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001954:	ee17 0a90 	vmov	r0, s15
 8001958:	f7fe fe1e 	bl	8000598 <__aeabi_f2d>
 800195c:	a328      	add	r3, pc, #160	; (adr r3, 8001a00 <measureFast+0x148>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fe71 	bl	8000648 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <measureFast+0x188>)
 8001974:	f7fe ff92 	bl	800089c <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <measureFast+0x194>)
 8001986:	f7fe fe5f 	bl	8000648 <__aeabi_dmul>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	a321      	add	r3, pc, #132	; (adr r3, 8001a18 <measureFast+0x160>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fe56 	bl	8000648 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	a31e      	add	r3, pc, #120	; (adr r3, 8001a20 <measureFast+0x168>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe ff77 	bl	800089c <__aeabi_ddiv>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff f91f 	bl	8000bf8 <__aeabi_d2f>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <measureFast+0x198>)
 80019be:	6013      	str	r3, [r2, #0]
	vFPI = vFPI * FPI_VOLTAGE_GAIN + FPI_VOLTAGE_OFFSET;
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <measureFast+0x198>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fde7 	bl	8000598 <__aeabi_f2d>
 80019ca:	a317      	add	r3, pc, #92	; (adr r3, 8001a28 <measureFast+0x170>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fe3a 	bl	8000648 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <measureFast+0x19c>)
 80019e2:	f7fe fc7b 	bl	80002dc <__adddf3>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f903 	bl	8000bf8 <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <measureFast+0x198>)
 80019f6:	6013      	str	r3, [r2, #0]

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	f3af 8000 	nop.w
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40a9c800 	.word	0x40a9c800
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40c82a80 	.word	0x40c82a80
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40c6d180 	.word	0x40c6d180
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40ce9100 	.word	0x40ce9100
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40cd4c00 	.word	0x40cd4c00
 8001a28:	7d566cf4 	.word	0x7d566cf4
 8001a2c:	3feeb6ae 	.word	0x3feeb6ae
 8001a30:	2000143c 	.word	0x2000143c
 8001a34:	2000021c 	.word	0x2000021c
 8001a38:	20001440 	.word	0x20001440
 8001a3c:	20000220 	.word	0x20000220
 8001a40:	40f00000 	.word	0x40f00000
 8001a44:	40180000 	.word	0x40180000
 8001a48:	20000224 	.word	0x20000224
 8001a4c:	40290000 	.word	0x40290000
 8001a50:	20000228 	.word	0x20000228
 8001a54:	40840000 	.word	0x40840000

08001a58 <tempCalc>:

float tempCalc(void)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	vTempRAW = ADC2Buf[1];
 8001a5e:	4b80      	ldr	r3, [pc, #512]	; (8001c60 <tempCalc+0x208>)
 8001a60:	885b      	ldrh	r3, [r3, #2]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b7f      	ldr	r3, [pc, #508]	; (8001c64 <tempCalc+0x20c>)
 8001a66:	601a      	str	r2, [r3, #0]
	vTemp = 	( (float)vTempRAW 			* ADC_CONVERSION_CONSTANT );
 8001a68:	4b7e      	ldr	r3, [pc, #504]	; (8001c64 <tempCalc+0x20c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a74:	ee17 0a90 	vmov	r0, s15
 8001a78:	f7fe fd8e 	bl	8000598 <__aeabi_f2d>
 8001a7c:	a366      	add	r3, pc, #408	; (adr r3, 8001c18 <tempCalc+0x1c0>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fde1 	bl	8000648 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b75      	ldr	r3, [pc, #468]	; (8001c68 <tempCalc+0x210>)
 8001a94:	f7fe ff02 	bl	800089c <__aeabi_ddiv>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff f8aa 	bl	8000bf8 <__aeabi_d2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a71      	ldr	r2, [pc, #452]	; (8001c6c <tempCalc+0x214>)
 8001aa8:	6013      	str	r3, [r2, #0]

	vThermistor = 4271.8 - 1.638 * vTemp;
 8001aaa:	4b70      	ldr	r3, [pc, #448]	; (8001c6c <tempCalc+0x214>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd72 	bl	8000598 <__aeabi_f2d>
 8001ab4:	a35a      	add	r3, pc, #360	; (adr r3, 8001c20 <tempCalc+0x1c8>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fdc5 	bl	8000648 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	a159      	add	r1, pc, #356	; (adr r1, 8001c28 <tempCalc+0x1d0>)
 8001ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ac8:	f7fe fc06 	bl	80002d8 <__aeabi_dsub>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f890 	bl	8000bf8 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a65      	ldr	r2, [pc, #404]	; (8001c70 <tempCalc+0x218>)
 8001adc:	6013      	str	r3, [r2, #0]
	thermistorR = 0.94 * 20000.0 * (1.0 / ((3300.0/vThermistor) - 1.0));
 8001ade:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <tempCalc+0x218>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd58 	bl	8000598 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	a14a      	add	r1, pc, #296	; (adr r1, 8001c18 <tempCalc+0x1c0>)
 8001aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001af2:	f7fe fed3 	bl	800089c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <tempCalc+0x21c>)
 8001b04:	f7fe fbe8 	bl	80002d8 <__aeabi_dsub>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	f04f 0000 	mov.w	r0, #0
 8001b10:	4958      	ldr	r1, [pc, #352]	; (8001c74 <tempCalc+0x21c>)
 8001b12:	f7fe fec3 	bl	800089c <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	a344      	add	r3, pc, #272	; (adr r3, 8001c30 <tempCalc+0x1d8>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fd90 	bl	8000648 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7ff f862 	bl	8000bf8 <__aeabi_d2f>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a50      	ldr	r2, [pc, #320]	; (8001c78 <tempCalc+0x220>)
 8001b38:	6013      	str	r3, [r2, #0]
	float oneByT = CONSTANT_A + CONSTANT_B * log(thermistorR) + CONSTANT_C * pow(log(thermistorR), 3);
 8001b3a:	4b4f      	ldr	r3, [pc, #316]	; (8001c78 <tempCalc+0x220>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fd2a 	bl	8000598 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	ec43 2b10 	vmov	d0, r2, r3
 8001b4c:	f009 fa68 	bl	800b020 <log>
 8001b50:	ec51 0b10 	vmov	r0, r1, d0
 8001b54:	a338      	add	r3, pc, #224	; (adr r3, 8001c38 <tempCalc+0x1e0>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	f7fe fd75 	bl	8000648 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	a336      	add	r3, pc, #216	; (adr r3, 8001c40 <tempCalc+0x1e8>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fbb6 	bl	80002dc <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4614      	mov	r4, r2
 8001b76:	461d      	mov	r5, r3
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <tempCalc+0x220>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fd0b 	bl	8000598 <__aeabi_f2d>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	ec43 2b10 	vmov	d0, r2, r3
 8001b8a:	f009 fa49 	bl	800b020 <log>
 8001b8e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b92:	eef0 7a60 	vmov.f32	s15, s1
 8001b96:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001c48 <tempCalc+0x1f0>
 8001b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ba2:	f009 fa85 	bl	800b0b0 <pow>
 8001ba6:	ec51 0b10 	vmov	r0, r1, d0
 8001baa:	a329      	add	r3, pc, #164	; (adr r3, 8001c50 <tempCalc+0x1f8>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fd4a 	bl	8000648 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4620      	mov	r0, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	f7fe fb8e 	bl	80002dc <__adddf3>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7ff f816 	bl	8000bf8 <__aeabi_d2f>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	607b      	str	r3, [r7, #4]
	tempDegC = 1/oneByT - KELVIN_TO_CELSIUS;
 8001bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bdc:	ee16 0a90 	vmov	r0, s13
 8001be0:	f7fe fcda 	bl	8000598 <__aeabi_f2d>
 8001be4:	a31c      	add	r3, pc, #112	; (adr r3, 8001c58 <tempCalc+0x200>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fb75 	bl	80002d8 <__aeabi_dsub>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7fe ffff 	bl	8000bf8 <__aeabi_d2f>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <tempCalc+0x224>)
 8001bfe:	6013      	str	r3, [r2, #0]
	//tempDegC = 25.0;
	return tempDegC;
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <tempCalc+0x224>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	ee07 3a90 	vmov	s15, r3
}
 8001c08:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bdb0      	pop	{r4, r5, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	f3af 8000 	nop.w
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	40a9c800 	.word	0x40a9c800
 8001c20:	7ced9168 	.word	0x7ced9168
 8001c24:	3ffa353f 	.word	0x3ffa353f
 8001c28:	cccccccd 	.word	0xcccccccd
 8001c2c:	40b0afcc 	.word	0x40b0afcc
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40d25c00 	.word	0x40d25c00
 8001c38:	4ba874ff 	.word	0x4ba874ff
 8001c3c:	3f2f786b 	.word	0x3f2f786b
 8001c40:	d04a2fcf 	.word	0xd04a2fcf
 8001c44:	3f51e85f 	.word	0x3f51e85f
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	40080000 	.word	0x40080000
 8001c50:	a891adb5 	.word	0xa891adb5
 8001c54:	3e70e114 	.word	0x3e70e114
 8001c58:	66666666 	.word	0x66666666
 8001c5c:	40711266 	.word	0x40711266
 8001c60:	20001440 	.word	0x20001440
 8001c64:	2000023c 	.word	0x2000023c
 8001c68:	40f00000 	.word	0x40f00000
 8001c6c:	20000240 	.word	0x20000240
 8001c70:	20000244 	.word	0x20000244
 8001c74:	3ff00000 	.word	0x3ff00000
 8001c78:	20000248 	.word	0x20000248
 8001c7c:	2000024c 	.word	0x2000024c

08001c80 <boostConverter>:

void boostConverter(void)
{
 8001c80:	b598      	push	{r3, r4, r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	if( vFPI > VFPI_MAX + FPI_ERROR_THRESHOLD)
 8001c84:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <boostConverter+0x17c>)
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001e00 <boostConverter+0x180>
 8001c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	dd02      	ble.n	8001c9e <boostConverter+0x1e>
	{
		vFPISetpoint = FPI_USER_LIMIT + FPI_ERROR_THRESHOLD;
 8001c98:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <boostConverter+0x184>)
 8001c9a:	4a5b      	ldr	r2, [pc, #364]	; (8001e08 <boostConverter+0x188>)
 8001c9c:	601a      	str	r2, [r3, #0]
	}
	if( vFPISetpoint > FPI_USER_LIMIT )
 8001c9e:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <boostConverter+0x184>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001e0c <boostConverter+0x18c>
 8001ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	dd02      	ble.n	8001cb8 <boostConverter+0x38>
		vFPISetpoint = FPI_USER_LIMIT;
 8001cb2:	4b54      	ldr	r3, [pc, #336]	; (8001e04 <boostConverter+0x184>)
 8001cb4:	4a56      	ldr	r2, [pc, #344]	; (8001e10 <boostConverter+0x190>)
 8001cb6:	601a      	str	r2, [r3, #0]
	if(vFPISetpoint < vPlus)
 8001cb8:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <boostConverter+0x184>)
 8001cba:	ed93 7a00 	vldr	s14, [r3]
 8001cbe:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <boostConverter+0x194>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ccc:	d509      	bpl.n	8001ce2 <boostConverter+0x62>
		vFPISetpoint = vPlus + FPI_ERROR_THRESHOLD * 2;
 8001cce:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <boostConverter+0x194>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001e18 <boostConverter+0x198>
 8001cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cdc:	4b49      	ldr	r3, [pc, #292]	; (8001e04 <boostConverter+0x184>)
 8001cde:	edc3 7a00 	vstr	s15, [r3]

	vFPIError = vFPISetpoint - vFPI;
 8001ce2:	4b48      	ldr	r3, [pc, #288]	; (8001e04 <boostConverter+0x184>)
 8001ce4:	ed93 7a00 	vldr	s14, [r3]
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <boostConverter+0x17c>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <boostConverter+0x19c>)
 8001cf4:	edc3 7a00 	vstr	s15, [r3]
	vFPIIntegral += vFPIError;
 8001cf8:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <boostConverter+0x1a0>)
 8001cfa:	ed93 7a00 	vldr	s14, [r3]
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <boostConverter+0x19c>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d08:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <boostConverter+0x1a0>)
 8001d0a:	edc3 7a00 	vstr	s15, [r3]
	vFPIPulse = vFPIError * vFPIProportionalGain + vFPIIntegral * vFPIIntegralGain;
 8001d0e:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <boostConverter+0x19c>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001e24 <boostConverter+0x1a4>
 8001d18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <boostConverter+0x1a0>)
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001e28 <boostConverter+0x1a8>
 8001d26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <boostConverter+0x1ac>)
 8001d30:	edc3 7a00 	vstr	s15, [r3]

	errorAccumulation[averageErrorWriteIndex] = vFPIError;
 8001d34:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <boostConverter+0x1b0>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4b38      	ldr	r3, [pc, #224]	; (8001e1c <boostConverter+0x19c>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	493d      	ldr	r1, [pc, #244]	; (8001e34 <boostConverter+0x1b4>)
 8001d40:	0083      	lsls	r3, r0, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	601a      	str	r2, [r3, #0]
	averageErrorWriteIndex ++;
 8001d46:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <boostConverter+0x1b0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <boostConverter+0x1b0>)
 8001d50:	701a      	strb	r2, [r3, #0]
	if(averageErrorWriteIndex >= VOLTAGE_ERROR_AVG_COUNT)
 8001d52:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <boostConverter+0x1b0>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b09      	cmp	r3, #9
 8001d58:	d902      	bls.n	8001d60 <boostConverter+0xe0>
		averageErrorWriteIndex = 0;
 8001d5a:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <boostConverter+0x1b0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]

	if(vFPIPulse > FPI_PULSE_DMAX)
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <boostConverter+0x1ac>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e38 <boostConverter+0x1b8>
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	dd02      	ble.n	8001d7a <boostConverter+0xfa>
		vFPIPulse = FPI_PULSE_DMAX;
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <boostConverter+0x1ac>)
 8001d76:	4a31      	ldr	r2, [pc, #196]	; (8001e3c <boostConverter+0x1bc>)
 8001d78:	601a      	str	r2, [r3, #0]

	if(vFPIPulse < 0)
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <boostConverter+0x1ac>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	d503      	bpl.n	8001d92 <boostConverter+0x112>
		vFPIPulse = 0;
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <boostConverter+0x1ac>)
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]


	HAL_GPIO_WritePin(EN_PWM_GPIO_Port, EN_PWM_Pin, GPIO_PIN_SET);
 8001d92:	2201      	movs	r2, #1
 8001d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9c:	f003 fa16 	bl	80051cc <HAL_GPIO_WritePin>
	ditherPulse = ((int)vFPIPulse << 4) + (int)(FPI_DITHER * (float)(vFPIPulse - (int)vFPIPulse));
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <boostConverter+0x1ac>)
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001daa:	ee17 3a90 	vmov	r3, s15
 8001dae:	011c      	lsls	r4, r3, #4
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <boostConverter+0x1ac>)
 8001db2:	ed93 7a00 	vldr	s14, [r3]
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <boostConverter+0x1ac>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc8:	ee17 0a90 	vmov	r0, s15
 8001dcc:	f7fe fbe4 	bl	8000598 <__aeabi_f2d>
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <boostConverter+0x1c0>)
 8001dd6:	f7fe fc37 	bl	8000648 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fee1 	bl	8000ba8 <__aeabi_d2iz>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4423      	add	r3, r4
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <boostConverter+0x1c4>)
 8001dec:	6013      	str	r3, [r2, #0]
	htim2.Instance->CCR3 = (int)ditherPulse;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <boostConverter+0x1c4>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <boostConverter+0x1c8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c

	//htim1.Instance->CCR1 = 0;
	//htim2.Instance->CCR3 = 0;

}
 8001df8:	bf00      	nop
 8001dfa:	bd98      	pop	{r3, r4, r7, pc}
 8001dfc:	20000228 	.word	0x20000228
 8001e00:	4716e600 	.word	0x4716e600
 8001e04:	20000000 	.word	0x20000000
 8001e08:	47169600 	.word	0x47169600
 8001e0c:	47159c00 	.word	0x47159c00
 8001e10:	47159c00 	.word	0x47159c00
 8001e14:	20000224 	.word	0x20000224
 8001e18:	43fa0000 	.word	0x43fa0000
 8001e1c:	2000022c 	.word	0x2000022c
 8001e20:	20000230 	.word	0x20000230
 8001e24:	3ba3d70a 	.word	0x3ba3d70a
 8001e28:	3951b717 	.word	0x3951b717
 8001e2c:	20000234 	.word	0x20000234
 8001e30:	2000026c 	.word	0x2000026c
 8001e34:	20000414 	.word	0x20000414
 8001e38:	442f0000 	.word	0x442f0000
 8001e3c:	442f0000 	.word	0x442f0000
 8001e40:	402e0000 	.word	0x402e0000
 8001e44:	20000238 	.word	0x20000238
 8001e48:	20001b54 	.word	0x20001b54

08001e4c <lampOn>:
	if( waveFormCounter < 0)
			waveFormCounter = 0;
}

void lampOn(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
	if( lampI > 30)
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <lampOn+0x5c>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e62:	dd04      	ble.n	8001e6e <lampOn+0x22>
	{
		htim1.Instance->CCR3 = 0;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <lampOn+0x60>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c
		return;
 8001e6c:	e017      	b.n	8001e9e <lampOn+0x52>

	}

	lampPulse = (float)LAMP_PWM_PERIOD * ((float)LAMP_VOLTAGE_MV / vPlus);
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <lampOn+0x64>)
 8001e70:	ed93 7a00 	vldr	s14, [r3]
 8001e74:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001eb4 <lampOn+0x68>
 8001e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e7c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001eb8 <lampOn+0x6c>
 8001e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <lampOn+0x70>)
 8001e86:	edc3 7a00 	vstr	s15, [r3]

	htim1.Instance->CCR3 = (unsigned int)lampPulse;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <lampOn+0x70>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <lampOn+0x60>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e98:	ee17 2a90 	vmov	r2, s15
 8001e9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000214 	.word	0x20000214
 8001eac:	20001b08 	.word	0x20001b08
 8001eb0:	20000224 	.word	0x20000224
 8001eb4:	461c4000 	.word	0x461c4000
 8001eb8:	45516000 	.word	0x45516000
 8001ebc:	20000218 	.word	0x20000218

08001ec0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
	switch ( GPIO_Pin )
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	2b40      	cmp	r3, #64	; 0x40
 8001ece:	d108      	bne.n	8001ee2 <HAL_GPIO_EXTI_Callback+0x22>
	{
		case nI_LAMP_ALERT_Pin:
			nLAMP_CURRENT_ALERT = HAL_GPIO_ReadPin(nI_LAMP_ALERT_GPIO_Port, nI_LAMP_ALERT_Pin);
 8001ed0:	2140      	movs	r1, #64	; 0x40
 8001ed2:	4806      	ldr	r0, [pc, #24]	; (8001eec <HAL_GPIO_EXTI_Callback+0x2c>)
 8001ed4:	f003 f962 	bl	800519c <HAL_GPIO_ReadPin>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x30>)
 8001ede:	601a      	str	r2, [r3, #0]
			break;
 8001ee0:	bf00      	nop
	}

}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	48000800 	.word	0x48000800
 8001ef0:	2000020c 	.word	0x2000020c

08001ef4 <wavelengthToVoltage>:

uint16_t wavelengthToVoltage(int wavelength, float temperature)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b08f      	sub	sp, #60	; 0x3c
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	ed87 0a00 	vstr	s0, [r7]
	uint16_t voltage = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	86fb      	strh	r3, [r7, #54]	; 0x36
	// check if wavelength value is in wavelength range
	if (wavelength > WAVELENGTH_MAX)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f240 723a 	movw	r2, #1850	; 0x73a
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	dd01      	ble.n	8001f12 <wavelengthToVoltage+0x1e>
		return 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e0d3      	b.n	80020ba <wavelengthToVoltage+0x1c6>
	if (wavelength < WAVELENGTH_MIN)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f240 620d 	movw	r2, #1549	; 0x60d
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	dc01      	bgt.n	8001f20 <wavelengthToVoltage+0x2c>
		return 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e0cc      	b.n	80020ba <wavelengthToVoltage+0x1c6>

	// check if temperature is in operable range
	if (temperature > tempLookup[TEMP_LOOKUP_LEN - 1])
 8001f20:	232d      	movs	r3, #45	; 0x2d
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2a:	ed97 7a00 	vldr	s14, [r7]
 8001f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	dd01      	ble.n	8001f3c <wavelengthToVoltage+0x48>
		return 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e0be      	b.n	80020ba <wavelengthToVoltage+0x1c6>
	if (temperature < tempLookup[0])
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f46:	ed97 7a00 	vldr	s14, [r7]
 8001f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	d501      	bpl.n	8001f58 <wavelengthToVoltage+0x64>
		return 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e0b0      	b.n	80020ba <wavelengthToVoltage+0x1c6>


	uint16_t 	wavelengthIndex = wavelength - WAVELENGTH_MIN;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 8001f60:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t 	voltageArrayAtTemp[TEMP_LOOKUP_LEN];
	uint8_t 	tempIndexLower = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t 	tempIndexUpper = 1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	for( int i = 0; i < TEMP_LOOKUP_LEN; i ++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	633b      	str	r3, [r7, #48]	; 0x30
 8001f72:	e036      	b.n	8001fe2 <wavelengthToVoltage+0xee>
	{
		// copy the values from the lookup table
		voltageArrayAtTemp[i] = fpiLookup[wavelengthIndex][i];
 8001f74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001f76:	4954      	ldr	r1, [pc, #336]	; (80020c8 <wavelengthToVoltage+0x1d4>)
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f80:	4413      	add	r3, r2
 8001f82:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001f8e:	440b      	add	r3, r1
 8001f90:	f823 2c30 	strh.w	r2, [r3, #-48]

		// get the temperature range
		if( temperature >= tempLookup[i])
 8001f94:	4a4d      	ldr	r2, [pc, #308]	; (80020cc <wavelengthToVoltage+0x1d8>)
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	ee07 3a90 	vmov	s15, r3
 8001fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa4:	ed97 7a00 	vldr	s14, [r7]
 8001fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	db02      	blt.n	8001fb8 <wavelengthToVoltage+0xc4>
			tempIndexLower = i;
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

		if( temperature < tempLookup[i])
 8001fb8:	4a44      	ldr	r2, [pc, #272]	; (80020cc <wavelengthToVoltage+0x1d8>)
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc8:	ed97 7a00 	vldr	s14, [r7]
 8001fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd4:	d502      	bpl.n	8001fdc <wavelengthToVoltage+0xe8>
			tempIndexUpper = i;
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	for( int i = 0; i < TEMP_LOOKUP_LEN; i ++)
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	3301      	adds	r3, #1
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	ddc5      	ble.n	8001f74 <wavelengthToVoltage+0x80>
	}

	uint16_t voltageLower = voltageArrayAtTemp[tempIndexLower];
 8001fe8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8001ff8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t voltageUpper = voltageArrayAtTemp[tempIndexUpper];
 8001ffa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002004:	4413      	add	r3, r2
 8002006:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800200a:	857b      	strh	r3, [r7, #42]	; 0x2a
	float tempLower = (float)tempLookup[tempIndexLower];
 800200c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002010:	4a2e      	ldr	r2, [pc, #184]	; (80020cc <wavelengthToVoltage+0x1d8>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float tempUpper = (float)tempLookup[tempIndexUpper];
 8002020:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002024:	4a29      	ldr	r2, [pc, #164]	; (80020cc <wavelengthToVoltage+0x1d8>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002030:	edc7 7a08 	vstr	s15, [r7, #32]

	float 		tempRange = tempUpper - tempLower;
 8002034:	ed97 7a08 	vldr	s14, [r7, #32]
 8002038:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800203c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002040:	edc7 7a07 	vstr	s15, [r7, #28]
	uint16_t 	voltageRange = voltageUpper - voltageLower;
 8002044:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002046:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	837b      	strh	r3, [r7, #26]
	float 		tempOffsetFactor = (tempDegC - tempLower) / tempRange;
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <wavelengthToVoltage+0x1dc>)
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002056:	ee77 6a67 	vsub.f32	s13, s14, s15
 800205a:	ed97 7a07 	vldr	s14, [r7, #28]
 800205e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002062:	edc7 7a05 	vstr	s15, [r7, #20]

	voltage = voltageLower + (int)(tempOffsetFactor * (float)voltageRange);
 8002066:	8b7b      	ldrh	r3, [r7, #26]
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002070:	edd7 7a05 	vldr	s15, [r7, #20]
 8002074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207c:	ee17 3a90 	vmov	r3, s15
 8002080:	b29a      	uxth	r2, r3
 8002082:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002084:	4413      	add	r3, r2
 8002086:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(voltage > VFPI_MAX)
 8002088:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800208a:	f249 52ec 	movw	r2, #38380	; 0x95ec
 800208e:	4293      	cmp	r3, r2
 8002090:	d902      	bls.n	8002098 <wavelengthToVoltage+0x1a4>
		voltage = VFPI_MAX;
 8002092:	f249 53ec 	movw	r3, #38380	; 0x95ec
 8002096:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(voltage < VFPI_MIN)
 8002098:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800209a:	f246 62f5 	movw	r2, #26357	; 0x66f5
 800209e:	4293      	cmp	r3, r2
 80020a0:	d802      	bhi.n	80020a8 <wavelengthToVoltage+0x1b4>
		voltage = VFPI_MIN;
 80020a2:	f246 63f6 	movw	r3, #26358	; 0x66f6
 80020a6:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(voltage > FPI_USER_LIMIT)
 80020a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020aa:	f249 529c 	movw	r2, #38300	; 0x959c
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d902      	bls.n	80020b8 <wavelengthToVoltage+0x1c4>
		voltage = FPI_USER_LIMIT;
 80020b2:	f249 539c 	movw	r3, #38300	; 0x959c
 80020b6:	86fb      	strh	r3, [r7, #54]	; 0x36

	return voltage;
 80020b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	373c      	adds	r7, #60	; 0x3c
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	0800d280 	.word	0x0800d280
 80020cc:	0800d278 	.word	0x0800d278
 80020d0:	2000024c 	.word	0x2000024c

080020d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020e6:	f000 fe49 	bl	8002d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM8) {
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <HAL_TIM_PeriodElapsedCallback+0x24>
	  loop();
 80020f4:	f7ff f9be 	bl	8001474 <loop>
  }
  /* USER CODE END Callback 1 */
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40001400 	.word	0x40001400
 8002104:	40013400 	.word	0x40013400

08002108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	htim1.Instance->CCR1 = 0;
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <Error_Handler+0x18>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2200      	movs	r2, #0
 8002112:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END Error_Handler_Debug */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20001b08 	.word	0x20001b08

08002124 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <MX_OPAMP1_Init+0x70>)
 800212a:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <MX_OPAMP1_Init+0x74>)
 800212c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <MX_OPAMP1_Init+0x70>)
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <MX_OPAMP1_Init+0x70>)
 8002136:	2240      	movs	r2, #64	; 0x40
 8002138:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <MX_OPAMP1_Init+0x70>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <MX_OPAMP1_Init+0x70>)
 8002142:	2200      	movs	r2, #0
 8002144:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <MX_OPAMP1_Init+0x70>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <MX_OPAMP1_Init+0x70>)
 800214e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002152:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_8_OR_MINUS_7;
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <MX_OPAMP1_Init+0x70>)
 8002156:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_USER;
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <MX_OPAMP1_Init+0x70>)
 800215e:	2210      	movs	r2, #16
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  hopamp1.Init.TrimmingValueP = 0;
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_OPAMP1_Init+0x70>)
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
  hopamp1.Init.TrimmingValueN = 0;
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <MX_OPAMP1_Init+0x70>)
 800216a:	2200      	movs	r2, #0
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800216e:	4809      	ldr	r0, [pc, #36]	; (8002194 <MX_OPAMP1_Init+0x70>)
 8002170:	f003 f85c 	bl	800522c <HAL_OPAMP_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_OPAMP1_Init+0x5a>
  {
    Error_Handler();
 800217a:	f7ff ffc5 	bl	8002108 <Error_Handler>
  }
  if (HAL_OPAMP_SelfCalibrate(&hopamp1) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_OPAMP1_Init+0x70>)
 8002180:	f003 f955 	bl	800542e <HAL_OPAMP_SelfCalibrate>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_OPAMP1_Init+0x6a>
  {
    Error_Handler();
 800218a:	f7ff ffbd 	bl	8002108 <Error_Handler>
  }

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20001970 	.word	0x20001970
 8002198:	40010300 	.word	0x40010300

0800219c <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <MX_OPAMP2_Init+0x54>)
 80021a2:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <MX_OPAMP2_Init+0x58>)
 80021a4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <MX_OPAMP2_Init+0x54>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <MX_OPAMP2_Init+0x54>)
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <MX_OPAMP2_Init+0x54>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <MX_OPAMP2_Init+0x54>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_OPAMP2_Init+0x54>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <MX_OPAMP2_Init+0x54>)
 80021c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_64_OR_MINUS_63;
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <MX_OPAMP2_Init+0x54>)
 80021ce:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <MX_OPAMP2_Init+0x54>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_OPAMP2_Init+0x54>)
 80021dc:	f003 f826 	bl	800522c <HAL_OPAMP_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 80021e6:	f7ff ff8f 	bl	8002108 <Error_Handler>
  }

}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200018f8 	.word	0x200018f8
 80021f4:	40010304 	.word	0x40010304

080021f8 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <MX_OPAMP3_Init+0x54>)
 80021fe:	4a14      	ldr	r2, [pc, #80]	; (8002250 <MX_OPAMP3_Init+0x58>)
 8002200:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <MX_OPAMP3_Init+0x54>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <MX_OPAMP3_Init+0x54>)
 800220a:	2240      	movs	r2, #64	; 0x40
 800220c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_OPAMP3_Init+0x54>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <MX_OPAMP3_Init+0x54>)
 8002216:	2200      	movs	r2, #0
 8002218:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_OPAMP3_Init+0x54>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <MX_OPAMP3_Init+0x54>)
 8002222:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_64_OR_MINUS_63;
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_OPAMP3_Init+0x54>)
 800222a:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_OPAMP3_Init+0x54>)
 8002232:	2200      	movs	r2, #0
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_OPAMP3_Init+0x54>)
 8002238:	f002 fff8 	bl	800522c <HAL_OPAMP_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8002242:	f7ff ff61 	bl	8002108 <Error_Handler>
  }

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20001934 	.word	0x20001934
 8002250:	40010308 	.word	0x40010308

08002254 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a2e      	ldr	r2, [pc, #184]	; (800232c <HAL_OPAMP_MspInit+0xd8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d119      	bne.n	80022aa <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <HAL_OPAMP_MspInit+0xdc>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	4a2d      	ldr	r2, [pc, #180]	; (8002330 <HAL_OPAMP_MspInit+0xdc>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_OPAMP_MspInit+0xdc>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = __1V65_Pin|TEMP_PGA_Pin|TEMP_SENSE_Pin;
 800228e:	230e      	movs	r3, #14
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002292:	2303      	movs	r3, #3
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a4:	f002 fdf8 	bl	8004e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 80022a8:	e03b      	b.n	8002322 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a21      	ldr	r2, [pc, #132]	; (8002334 <HAL_OPAMP_MspInit+0xe0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d119      	bne.n	80022e8 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_OPAMP_MspInit+0xdc>)
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_OPAMP_MspInit+0xdc>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_OPAMP_MspInit+0xdc>)
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PHOTO_DIFF_P_Pin|PGA_OUT_P_Pin|__1V65A7_Pin;
 80022cc:	23e0      	movs	r3, #224	; 0xe0
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022d0:	2303      	movs	r3, #3
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4619      	mov	r1, r3
 80022de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e2:	f002 fdd9 	bl	8004e98 <HAL_GPIO_Init>
}
 80022e6:	e01c      	b.n	8002322 <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_OPAMP_MspInit+0xe4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d117      	bne.n	8002322 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_OPAMP_MspInit+0xdc>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_OPAMP_MspInit+0xdc>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_OPAMP_MspInit+0xdc>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = __1V65B0_Pin|PGA_OUT_N_Pin|PHOTO_DIFF_N_Pin;
 800230a:	2307      	movs	r3, #7
 800230c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230e:	2303      	movs	r3, #3
 8002310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	4619      	mov	r1, r3
 800231c:	4807      	ldr	r0, [pc, #28]	; (800233c <HAL_OPAMP_MspInit+0xe8>)
 800231e:	f002 fdbb 	bl	8004e98 <HAL_GPIO_Init>
}
 8002322:	bf00      	nop
 8002324:	3728      	adds	r7, #40	; 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40010300 	.word	0x40010300
 8002330:	40021000 	.word	0x40021000
 8002334:	40010304 	.word	0x40010304
 8002338:	40010308 	.word	0x40010308
 800233c:	48000400 	.word	0x48000400

08002340 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <MX_SPI1_Init+0x78>)
 8002348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <MX_SPI1_Init+0x74>)
 800234c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <MX_SPI1_Init+0x74>)
 800235a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800235e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002368:	2200      	movs	r2, #0
 800236a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_SPI1_Init+0x74>)
 800236e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002372:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002376:	2238      	movs	r2, #56	; 0x38
 8002378:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_SPI1_Init+0x74>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002388:	2200      	movs	r2, #0
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <MX_SPI1_Init+0x74>)
 800238e:	2207      	movs	r2, #7
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <MX_SPI1_Init+0x74>)
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <MX_SPI1_Init+0x74>)
 800239a:	2208      	movs	r2, #8
 800239c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <MX_SPI1_Init+0x74>)
 80023a0:	f004 f95a 	bl	8006658 <HAL_SPI_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023aa:	f7ff fead 	bl	8002108 <Error_Handler>
  }

}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200019ac 	.word	0x200019ac
 80023b8:	40013000 	.word	0x40013000

080023bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <HAL_SPI_MspInit+0x108>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d16e      	bne.n	80024bc <HAL_SPI_MspInit+0x100>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023de:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <HAL_SPI_MspInit+0x10c>)
 80023e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e2:	4a39      	ldr	r2, [pc, #228]	; (80024c8 <HAL_SPI_MspInit+0x10c>)
 80023e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023e8:	6613      	str	r3, [r2, #96]	; 0x60
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <HAL_SPI_MspInit+0x10c>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <HAL_SPI_MspInit+0x10c>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4a33      	ldr	r2, [pc, #204]	; (80024c8 <HAL_SPI_MspInit+0x10c>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_SPI_MspInit+0x10c>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <HAL_SPI_MspInit+0x10c>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	4a2d      	ldr	r2, [pc, #180]	; (80024c8 <HAL_SPI_MspInit+0x10c>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_SPI_MspInit+0x10c>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002438:	2305      	movs	r3, #5
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002446:	f002 fd27 	bl	8004e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800244a:	2338      	movs	r3, #56	; 0x38
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800245a:	2305      	movs	r3, #5
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4819      	ldr	r0, [pc, #100]	; (80024cc <HAL_SPI_MspInit+0x110>)
 8002466:	f002 fd17 	bl	8004e98 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 800246c:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_SPI_MspInit+0x118>)
 800246e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 8002472:	220b      	movs	r2, #11
 8002474:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 8002478:	2210      	movs	r2, #16
 800247a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024a0:	480b      	ldr	r0, [pc, #44]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 80024a2:	f002 fa87 	bl	80049b4 <HAL_DMA_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 80024ac:	f7ff fe2c 	bl	8002108 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
 80024b6:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <HAL_SPI_MspInit+0x114>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024bc:	bf00      	nop
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40013000 	.word	0x40013000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	48000400 	.word	0x48000400
 80024d0:	20001a10 	.word	0x20001a10
 80024d4:	40020030 	.word	0x40020030

080024d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_MspInit+0x44>)
 80024e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e2:	4a0e      	ldr	r2, [pc, #56]	; (800251c <HAL_MspInit+0x44>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6613      	str	r3, [r2, #96]	; 0x60
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_MspInit+0x44>)
 80024ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_MspInit+0x44>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_MspInit+0x44>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_MspInit+0x44>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800250e:	f003 f957 	bl	80057c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_InitTick+0xcc>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	4a2c      	ldr	r2, [pc, #176]	; (80025ec <HAL_InitTick+0xcc>)
 800253c:	f043 0320 	orr.w	r3, r3, #32
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_InitTick+0xcc>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800254e:	f107 020c 	add.w	r2, r7, #12
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fe17 	bl	800618c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800255e:	f003 fdff 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 8002562:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <HAL_InitTick+0xd0>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	0c9b      	lsrs	r3, r3, #18
 800256e:	3b01      	subs	r3, #1
 8002570:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_InitTick+0xd4>)
 8002574:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <HAL_InitTick+0xd8>)
 8002576:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_InitTick+0xd4>)
 800257a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800257e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_InitTick+0xd4>)
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_InitTick+0xd4>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_InitTick+0xd4>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&htim7);
 8002592:	4818      	ldr	r0, [pc, #96]	; (80025f4 <HAL_InitTick+0xd4>)
 8002594:	f004 fbfc 	bl	8006d90 <HAL_TIM_Base_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800259e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11b      	bne.n	80025de <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80025a6:	4813      	ldr	r0, [pc, #76]	; (80025f4 <HAL_InitTick+0xd4>)
 80025a8:	f004 fc54 	bl	8006e54 <HAL_TIM_Base_Start_IT>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80025b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d111      	bne.n	80025de <HAL_InitTick+0xbe>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025ba:	2037      	movs	r0, #55	; 0x37
 80025bc:	f002 f9ec 	bl	8004998 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b0f      	cmp	r3, #15
 80025c4:	d808      	bhi.n	80025d8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80025c6:	2200      	movs	r2, #0
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	2037      	movs	r0, #55	; 0x37
 80025cc:	f002 f9ca 	bl	8004964 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_InitTick+0xdc>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e002      	b.n	80025de <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80025de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3730      	adds	r7, #48	; 0x30
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	431bde83 	.word	0x431bde83
 80025f4:	20001a70 	.word	0x20001a70
 80025f8:	40001400 	.word	0x40001400
 80025fc:	2000000c 	.word	0x2000000c

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <HardFault_Handler+0x4>

08002614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <MemManage_Handler+0x4>

0800261a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261e:	e7fe      	b.n	800261e <BusFault_Handler+0x4>

08002620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <UsageFault_Handler+0x4>

08002626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <DMA1_Channel1_IRQHandler+0x10>)
 8002666:	f002 fac8 	bl	8004bfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000354 	.word	0x20000354

08002674 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <DMA1_Channel2_IRQHandler+0x10>)
 800267a:	f002 fabe 	bl	8004bfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200003b4 	.word	0x200003b4

08002688 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <DMA1_Channel3_IRQHandler+0x10>)
 800268e:	f002 fab4 	bl	8004bfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20001a10 	.word	0x20001a10

0800269c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80026a0:	2040      	movs	r0, #64	; 0x40
 80026a2:	f002 fdab 	bl	80051fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM8_UP_IRQHandler+0x10>)
 80026b2:	f004 fd91 	bl	80071d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20001abc 	.word	0x20001abc

080026c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <TIM7_IRQHandler+0x10>)
 80026c6:	f004 fd87 	bl	80071d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20001a70 	.word	0x20001a70

080026d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
	return 1;
 80026d8:	2301      	movs	r3, #1
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_kill>:

int _kill(int pid, int sig)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026ee:	f005 fd7b 	bl	80081e8 <__errno>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2216      	movs	r2, #22
 80026f6:	601a      	str	r2, [r3, #0]
	return -1;
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <_exit>:

void _exit (int status)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800270c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ffe7 	bl	80026e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002716:	e7fe      	b.n	8002716 <_exit+0x12>

08002718 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e00a      	b.n	8002740 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800272a:	f3af 8000 	nop.w
 800272e:	4601      	mov	r1, r0
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	60ba      	str	r2, [r7, #8]
 8002736:	b2ca      	uxtb	r2, r1
 8002738:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	429a      	cmp	r2, r3
 8002746:	dbf0      	blt.n	800272a <_read+0x12>
	}

return len;
 8002748:	687b      	ldr	r3, [r7, #4]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e009      	b.n	8002778 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	60ba      	str	r2, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	3301      	adds	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	429a      	cmp	r2, r3
 800277e:	dbf1      	blt.n	8002764 <_write+0x12>
	}
	return len;
 8002780:	687b      	ldr	r3, [r7, #4]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <_close>:

int _close(int file)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
	return -1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027b2:	605a      	str	r2, [r3, #4]
	return 0;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <_isatty>:

int _isatty(int file)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
	return 1;
 80027ca:	2301      	movs	r3, #1
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
	return 0;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027fc:	4a14      	ldr	r2, [pc, #80]	; (8002850 <_sbrk+0x5c>)
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <_sbrk+0x60>)
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <_sbrk+0x64>)
 8002812:	4a12      	ldr	r2, [pc, #72]	; (800285c <_sbrk+0x68>)
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <_sbrk+0x64>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d207      	bcs.n	8002834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002824:	f005 fce0 	bl	80081e8 <__errno>
 8002828:	4603      	mov	r3, r0
 800282a:	220c      	movs	r2, #12
 800282c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002832:	e009      	b.n	8002848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <_sbrk+0x64>)
 8002844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20008000 	.word	0x20008000
 8002854:	00000400 	.word	0x00000400
 8002858:	20000270 	.word	0x20000270
 800285c:	20001bb8 	.word	0x20001bb8

08002860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <SystemInit+0x28>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	4a07      	ldr	r2, [pc, #28]	; (8002888 <SystemInit+0x28>)
 800286c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SystemInit+0x28>)
 8002876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800287a:	609a      	str	r2, [r3, #8]
#endif
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b098      	sub	sp, #96	; 0x60
 8002890:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002892:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800289e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	615a      	str	r2, [r3, #20]
 80028b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	2234      	movs	r2, #52	; 0x34
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f005 fcbf 	bl	800823c <memset>

  htim1.Instance = TIM1;
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <MX_TIM1_Init+0x120>)
 80028c0:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <MX_TIM1_Init+0x124>)
 80028c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028c4:	4b39      	ldr	r3, [pc, #228]	; (80029ac <MX_TIM1_Init+0x120>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ca:	4b38      	ldr	r3, [pc, #224]	; (80029ac <MX_TIM1_Init+0x120>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3399;
 80028d0:	4b36      	ldr	r3, [pc, #216]	; (80029ac <MX_TIM1_Init+0x120>)
 80028d2:	f640 5247 	movw	r2, #3399	; 0xd47
 80028d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d8:	4b34      	ldr	r3, [pc, #208]	; (80029ac <MX_TIM1_Init+0x120>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028de:	4b33      	ldr	r3, [pc, #204]	; (80029ac <MX_TIM1_Init+0x120>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e4:	4b31      	ldr	r3, [pc, #196]	; (80029ac <MX_TIM1_Init+0x120>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028ea:	4830      	ldr	r0, [pc, #192]	; (80029ac <MX_TIM1_Init+0x120>)
 80028ec:	f004 fb1c 	bl	8006f28 <HAL_TIM_PWM_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80028f6:	f7ff fc07 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028fa:	2320      	movs	r3, #32
 80028fc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002906:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800290a:	4619      	mov	r1, r3
 800290c:	4827      	ldr	r0, [pc, #156]	; (80029ac <MX_TIM1_Init+0x120>)
 800290e:	f005 faef 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002918:	f7ff fbf6 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800291c:	2360      	movs	r3, #96	; 0x60
 800291e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 10;
 8002920:	230a      	movs	r3, #10
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002924:	2300      	movs	r3, #0
 8002926:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002928:	2300      	movs	r3, #0
 800292a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002934:	2300      	movs	r3, #0
 8002936:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002938:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800293c:	2208      	movs	r2, #8
 800293e:	4619      	mov	r1, r3
 8002940:	481a      	ldr	r0, [pc, #104]	; (80029ac <MX_TIM1_Init+0x120>)
 8002942:	f004 fdc9 	bl	80074d8 <HAL_TIM_PWM_ConfigChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800294c:	f7ff fbdc 	bl	8002108 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002968:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002980:	2300      	movs	r3, #0
 8002982:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	4619      	mov	r1, r3
 800298c:	4807      	ldr	r0, [pc, #28]	; (80029ac <MX_TIM1_Init+0x120>)
 800298e:	f005 fb31 	bl	8007ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002998:	f7ff fbb6 	bl	8002108 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800299c:	4803      	ldr	r0, [pc, #12]	; (80029ac <MX_TIM1_Init+0x120>)
 800299e:	f000 f94f 	bl	8002c40 <HAL_TIM_MspPostInit>

}
 80029a2:	bf00      	nop
 80029a4:	3760      	adds	r7, #96	; 0x60
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20001b08 	.word	0x20001b08
 80029b0:	40012c00 	.word	0x40012c00

080029b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ba:	f107 031c 	add.w	r3, r7, #28
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c6:	463b      	mov	r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
 80029d4:	615a      	str	r2, [r3, #20]
 80029d6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80029d8:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <MX_TIM2_Init+0xd0>)
 80029da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029e0:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <MX_TIM2_Init+0xd0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e6:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <MX_TIM2_Init+0xd0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 850-1;
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <MX_TIM2_Init+0xd0>)
 80029ee:	f240 3251 	movw	r2, #849	; 0x351
 80029f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f4:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <MX_TIM2_Init+0xd0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <MX_TIM2_Init+0xd0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a00:	4820      	ldr	r0, [pc, #128]	; (8002a84 <MX_TIM2_Init+0xd0>)
 8002a02:	f004 fa91 	bl	8006f28 <HAL_TIM_PWM_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002a0c:	f7ff fb7c 	bl	8002108 <Error_Handler>
  }
  HAL_TIMEx_DitheringEnable(&htim2);
 8002a10:	481c      	ldr	r0, [pc, #112]	; (8002a84 <MX_TIM2_Init+0xd0>)
 8002a12:	f005 fb8f 	bl	8008134 <HAL_TIMEx_DitheringEnable>

  /* rewrite ARR register when dither mode active */
  __HAL_TIM_SET_AUTORELOAD(&htim2, 13599);
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <MX_TIM2_Init+0xd0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f243 521f 	movw	r2, #13599	; 0x351f
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <MX_TIM2_Init+0xd0>)
 8002a22:	f243 521f 	movw	r2, #13599	; 0x351f
 8002a26:	60da      	str	r2, [r3, #12]
  HAL_TIM_GenerateEvent(&htim2, TIM_EVENTSOURCE_UPDATE);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4816      	ldr	r0, [pc, #88]	; (8002a84 <MX_TIM2_Init+0xd0>)
 8002a2c:	f004 fe64 	bl	80076f8 <HAL_TIM_GenerateEvent>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4811      	ldr	r0, [pc, #68]	; (8002a84 <MX_TIM2_Init+0xd0>)
 8002a40:	f005 fa56 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002a4a:	f7ff fb5d 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a4e:	2360      	movs	r3, #96	; 0x60
 8002a50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002a56:	2302      	movs	r3, #2
 8002a58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a5e:	463b      	mov	r3, r7
 8002a60:	2208      	movs	r2, #8
 8002a62:	4619      	mov	r1, r3
 8002a64:	4807      	ldr	r0, [pc, #28]	; (8002a84 <MX_TIM2_Init+0xd0>)
 8002a66:	f004 fd37 	bl	80074d8 <HAL_TIM_PWM_ConfigChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8002a70:	f7ff fb4a 	bl	8002108 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002a74:	4803      	ldr	r0, [pc, #12]	; (8002a84 <MX_TIM2_Init+0xd0>)
 8002a76:	f000 f8e3 	bl	8002c40 <HAL_TIM_MspPostInit>

}
 8002a7a:	bf00      	nop
 8002a7c:	3728      	adds	r7, #40	; 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20001b54 	.word	0x20001b54

08002a88 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b098      	sub	sp, #96	; 0x60
 8002a8c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
 8002aaa:	615a      	str	r2, [r3, #20]
 8002aac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2234      	movs	r2, #52	; 0x34
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f005 fbc1 	bl	800823c <memset>

  htim8.Instance = TIM8;
 8002aba:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002abc:	4a39      	ldr	r2, [pc, #228]	; (8002ba4 <MX_TIM8_Init+0x11c>)
 8002abe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 170-1;
 8002ac0:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002ac2:	22a9      	movs	r2, #169	; 0xa9
 8002ac4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac6:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8002acc:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002ace:	2231      	movs	r2, #49	; 0x31
 8002ad0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad2:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ad8:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ade:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002ae4:	482e      	ldr	r0, [pc, #184]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002ae6:	f004 fa1f 	bl	8006f28 <HAL_TIM_PWM_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002af0:	f7ff fb0a 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002af4:	2320      	movs	r3, #32
 8002af6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002af8:	2300      	movs	r3, #0
 8002afa:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b04:	4619      	mov	r1, r3
 8002b06:	4826      	ldr	r0, [pc, #152]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002b08:	f005 f9f2 	bl	8007ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8002b12:	f7ff faf9 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b16:	2360      	movs	r3, #96	; 0x60
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b22:	2300      	movs	r3, #0
 8002b24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b36:	2200      	movs	r2, #0
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4819      	ldr	r0, [pc, #100]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002b3c:	f004 fccc 	bl	80074d8 <HAL_TIM_PWM_ConfigChannel>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002b46:	f7ff fadf 	bl	8002108 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4806      	ldr	r0, [pc, #24]	; (8002ba0 <MX_TIM8_Init+0x118>)
 8002b88:	f005 fa34 	bl	8007ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8002b92:	f7ff fab9 	bl	8002108 <Error_Handler>
  }

}
 8002b96:	bf00      	nop
 8002b98:	3760      	adds	r7, #96	; 0x60
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20001abc 	.word	0x20001abc
 8002ba4:	40013400 	.word	0x40013400

08002ba8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <HAL_TIM_PWM_MspInit+0x8c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bba:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <HAL_TIM_PWM_MspInit+0x90>)
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <HAL_TIM_PWM_MspInit+0x90>)
 8002bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bc4:	6613      	str	r3, [r2, #96]	; 0x60
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <HAL_TIM_PWM_MspInit+0x90>)
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002bd2:	e02a      	b.n	8002c2a <HAL_TIM_PWM_MspInit+0x82>
  else if(tim_pwmHandle->Instance==TIM2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bde:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <HAL_TIM_PWM_MspInit+0x90>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <HAL_TIM_PWM_MspInit+0x90>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <HAL_TIM_PWM_MspInit+0x90>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]
}
 8002bf6:	e018      	b.n	8002c2a <HAL_TIM_PWM_MspInit+0x82>
  else if(tim_pwmHandle->Instance==TIM8)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <HAL_TIM_PWM_MspInit+0x94>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d113      	bne.n	8002c2a <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c02:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_TIM_PWM_MspInit+0x90>)
 8002c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c06:	4a0c      	ldr	r2, [pc, #48]	; (8002c38 <HAL_TIM_PWM_MspInit+0x90>)
 8002c08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_TIM_PWM_MspInit+0x90>)
 8002c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	202c      	movs	r0, #44	; 0x2c
 8002c20:	f001 fea0 	bl	8004964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8002c24:	202c      	movs	r0, #44	; 0x2c
 8002c26:	f001 feb7 	bl	8004998 <HAL_NVIC_EnableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40013400 	.word	0x40013400

08002c40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a24      	ldr	r2, [pc, #144]	; (8002cf0 <HAL_TIM_MspPostInit+0xb0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d11e      	bne.n	8002ca0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <HAL_TIM_MspPostInit+0xb4>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <HAL_TIM_MspPostInit+0xb4>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6e:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <HAL_TIM_MspPostInit+0xb4>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LAMP_PWM_Pin;
 8002c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c8c:	2306      	movs	r3, #6
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LAMP_PWM_GPIO_Port, &GPIO_InitStruct);
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	4619      	mov	r1, r3
 8002c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9a:	f002 f8fd 	bl	8004e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c9e:	e022      	b.n	8002ce6 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d11d      	bne.n	8002ce6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_TIM_MspPostInit+0xb4>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	4a11      	ldr	r2, [pc, #68]	; (8002cf4 <HAL_TIM_MspPostInit+0xb4>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_TIM_MspPostInit+0xb4>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BOOST_PWM_Pin;
 8002cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOST_PWM_GPIO_Port, &GPIO_InitStruct);
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce2:	f002 f8d9 	bl	8004e98 <HAL_GPIO_Init>
}
 8002ce6:	bf00      	nop
 8002ce8:	3728      	adds	r7, #40	; 0x28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cf8:	480d      	ldr	r0, [pc, #52]	; (8002d30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cfc:	480d      	ldr	r0, [pc, #52]	; (8002d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cfe:	490e      	ldr	r1, [pc, #56]	; (8002d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <LoopForever+0xe>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d04:	e002      	b.n	8002d0c <LoopCopyDataInit>

08002d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0a:	3304      	adds	r3, #4

08002d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d10:	d3f9      	bcc.n	8002d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d12:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d14:	4c0b      	ldr	r4, [pc, #44]	; (8002d44 <LoopForever+0x16>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d18:	e001      	b.n	8002d1e <LoopFillZerobss>

08002d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d1c:	3204      	adds	r2, #4

08002d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d20:	d3fb      	bcc.n	8002d1a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d22:	f7ff fd9d 	bl	8002860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d26:	f005 fa65 	bl	80081f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d2a:	f7fe fb19 	bl	8001360 <main>

08002d2e <LoopForever>:

LoopForever:
    b LoopForever
 8002d2e:	e7fe      	b.n	8002d2e <LoopForever>
  ldr   r0, =_estack
 8002d30:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d38:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002d3c:	0800e460 	.word	0x0800e460
  ldr r2, =_sbss
 8002d40:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d44:	20001bb4 	.word	0x20001bb4

08002d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d48:	e7fe      	b.n	8002d48 <ADC1_2_IRQHandler>

08002d4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d54:	2003      	movs	r0, #3
 8002d56:	f001 fdfa 	bl	800494e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7ff fbe0 	bl	8002520 <HAL_InitTick>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	71fb      	strb	r3, [r7, #7]
 8002d6a:	e001      	b.n	8002d70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d6c:	f7ff fbb4 	bl	80024d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d70:	79fb      	ldrb	r3, [r7, #7]

}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_IncTick+0x1c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_IncTick+0x20>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a03      	ldr	r2, [pc, #12]	; (8002d98 <HAL_IncTick+0x1c>)
 8002d8c:	6013      	str	r3, [r2, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	20001ba0 	.word	0x20001ba0
 8002d9c:	20000010 	.word	0x20000010

08002da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return uwTick;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_GetTick+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20001ba0 	.word	0x20001ba0

08002db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc0:	f7ff ffee 	bl	8002da0 <HAL_GetTick>
 8002dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd0:	d004      	beq.n	8002ddc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_Delay+0x40>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ddc:	bf00      	nop
 8002dde:	f7ff ffdf 	bl	8002da0 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d8f7      	bhi.n	8002dde <HAL_Delay+0x26>
  {
  }
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000010 	.word	0x20000010

08002dfc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	609a      	str	r2, [r3, #8]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3360      	adds	r3, #96	; 0x60
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <LL_ADC_SetOffset+0x44>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	03fff000 	.word	0x03fff000

08002eac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3360      	adds	r3, #96	; 0x60
 8002eba:	461a      	mov	r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3360      	adds	r3, #96	; 0x60
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b087      	sub	sp, #28
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3360      	adds	r3, #96	; 0x60
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3360      	adds	r3, #96	; 0x60
 8002f54:	461a      	mov	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	615a      	str	r2, [r3, #20]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b087      	sub	sp, #28
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3330      	adds	r3, #48	; 0x30
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	4413      	add	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	211f      	movs	r1, #31
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	f003 011f 	and.w	r1, r3, #31
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	431a      	orrs	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800301e:	b480      	push	{r7}
 8003020:	b087      	sub	sp, #28
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3314      	adds	r3, #20
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	0e5b      	lsrs	r3, r3, #25
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	4413      	add	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	0d1b      	lsrs	r3, r3, #20
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2107      	movs	r1, #7
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	401a      	ands	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	0d1b      	lsrs	r3, r3, #20
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	fa01 f303 	lsl.w	r3, r1, r3
 8003062:	431a      	orrs	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003068:	bf00      	nop
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308c:	43db      	mvns	r3, r3
 800308e:	401a      	ands	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0318 	and.w	r3, r3, #24
 8003096:	4908      	ldr	r1, [pc, #32]	; (80030b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003098:	40d9      	lsrs	r1, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	400b      	ands	r3, r1
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	431a      	orrs	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	0007ffff 	.word	0x0007ffff

080030bc <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	330c      	adds	r3, #12
 80030cc:	4618      	mov	r0, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	0d1b      	lsrs	r3, r3, #20
 80030d2:	f003 0103 	and.w	r1, r3, #3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f003 0201 	and.w	r2, r3, #1
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4403      	add	r3, r0
 80030ea:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 80030f6:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 80030fa:	43db      	mvns	r3, r3
 80030fc:	401a      	ands	r2, r3
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	400b      	ands	r3, r1
 8003104:	431a      	orrs	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800310a:	bf00      	nop
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8003116:	b480      	push	{r7}
 8003118:	b087      	sub	sp, #28
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3320      	adds	r3, #32
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	0d1b      	lsrs	r3, r3, #20
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	4413      	add	r3, r2
 8003136:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	0419      	lsls	r1, r3, #16
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	430b      	orrs	r3, r1
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 031f 	and.w	r3, r3, #31
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003186:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6093      	str	r3, [r2, #8]
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ae:	d101      	bne.n	80031b4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031fe:	d101      	bne.n	8003204 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003222:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003226:	f043 0201 	orr.w	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <LL_ADC_IsEnabled+0x18>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <LL_ADC_IsEnabled+0x1a>
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003274:	f043 0204 	orr.w	r2, r3, #4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d101      	bne.n	80032a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d101      	bne.n	80032c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	601a      	str	r2, [r3, #0]
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032fc:	601a      	str	r2, [r3, #0]
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	605a      	str	r2, [r3, #4]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	605a      	str	r2, [r3, #4]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	605a      	str	r2, [r3, #4]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	605a      	str	r2, [r3, #4]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	605a      	str	r2, [r3, #4]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	605a      	str	r2, [r3, #4]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e16b      	b.n	80036da <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fd fda3 	bl	8000f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff feb6 	bl	800319a <LL_ADC_IsDeepPowerDownEnabled>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fe9c 	bl	8003176 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fed1 	bl	80031ea <LL_ADC_IsInternalRegulatorEnabled>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d113      	bne.n	8003476 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff feb5 	bl	80031c2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003458:	4ba2      	ldr	r3, [pc, #648]	; (80036e4 <HAL_ADC_Init+0x2fc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	4aa2      	ldr	r2, [pc, #648]	; (80036e8 <HAL_ADC_Init+0x300>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003468:	e002      	b.n	8003470 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3b01      	subs	r3, #1
 800346e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f9      	bne.n	800346a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff feb5 	bl	80031ea <LL_ADC_IsInternalRegulatorEnabled>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10d      	bne.n	80034a2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	f043 0210 	orr.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff feee 	bl	8003288 <LL_ADC_REG_IsConversionOngoing>
 80034ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 8106 	bne.w	80036c8 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 8102 	bne.w	80036c8 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034cc:	f043 0202 	orr.w	r2, r3, #2
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff feae 	bl	800323a <LL_ADC_IsEnabled>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d111      	bne.n	8003508 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034e8:	f7ff fea7 	bl	800323a <LL_ADC_IsEnabled>
 80034ec:	4604      	mov	r4, r0
 80034ee:	487f      	ldr	r0, [pc, #508]	; (80036ec <HAL_ADC_Init+0x304>)
 80034f0:	f7ff fea3 	bl	800323a <LL_ADC_IsEnabled>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4323      	orrs	r3, r4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4619      	mov	r1, r3
 8003502:	487b      	ldr	r0, [pc, #492]	; (80036f0 <HAL_ADC_Init+0x308>)
 8003504:	f7ff fc7a 	bl	8002dfc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	7f5b      	ldrb	r3, [r3, #29]
 800350c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003512:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003518:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800351e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003526:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003532:	2b01      	cmp	r3, #1
 8003534:	d106      	bne.n	8003544 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	3b01      	subs	r3, #1
 800353c:	045b      	lsls	r3, r3, #17
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	4b63      	ldr	r3, [pc, #396]	; (80036f4 <HAL_ADC_Init+0x30c>)
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	430b      	orrs	r3, r1
 8003572:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fe7a 	bl	8003288 <LL_ADC_REG_IsConversionOngoing>
 8003594:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fe87 	bl	80032ae <LL_ADC_INJ_IsConversionOngoing>
 80035a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d16d      	bne.n	8003684 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d16a      	bne.n	8003684 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ca:	f023 0302 	bic.w	r3, r3, #2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	69b9      	ldr	r1, [r7, #24]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d017      	beq.n	8003610 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6911      	ldr	r1, [r2, #16]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	430b      	orrs	r3, r1
 800360a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800360e:	e013      	b.n	8003638 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800361e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003630:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003634:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800363e:	2b01      	cmp	r3, #1
 8003640:	d118      	bne.n	8003674 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800364c:	f023 0304 	bic.w	r3, r3, #4
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003658:	4311      	orrs	r1, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800365e:	4311      	orrs	r1, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003664:	430a      	orrs	r2, r1
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0201 	orr.w	r2, r2, #1
 8003670:	611a      	str	r2, [r3, #16]
 8003672:	e007      	b.n	8003684 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10c      	bne.n	80036a6 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f023 010f 	bic.w	r1, r3, #15
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	1e5a      	subs	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
 80036a4:	e007      	b.n	80036b6 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 020f 	bic.w	r2, r2, #15
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80036c6:	e007      	b.n	80036d8 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	f043 0210 	orr.w	r2, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3724      	adds	r7, #36	; 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000008 	.word	0x20000008
 80036e8:	053e2d63 	.word	0x053e2d63
 80036ec:	50000100 	.word	0x50000100
 80036f0:	50000300 	.word	0x50000300
 80036f4:	fff04007 	.word	0xfff04007

080036f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003704:	4851      	ldr	r0, [pc, #324]	; (800384c <HAL_ADC_Start_DMA+0x154>)
 8003706:	f7ff fd28 	bl	800315a <LL_ADC_GetMultimode>
 800370a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fdb9 	bl	8003288 <LL_ADC_REG_IsConversionOngoing>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 808f 	bne.w	800383c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_ADC_Start_DMA+0x34>
 8003728:	2302      	movs	r3, #2
 800372a:	e08a      	b.n	8003842 <HAL_ADC_Start_DMA+0x14a>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b05      	cmp	r3, #5
 800373e:	d002      	beq.n	8003746 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b09      	cmp	r3, #9
 8003744:	d173      	bne.n	800382e <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fea0 	bl	800448c <ADC_Enable>
 800374c:	4603      	mov	r3, r0
 800374e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d166      	bne.n	8003824 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a38      	ldr	r2, [pc, #224]	; (8003850 <HAL_ADC_Start_DMA+0x158>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d002      	beq.n	800377a <HAL_ADC_Start_DMA+0x82>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	e001      	b.n	800377e <HAL_ADC_Start_DMA+0x86>
 800377a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	4293      	cmp	r3, r2
 8003784:	d002      	beq.n	800378c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d006      	beq.n	80037b2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a8:	f023 0206 	bic.w	r2, r3, #6
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	661a      	str	r2, [r3, #96]	; 0x60
 80037b0:	e002      	b.n	80037b8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	4a25      	ldr	r2, [pc, #148]	; (8003854 <HAL_ADC_Start_DMA+0x15c>)
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	4a24      	ldr	r2, [pc, #144]	; (8003858 <HAL_ADC_Start_DMA+0x160>)
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	4a23      	ldr	r2, [pc, #140]	; (800385c <HAL_ADC_Start_DMA+0x164>)
 80037ce:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	221c      	movs	r2, #28
 80037d6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0210 	orr.w	r2, r2, #16
 80037ee:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3340      	adds	r3, #64	; 0x40
 800380a:	4619      	mov	r1, r3
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f001 f978 	bl	8004b04 <HAL_DMA_Start_IT>
 8003814:	4603      	mov	r3, r0
 8003816:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fd1f 	bl	8003260 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003822:	e00d      	b.n	8003840 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800382c:	e008      	b.n	8003840 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800383a:	e001      	b.n	8003840 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800383c:	2302      	movs	r3, #2
 800383e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003840:	7dfb      	ldrb	r3, [r7, #23]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	50000300 	.word	0x50000300
 8003850:	50000100 	.word	0x50000100
 8003854:	08004541 	.word	0x08004541
 8003858:	08004619 	.word	0x08004619
 800385c:	08004635 	.word	0x08004635

08003860 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b0b6      	sub	sp, #216	; 0xd8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_ADC_ConfigChannel+0x22>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e3c7      	b.n	800404e <HAL_ADC_ConfigChannel+0x7b2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fcdc 	bl	8003288 <LL_ADC_REG_IsConversionOngoing>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f040 83ac 	bne.w	8004030 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	f7ff fb6e 	bl	8002fc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fcca 	bl	8003288 <LL_ADC_REG_IsConversionOngoing>
 80038f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fcd6 	bl	80032ae <LL_ADC_INJ_IsConversionOngoing>
 8003902:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003906:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 81d9 	bne.w	8003cc2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003914:	2b00      	cmp	r3, #0
 8003916:	f040 81d4 	bne.w	8003cc2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003922:	d10f      	bne.n	8003944 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2200      	movs	r2, #0
 800392e:	4619      	mov	r1, r3
 8003930:	f7ff fb75 	bl	800301e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fb1c 	bl	8002f7a <LL_ADC_SetSamplingTimeCommonConfig>
 8003942:	e00e      	b.n	8003962 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6819      	ldr	r1, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	461a      	mov	r2, r3
 8003952:	f7ff fb64 	bl	800301e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fb0c 	bl	8002f7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	08db      	lsrs	r3, r3, #3
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b04      	cmp	r3, #4
 8003982:	d022      	beq.n	80039ca <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6919      	ldr	r1, [r3, #16]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003994:	f7ff fa66 	bl	8002e64 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6919      	ldr	r1, [r3, #16]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	461a      	mov	r2, r3
 80039a6:	f7ff fab2 	bl	8002f0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6919      	ldr	r1, [r3, #16]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	7f1b      	ldrb	r3, [r3, #28]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d102      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x124>
 80039ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039be:	e000      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x126>
 80039c0:	2300      	movs	r3, #0
 80039c2:	461a      	mov	r2, r3
 80039c4:	f7ff fabe 	bl	8002f44 <LL_ADC_SetOffsetSaturation>
 80039c8:	e17b      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fa6b 	bl	8002eac <LL_ADC_GetOffsetChannel>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x15a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fa60 	bl	8002eac <LL_ADC_GetOffsetChannel>
 80039ec:	4603      	mov	r3, r0
 80039ee:	0e9b      	lsrs	r3, r3, #26
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	e01e      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x198>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fa55 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003a24:	2320      	movs	r3, #32
 8003a26:	e004      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a2c:	fab3 f383 	clz	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x1b0>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0e9b      	lsrs	r3, r3, #26
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	e018      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x1e2>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003a60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003a68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e004      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003a74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d106      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fa24 	bl	8002ed8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fa08 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x220>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff f9fd 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	0e9b      	lsrs	r3, r3, #26
 8003ab6:	f003 021f 	and.w	r2, r3, #31
 8003aba:	e01e      	b.n	8003afa <HAL_ADC_ConfigChannel+0x25e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff f9f2 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003ae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003aea:	2320      	movs	r3, #32
 8003aec:	e004      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x276>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	0e9b      	lsrs	r3, r3, #26
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	e018      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x2a8>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003b26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003b36:	2320      	movs	r3, #32
 8003b38:	e004      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d106      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff f9c1 	bl	8002ed8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff f9a5 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x2e6>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2102      	movs	r1, #2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff f99a 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	0e9b      	lsrs	r3, r3, #26
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	e01e      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x324>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2102      	movs	r1, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff f98f 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ba4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003ba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e004      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003bb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x33c>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0e9b      	lsrs	r3, r3, #26
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	e016      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x36a>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003bea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	e004      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c00:	fab3 f383 	clz	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d106      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2102      	movs	r1, #2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f960 	bl	8002ed8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2103      	movs	r1, #3
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff f944 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x3a8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2103      	movs	r1, #3
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff f939 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	0e9b      	lsrs	r3, r3, #26
 8003c3e:	f003 021f 	and.w	r2, r3, #31
 8003c42:	e017      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x3d8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2103      	movs	r1, #3
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff f92e 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003c50:	4603      	mov	r3, r0
 8003c52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c5e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003c66:	2320      	movs	r3, #32
 8003c68:	e003      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x3f0>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	0e9b      	lsrs	r3, r3, #26
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	e011      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x414>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e003      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d106      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2103      	movs	r1, #3
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff f90b 	bl	8002ed8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fab7 	bl	800323a <LL_ADC_IsEnabled>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f040 8140 	bne.w	8003f54 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6819      	ldr	r1, [r3, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f7ff f9c7 	bl	8003074 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4a8f      	ldr	r2, [pc, #572]	; (8003f28 <HAL_ADC_ConfigChannel+0x68c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	f040 8131 	bne.w	8003f54 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x47e>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0e9b      	lsrs	r3, r3, #26
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2b09      	cmp	r3, #9
 8003d10:	bf94      	ite	ls
 8003d12:	2301      	movls	r3, #1
 8003d14:	2300      	movhi	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e019      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x4b2>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d2a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003d32:	2320      	movs	r3, #32
 8003d34:	e003      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	bf94      	ite	ls
 8003d48:	2301      	movls	r3, #1
 8003d4a:	2300      	movhi	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d079      	beq.n	8003e46 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x4d2>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	0e9b      	lsrs	r3, r3, #26
 8003d64:	3301      	adds	r3, #1
 8003d66:	069b      	lsls	r3, r3, #26
 8003d68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d6c:	e015      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x4fe>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003d86:	2320      	movs	r3, #32
 8003d88:	e003      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	069b      	lsls	r3, r3, #26
 8003d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x51e>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	0e9b      	lsrs	r3, r3, #26
 8003dac:	3301      	adds	r3, #1
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	2101      	movs	r1, #1
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	e017      	b.n	8003dea <HAL_ADC_ConfigChannel+0x54e>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc2:	fa93 f3a3 	rbit	r3, r3
 8003dc6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	e003      	b.n	8003dde <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	ea42 0103 	orr.w	r1, r2, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x574>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	0e9b      	lsrs	r3, r3, #26
 8003e00:	3301      	adds	r3, #1
 8003e02:	f003 021f 	and.w	r2, r3, #31
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	051b      	lsls	r3, r3, #20
 8003e0e:	e018      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x5a6>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	fa93 f3a3 	rbit	r3, r3
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003e28:	2320      	movs	r3, #32
 8003e2a:	e003      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	f003 021f 	and.w	r2, r3, #31
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e42:	430b      	orrs	r3, r1
 8003e44:	e081      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x5c6>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0e9b      	lsrs	r3, r3, #26
 8003e58:	3301      	adds	r3, #1
 8003e5a:	069b      	lsls	r3, r3, #26
 8003e5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e60:	e015      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x5f2>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003e7a:	2320      	movs	r3, #32
 8003e7c:	e003      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	fab3 f383 	clz	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	3301      	adds	r3, #1
 8003e88:	069b      	lsls	r3, r3, #26
 8003e8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x612>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	0e9b      	lsrs	r3, r3, #26
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	e017      	b.n	8003ede <HAL_ADC_ConfigChannel+0x642>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	61fb      	str	r3, [r7, #28]
  return result;
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	e003      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2101      	movs	r1, #1
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	ea42 0103 	orr.w	r1, r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10d      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x66e>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	0e9b      	lsrs	r3, r3, #26
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	f003 021f 	and.w	r2, r3, #31
 8003efa:	4613      	mov	r3, r2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4413      	add	r3, r2
 8003f00:	3b1e      	subs	r3, #30
 8003f02:	051b      	lsls	r3, r3, #20
 8003f04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f08:	e01e      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x6ac>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fa93 f3a3 	rbit	r3, r3
 8003f16:	613b      	str	r3, [r7, #16]
  return result;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d104      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003f22:	2320      	movs	r3, #32
 8003f24:	e006      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x698>
 8003f26:	bf00      	nop
 8003f28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	3301      	adds	r3, #1
 8003f36:	f003 021f 	and.w	r2, r3, #31
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	3b1e      	subs	r3, #30
 8003f42:	051b      	lsls	r3, r3, #20
 8003f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	6892      	ldr	r2, [r2, #8]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f7ff f865 	bl	800301e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d070      	beq.n	8004042 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f60:	483e      	ldr	r0, [pc, #248]	; (800405c <HAL_ADC_ConfigChannel+0x7c0>)
 8003f62:	f7fe ff71 	bl	8002e48 <LL_ADC_GetCommonPathInternalCh>
 8003f66:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3c      	ldr	r2, [pc, #240]	; (8004060 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_ADC_ConfigChannel+0x6e2>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <HAL_ADC_ConfigChannel+0x7c8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d126      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d120      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f92:	d156      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	482f      	ldr	r0, [pc, #188]	; (800405c <HAL_ADC_ConfigChannel+0x7c0>)
 8003fa0:	f7fe ff3f 	bl	8002e22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003fa4:	4b30      	ldr	r3, [pc, #192]	; (8004068 <HAL_ADC_ConfigChannel+0x7cc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	099b      	lsrs	r3, r3, #6
 8003faa:	4a30      	ldr	r2, [pc, #192]	; (800406c <HAL_ADC_ConfigChannel+0x7d0>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	099a      	lsrs	r2, r3, #6
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fbc:	e002      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f9      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fca:	e03a      	b.n	8004042 <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a27      	ldr	r2, [pc, #156]	; (8004070 <HAL_ADC_ConfigChannel+0x7d4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d113      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x762>
 8003fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10d      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a23      	ldr	r2, [pc, #140]	; (8004074 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02a      	beq.n	8004042 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4819      	ldr	r0, [pc, #100]	; (800405c <HAL_ADC_ConfigChannel+0x7c0>)
 8003ff8:	f7fe ff13 	bl	8002e22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ffc:	e021      	b.n	8004042 <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_ADC_ConfigChannel+0x7dc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d11c      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800400c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d116      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <HAL_ADC_ConfigChannel+0x7d8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d011      	beq.n	8004042 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800401e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004022:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004026:	4619      	mov	r1, r3
 8004028:	480c      	ldr	r0, [pc, #48]	; (800405c <HAL_ADC_ConfigChannel+0x7c0>)
 800402a:	f7fe fefa 	bl	8002e22 <LL_ADC_SetCommonPathInternalCh>
 800402e:	e008      	b.n	8004042 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800404a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800404e:	4618      	mov	r0, r3
 8004050:	37d8      	adds	r7, #216	; 0xd8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	80080000 	.word	0x80080000
 800405c:	50000300 	.word	0x50000300
 8004060:	c3210000 	.word	0xc3210000
 8004064:	90c00010 	.word	0x90c00010
 8004068:	20000008 	.word	0x20000008
 800406c:	053e2d63 	.word	0x053e2d63
 8004070:	c7520000 	.word	0xc7520000
 8004074:	50000100 	.word	0x50000100
 8004078:	cb840000 	.word	0xcb840000

0800407c <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08e      	sub	sp, #56	; 0x38
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004094:	d003      	beq.n	800409e <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800409a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_AnalogWDGConfig+0x30>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e1e9      	b.n	8004480 <HAL_ADC_AnalogWDGConfig+0x404>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff f8e5 	bl	8003288 <LL_ADC_REG_IsConversionOngoing>
 80040be:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff f8f2 	bl	80032ae <LL_ADC_INJ_IsConversionOngoing>
 80040ca:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f040 8174 	bne.w	80043bc <HAL_ADC_AnalogWDGConfig+0x340>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 8170 	bne.w	80043bc <HAL_ADC_AnalogWDGConfig+0x340>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4aa4      	ldr	r2, [pc, #656]	; (8004374 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	f040 808d 	bne.w	8004202 <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80040f0:	d034      	beq.n	800415c <HAL_ADC_AnalogWDGConfig+0xe0>
 80040f2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80040f6:	d856      	bhi.n	80041a6 <HAL_ADC_AnalogWDGConfig+0x12a>
 80040f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040fc:	d04b      	beq.n	8004196 <HAL_ADC_AnalogWDGConfig+0x11a>
 80040fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004102:	d850      	bhi.n	80041a6 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004104:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004108:	d01b      	beq.n	8004142 <HAL_ADC_AnalogWDGConfig+0xc6>
 800410a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800410e:	d84a      	bhi.n	80041a6 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004114:	d037      	beq.n	8004186 <HAL_ADC_AnalogWDGConfig+0x10a>
 8004116:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800411a:	d844      	bhi.n	80041a6 <HAL_ADC_AnalogWDGConfig+0x12a>
 800411c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004120:	d029      	beq.n	8004176 <HAL_ADC_AnalogWDGConfig+0xfa>
 8004122:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004126:	d13e      	bne.n	80041a6 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004134:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8004138:	461a      	mov	r2, r3
 800413a:	498e      	ldr	r1, [pc, #568]	; (8004374 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 800413c:	f7fe ffbe 	bl	80030bc <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8004140:	e039      	b.n	80041b6 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800414e:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8004152:	461a      	mov	r2, r3
 8004154:	4987      	ldr	r1, [pc, #540]	; (8004374 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 8004156:	f7fe ffb1 	bl	80030bc <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 800415a:	e02c      	b.n	80041b6 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004168:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 800416c:	461a      	mov	r2, r3
 800416e:	4981      	ldr	r1, [pc, #516]	; (8004374 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 8004170:	f7fe ffa4 	bl	80030bc <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8004174:	e01f      	b.n	80041b6 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7f      	ldr	r2, [pc, #508]	; (8004378 <HAL_ADC_AnalogWDGConfig+0x2fc>)
 800417c:	497d      	ldr	r1, [pc, #500]	; (8004374 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe ff9c 	bl	80030bc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004184:	e017      	b.n	80041b6 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7c      	ldr	r2, [pc, #496]	; (800437c <HAL_ADC_AnalogWDGConfig+0x300>)
 800418c:	4979      	ldr	r1, [pc, #484]	; (8004374 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe ff94 	bl	80030bc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004194:	e00f      	b.n	80041b6 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a79      	ldr	r2, [pc, #484]	; (8004380 <HAL_ADC_AnalogWDGConfig+0x304>)
 800419c:	4975      	ldr	r1, [pc, #468]	; (8004374 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe ff8c 	bl	80030bc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80041a4:	e007      	b.n	80041b6 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	4971      	ldr	r1, [pc, #452]	; (8004374 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe ff84 	bl	80030bc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80041b4:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff f879 	bl	80032d4 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	7b1b      	ldrb	r3, [r3, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d105      	bne.n	80041f6 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff f899 	bl	8003326 <LL_ADC_EnableIT_AWD1>
 80041f4:	e0e2      	b.n	80043bc <HAL_ADC_AnalogWDGConfig+0x340>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff f8c3 	bl	8003386 <LL_ADC_DisableIT_AWD1>
 8004200:	e0dc      	b.n	80043bc <HAL_ADC_AnalogWDGConfig+0x340>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800420a:	d01b      	beq.n	8004244 <HAL_ADC_AnalogWDGConfig+0x1c8>
 800420c:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004210:	f200 8086 	bhi.w	8004320 <HAL_ADC_AnalogWDGConfig+0x2a4>
 8004214:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004218:	d079      	beq.n	800430e <HAL_ADC_AnalogWDGConfig+0x292>
 800421a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800421e:	d87f      	bhi.n	8004320 <HAL_ADC_AnalogWDGConfig+0x2a4>
 8004220:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004224:	d00e      	beq.n	8004244 <HAL_ADC_AnalogWDGConfig+0x1c8>
 8004226:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800422a:	d879      	bhi.n	8004320 <HAL_ADC_AnalogWDGConfig+0x2a4>
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004230:	d06d      	beq.n	800430e <HAL_ADC_AnalogWDGConfig+0x292>
 8004232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004236:	d873      	bhi.n	8004320 <HAL_ADC_AnalogWDGConfig+0x2a4>
 8004238:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800423c:	d067      	beq.n	800430e <HAL_ADC_AnalogWDGConfig+0x292>
 800423e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004242:	d16d      	bne.n	8004320 <HAL_ADC_AnalogWDGConfig+0x2a4>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a4e      	ldr	r2, [pc, #312]	; (8004384 <HAL_ADC_AnalogWDGConfig+0x308>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d12f      	bne.n	80042ae <HAL_ADC_AnalogWDGConfig+0x232>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <HAL_ADC_AnalogWDGConfig+0x1f0>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	0e9b      	lsrs	r3, r3, #26
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2201      	movs	r2, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	e016      	b.n	800429a <HAL_ADC_AnalogWDGConfig+0x21e>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	61bb      	str	r3, [r7, #24]
  return result;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_ADC_AnalogWDGConfig+0x20c>
    return 32U;
 8004284:	2320      	movs	r3, #32
 8004286:	e003      	b.n	8004290 <HAL_ADC_AnalogWDGConfig+0x214>
  return __builtin_clz(value);
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	fab3 f383 	clz	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	2201      	movs	r2, #1
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	430b      	orrs	r3, r1
 80042a8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80042ac:	e041      	b.n	8004332 <HAL_ADC_AnalogWDGConfig+0x2b6>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d108      	bne.n	80042cc <HAL_ADC_AnalogWDGConfig+0x250>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0e9b      	lsrs	r3, r3, #26
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2201      	movs	r2, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	e016      	b.n	80042fa <HAL_ADC_AnalogWDGConfig+0x27e>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	60fb      	str	r3, [r7, #12]
  return result;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_AnalogWDGConfig+0x26c>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e003      	b.n	80042f0 <HAL_ADC_AnalogWDGConfig+0x274>
  return __builtin_clz(value);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2201      	movs	r2, #1
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	430b      	orrs	r3, r1
 8004308:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 800430c:	e011      	b.n	8004332 <HAL_ADC_AnalogWDGConfig+0x2b6>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <HAL_ADC_AnalogWDGConfig+0x304>)
 8004318:	4619      	mov	r1, r3
 800431a:	f7fe fecf 	bl	80030bc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800431e:	e008      	b.n	8004332 <HAL_ADC_AnalogWDGConfig+0x2b6>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	4619      	mov	r1, r3
 800432c:	f7fe fec6 	bl	80030bc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004330:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a13      	ldr	r2, [pc, #76]	; (8004384 <HAL_ADC_AnalogWDGConfig+0x308>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d125      	bne.n	8004388 <HAL_ADC_AnalogWDGConfig+0x30c>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe ffce 	bl	80032ee <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	7b1b      	ldrb	r3, [r3, #12]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d105      	bne.n	8004366 <HAL_ADC_AnalogWDGConfig+0x2ea>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fff1 	bl	8003346 <LL_ADC_EnableIT_AWD2>
 8004364:	e02a      	b.n	80043bc <HAL_ADC_AnalogWDGConfig+0x340>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff f81b 	bl	80033a6 <LL_ADC_DisableIT_AWD2>
 8004370:	e024      	b.n	80043bc <HAL_ADC_AnalogWDGConfig+0x340>
 8004372:	bf00      	nop
 8004374:	7dc00000 	.word	0x7dc00000
 8004378:	0087ffff 	.word	0x0087ffff
 800437c:	0107ffff 	.word	0x0107ffff
 8004380:	0187ffff 	.word	0x0187ffff
 8004384:	0017ffff 	.word	0x0017ffff
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe ffb6 	bl	800330a <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	7b1b      	ldrb	r3, [r3, #12]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d105      	bne.n	80043b2 <HAL_ADC_AnalogWDGConfig+0x336>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe ffdb 	bl	8003366 <LL_ADC_EnableIT_AWD3>
 80043b0:	e004      	b.n	80043bc <HAL_ADC_AnalogWDGConfig+0x340>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff f805 	bl	80033c6 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a31      	ldr	r2, [pc, #196]	; (8004488 <HAL_ADC_AnalogWDGConfig+0x40c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d118      	bne.n	80043f8 <HAL_ADC_AnalogWDGConfig+0x37c>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	08db      	lsrs	r3, r3, #3
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	08db      	lsrs	r3, r3, #3
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	633b      	str	r3, [r7, #48]	; 0x30
 80043f6:	e035      	b.n	8004464 <HAL_ADC_AnalogWDGConfig+0x3e8>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0318 	and.w	r3, r3, #24
 8004402:	2b18      	cmp	r3, #24
 8004404:	d00f      	beq.n	8004426 <HAL_ADC_AnalogWDGConfig+0x3aa>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	f1c3 0302 	rsb	r3, r3, #2
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	f003 031e 	and.w	r3, r3, #30
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
 8004424:	e002      	b.n	800442c <HAL_ADC_AnalogWDGConfig+0x3b0>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0318 	and.w	r3, r3, #24
 8004438:	2b18      	cmp	r3, #24
 800443a:	d00f      	beq.n	800445c <HAL_ADC_AnalogWDGConfig+0x3e0>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	08db      	lsrs	r3, r3, #3
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	f1c3 0302 	rsb	r3, r3, #2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	f003 031e 	and.w	r3, r3, #30
 8004456:	fa22 f303 	lsr.w	r3, r2, r3
 800445a:	e002      	b.n	8004462 <HAL_ADC_AnalogWDGConfig+0x3e6>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6819      	ldr	r1, [r3, #0]
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004470:	f7fe fe51 	bl	8003116 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800447c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004480:	4618      	mov	r0, r3
 8004482:	3738      	adds	r7, #56	; 0x38
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	7dc00000 	.word	0x7dc00000

0800448c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe fece 	bl	800323a <LL_ADC_IsEnabled>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d146      	bne.n	8004532 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <ADC_Enable+0xb0>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	f043 0210 	orr.w	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e032      	b.n	8004534 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fe9d 	bl	8003212 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044d8:	f7fe fc62 	bl	8002da0 <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044de:	e021      	b.n	8004524 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe fea8 	bl	800323a <LL_ADC_IsEnabled>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe fe8c 	bl	8003212 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044fa:	f7fe fc51 	bl	8002da0 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d90d      	bls.n	8004524 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450c:	f043 0210 	orr.w	r2, r3, #16
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004518:	f043 0201 	orr.w	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e007      	b.n	8004534 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d1d6      	bne.n	80044e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	8000003f 	.word	0x8000003f

08004540 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004552:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004556:	2b00      	cmp	r3, #0
 8004558:	d14b      	bne.n	80045f2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d021      	beq.n	80045b8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe fd11 	bl	8002fa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d032      	beq.n	80045ea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d12b      	bne.n	80045ea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11f      	bne.n	80045ea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80045b6:	e018      	b.n	80045ea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d111      	bne.n	80045ea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d105      	bne.n	80045ea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e2:	f043 0201 	orr.w	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff f938 	bl	8003860 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045f0:	e00e      	b.n	8004610 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff f942 	bl	8003888 <HAL_ADC_ErrorCallback>
}
 8004604:	e004      	b.n	8004610 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff f924 	bl	8003874 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004652:	f043 0204 	orr.w	r2, r3, #4
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff f914 	bl	8003888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <LL_ADC_IsEnabled>:
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <LL_ADC_IsEnabled+0x18>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <LL_ADC_IsEnabled+0x1a>
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <LL_ADC_REG_IsConversionOngoing>:
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d101      	bne.n	80046a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b0a1      	sub	sp, #132	; 0x84
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e087      	b.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e2:	d102      	bne.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80046e4:	4b41      	ldr	r3, [pc, #260]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	e001      	b.n	80046ee <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e06a      	b.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff ffbd 	bl	800468e <LL_ADC_REG_IsConversionOngoing>
 8004714:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff ffb7 	bl	800468e <LL_ADC_REG_IsConversionOngoing>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d14c      	bne.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004728:	2b00      	cmp	r3, #0
 800472a:	d149      	bne.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800472c:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800472e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d028      	beq.n	800478a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800474a:	035b      	lsls	r3, r3, #13
 800474c:	430b      	orrs	r3, r1
 800474e:	431a      	orrs	r2, r3
 8004750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004752:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004754:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004758:	f7ff ff86 	bl	8004668 <LL_ADC_IsEnabled>
 800475c:	4604      	mov	r4, r0
 800475e:	4823      	ldr	r0, [pc, #140]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004760:	f7ff ff82 	bl	8004668 <LL_ADC_IsEnabled>
 8004764:	4603      	mov	r3, r0
 8004766:	4323      	orrs	r3, r4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d133      	bne.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800476c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004774:	f023 030f 	bic.w	r3, r3, #15
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	6811      	ldr	r1, [r2, #0]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	6892      	ldr	r2, [r2, #8]
 8004780:	430a      	orrs	r2, r1
 8004782:	431a      	orrs	r2, r3
 8004784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004786:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004788:	e024      	b.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800478a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004794:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004796:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800479a:	f7ff ff65 	bl	8004668 <LL_ADC_IsEnabled>
 800479e:	4604      	mov	r4, r0
 80047a0:	4812      	ldr	r0, [pc, #72]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80047a2:	f7ff ff61 	bl	8004668 <LL_ADC_IsEnabled>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4323      	orrs	r3, r4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d112      	bne.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80047b6:	f023 030f 	bic.w	r3, r3, #15
 80047ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80047bc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047be:	e009      	b.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80047d2:	e000      	b.n	80047d6 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80047de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3784      	adds	r7, #132	; 0x84
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd90      	pop	{r4, r7, pc}
 80047ea:	bf00      	nop
 80047ec:	50000100 	.word	0x50000100
 80047f0:	50000300 	.word	0x50000300

080047f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <__NVIC_SetPriorityGrouping+0x44>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004810:	4013      	ands	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800481c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <__NVIC_SetPriorityGrouping+0x44>)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	60d3      	str	r3, [r2, #12]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <__NVIC_GetPriorityGrouping+0x18>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	f003 0307 	and.w	r3, r3, #7
}
 800484a:	4618      	mov	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	2b00      	cmp	r3, #0
 8004868:	db0b      	blt.n	8004882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	f003 021f 	and.w	r2, r3, #31
 8004870:	4907      	ldr	r1, [pc, #28]	; (8004890 <__NVIC_EnableIRQ+0x38>)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2001      	movs	r0, #1
 800487a:	fa00 f202 	lsl.w	r2, r0, r2
 800487e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e100 	.word	0xe000e100

08004894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	6039      	str	r1, [r7, #0]
 800489e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	db0a      	blt.n	80048be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	490c      	ldr	r1, [pc, #48]	; (80048e0 <__NVIC_SetPriority+0x4c>)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	0112      	lsls	r2, r2, #4
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	440b      	add	r3, r1
 80048b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048bc:	e00a      	b.n	80048d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	4908      	ldr	r1, [pc, #32]	; (80048e4 <__NVIC_SetPriority+0x50>)
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	3b04      	subs	r3, #4
 80048cc:	0112      	lsls	r2, r2, #4
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	440b      	add	r3, r1
 80048d2:	761a      	strb	r2, [r3, #24]
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	e000e100 	.word	0xe000e100
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	; 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f1c3 0307 	rsb	r3, r3, #7
 8004902:	2b04      	cmp	r3, #4
 8004904:	bf28      	it	cs
 8004906:	2304      	movcs	r3, #4
 8004908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3304      	adds	r3, #4
 800490e:	2b06      	cmp	r3, #6
 8004910:	d902      	bls.n	8004918 <NVIC_EncodePriority+0x30>
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3b03      	subs	r3, #3
 8004916:	e000      	b.n	800491a <NVIC_EncodePriority+0x32>
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800491c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43da      	mvns	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	401a      	ands	r2, r3
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	43d9      	mvns	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004940:	4313      	orrs	r3, r2
         );
}
 8004942:	4618      	mov	r0, r3
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ff4c 	bl	80047f4 <__NVIC_SetPriorityGrouping>
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004972:	f7ff ff63 	bl	800483c <__NVIC_GetPriorityGrouping>
 8004976:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	6978      	ldr	r0, [r7, #20]
 800497e:	f7ff ffb3 	bl	80048e8 <NVIC_EncodePriority>
 8004982:	4602      	mov	r2, r0
 8004984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff ff82 	bl	8004894 <__NVIC_SetPriority>
}
 8004990:	bf00      	nop
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff56 	bl	8004858 <__NVIC_EnableIRQ>
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e08d      	b.n	8004ae2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	4b47      	ldr	r3, [pc, #284]	; (8004aec <HAL_DMA_Init+0x138>)
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d80f      	bhi.n	80049f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	4b45      	ldr	r3, [pc, #276]	; (8004af0 <HAL_DMA_Init+0x13c>)
 80049da:	4413      	add	r3, r2
 80049dc:	4a45      	ldr	r2, [pc, #276]	; (8004af4 <HAL_DMA_Init+0x140>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	009a      	lsls	r2, r3, #2
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a42      	ldr	r2, [pc, #264]	; (8004af8 <HAL_DMA_Init+0x144>)
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
 80049f0:	e00e      	b.n	8004a10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	4b40      	ldr	r3, [pc, #256]	; (8004afc <HAL_DMA_Init+0x148>)
 80049fa:	4413      	add	r3, r2
 80049fc:	4a3d      	ldr	r2, [pc, #244]	; (8004af4 <HAL_DMA_Init+0x140>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	091b      	lsrs	r3, r3, #4
 8004a04:	009a      	lsls	r2, r3, #2
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a3c      	ldr	r2, [pc, #240]	; (8004b00 <HAL_DMA_Init+0x14c>)
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f9b6 	bl	8004dd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a70:	d102      	bne.n	8004a78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d010      	beq.n	8004ab8 <HAL_DMA_Init+0x104>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d80c      	bhi.n	8004ab8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f9d6 	bl	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	e008      	b.n	8004aca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40020407 	.word	0x40020407
 8004af0:	bffdfff8 	.word	0xbffdfff8
 8004af4:	cccccccd 	.word	0xcccccccd
 8004af8:	40020000 	.word	0x40020000
 8004afc:	bffdfbf8 	.word	0xbffdfbf8
 8004b00:	40020400 	.word	0x40020400

08004b04 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_DMA_Start_IT+0x20>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e066      	b.n	8004bf2 <HAL_DMA_Start_IT+0xee>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d155      	bne.n	8004be4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f8fb 	bl	8004d58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 020e 	orr.w	r2, r2, #14
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	e00f      	b.n	8004b9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0204 	bic.w	r2, r2, #4
 8004b8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 020a 	orr.w	r2, r2, #10
 8004b9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e005      	b.n	8004bf0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
 8004bee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d026      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x7a>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d021      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d107      	bne.n	8004c4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0204 	bic.w	r2, r2, #4
 8004c4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f003 021f 	and.w	r2, r3, #31
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d071      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c72:	e06c      	b.n	8004d4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d02e      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d029      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 020a 	bic.w	r2, r2, #10
 8004cae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	f003 021f 	and.w	r2, r3, #31
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d038      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004ce4:	e033      	b.n	8004d4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2208      	movs	r2, #8
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d02a      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d025      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 020e 	bic.w	r2, r2, #14
 8004d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d18:	f003 021f 	and.w	r2, r3, #31
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f202 	lsl.w	r2, r1, r2
 8004d26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d004      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
}
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d004      	beq.n	8004d82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d80:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f003 021f 	and.w	r2, r3, #31
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	2101      	movs	r1, #1
 8004d90:	fa01 f202 	lsl.w	r2, r1, r2
 8004d94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d108      	bne.n	8004db8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004db6:	e007      	b.n	8004dc8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]
}
 8004dc8:	bf00      	nop
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d802      	bhi.n	8004dee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004de8:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e001      	b.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004dee:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004df0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	3b08      	subs	r3, #8
 8004dfe:	4a12      	ldr	r2, [pc, #72]	; (8004e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	009a      	lsls	r2, r3, #2
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4413      	add	r3, r2
 8004e14:	461a      	mov	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a0b      	ldr	r2, [pc, #44]	; (8004e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2201      	movs	r2, #1
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40020407 	.word	0x40020407
 8004e40:	40020800 	.word	0x40020800
 8004e44:	40020820 	.word	0x40020820
 8004e48:	cccccccd 	.word	0xcccccccd
 8004e4c:	40020880 	.word	0x40020880

08004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e72:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	1000823f 	.word	0x1000823f
 8004e94:	40020940 	.word	0x40020940

08004e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ea6:	e15a      	b.n	800515e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	2101      	movs	r1, #1
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 814c 	beq.w	8005158 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d00b      	beq.n	8004ee0 <HAL_GPIO_Init+0x48>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d007      	beq.n	8004ee0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ed4:	2b11      	cmp	r3, #17
 8004ed6:	d003      	beq.n	8004ee0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b12      	cmp	r3, #18
 8004ede:	d130      	bne.n	8004f42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	2203      	movs	r2, #3
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f16:	2201      	movs	r2, #1
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 0201 	and.w	r2, r3, #1
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_Init+0xea>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b12      	cmp	r3, #18
 8004f80:	d123      	bne.n	8004fca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	08da      	lsrs	r2, r3, #3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3208      	adds	r2, #8
 8004f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	220f      	movs	r2, #15
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	08da      	lsrs	r2, r3, #3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3208      	adds	r2, #8
 8004fc4:	6939      	ldr	r1, [r7, #16]
 8004fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f003 0203 	and.w	r2, r3, #3
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80a6 	beq.w	8005158 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800500c:	4b5b      	ldr	r3, [pc, #364]	; (800517c <HAL_GPIO_Init+0x2e4>)
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	4a5a      	ldr	r2, [pc, #360]	; (800517c <HAL_GPIO_Init+0x2e4>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6613      	str	r3, [r2, #96]	; 0x60
 8005018:	4b58      	ldr	r3, [pc, #352]	; (800517c <HAL_GPIO_Init+0x2e4>)
 800501a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005024:	4a56      	ldr	r2, [pc, #344]	; (8005180 <HAL_GPIO_Init+0x2e8>)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	089b      	lsrs	r3, r3, #2
 800502a:	3302      	adds	r3, #2
 800502c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	220f      	movs	r2, #15
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4013      	ands	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800504e:	d01f      	beq.n	8005090 <HAL_GPIO_Init+0x1f8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a4c      	ldr	r2, [pc, #304]	; (8005184 <HAL_GPIO_Init+0x2ec>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d019      	beq.n	800508c <HAL_GPIO_Init+0x1f4>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a4b      	ldr	r2, [pc, #300]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <HAL_GPIO_Init+0x1f0>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a4a      	ldr	r2, [pc, #296]	; (800518c <HAL_GPIO_Init+0x2f4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00d      	beq.n	8005084 <HAL_GPIO_Init+0x1ec>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a49      	ldr	r2, [pc, #292]	; (8005190 <HAL_GPIO_Init+0x2f8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <HAL_GPIO_Init+0x1e8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a48      	ldr	r2, [pc, #288]	; (8005194 <HAL_GPIO_Init+0x2fc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d101      	bne.n	800507c <HAL_GPIO_Init+0x1e4>
 8005078:	2305      	movs	r3, #5
 800507a:	e00a      	b.n	8005092 <HAL_GPIO_Init+0x1fa>
 800507c:	2306      	movs	r3, #6
 800507e:	e008      	b.n	8005092 <HAL_GPIO_Init+0x1fa>
 8005080:	2304      	movs	r3, #4
 8005082:	e006      	b.n	8005092 <HAL_GPIO_Init+0x1fa>
 8005084:	2303      	movs	r3, #3
 8005086:	e004      	b.n	8005092 <HAL_GPIO_Init+0x1fa>
 8005088:	2302      	movs	r3, #2
 800508a:	e002      	b.n	8005092 <HAL_GPIO_Init+0x1fa>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <HAL_GPIO_Init+0x1fa>
 8005090:	2300      	movs	r3, #0
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	f002 0203 	and.w	r2, r2, #3
 8005098:	0092      	lsls	r2, r2, #2
 800509a:	4093      	lsls	r3, r2
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050a2:	4937      	ldr	r1, [pc, #220]	; (8005180 <HAL_GPIO_Init+0x2e8>)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	3302      	adds	r3, #2
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80050b0:	4b39      	ldr	r3, [pc, #228]	; (8005198 <HAL_GPIO_Init+0x300>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	43db      	mvns	r3, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050d4:	4a30      	ldr	r2, [pc, #192]	; (8005198 <HAL_GPIO_Init+0x300>)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80050da:	4b2f      	ldr	r3, [pc, #188]	; (8005198 <HAL_GPIO_Init+0x300>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4013      	ands	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050fe:	4a26      	ldr	r2, [pc, #152]	; (8005198 <HAL_GPIO_Init+0x300>)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005104:	4b24      	ldr	r3, [pc, #144]	; (8005198 <HAL_GPIO_Init+0x300>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	43db      	mvns	r3, r3
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4013      	ands	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005128:	4a1b      	ldr	r2, [pc, #108]	; (8005198 <HAL_GPIO_Init+0x300>)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800512e:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <HAL_GPIO_Init+0x300>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	43db      	mvns	r3, r3
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4013      	ands	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005152:	4a11      	ldr	r2, [pc, #68]	; (8005198 <HAL_GPIO_Init+0x300>)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	3301      	adds	r3, #1
 800515c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	f47f ae9d 	bne.w	8004ea8 <HAL_GPIO_Init+0x10>
  }
}
 800516e:	bf00      	nop
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40021000 	.word	0x40021000
 8005180:	40010000 	.word	0x40010000
 8005184:	48000400 	.word	0x48000400
 8005188:	48000800 	.word	0x48000800
 800518c:	48000c00 	.word	0x48000c00
 8005190:	48001000 	.word	0x48001000
 8005194:	48001400 	.word	0x48001400
 8005198:	40010400 	.word	0x40010400

0800519c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	887b      	ldrh	r3, [r7, #2]
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
 80051b8:	e001      	b.n	80051be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	807b      	strh	r3, [r7, #2]
 80051d8:	4613      	mov	r3, r2
 80051da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051dc:	787b      	ldrb	r3, [r7, #1]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051e2:	887a      	ldrh	r2, [r7, #2]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051e8:	e002      	b.n	80051f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051ea:	887a      	ldrh	r2, [r7, #2]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005206:	4b08      	ldr	r3, [pc, #32]	; (8005228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005208:	695a      	ldr	r2, [r3, #20]
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	4013      	ands	r3, r2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d006      	beq.n	8005220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005212:	4a05      	ldr	r2, [pc, #20]	; (8005228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	4618      	mov	r0, r3
 800521c:	f7fc fe50 	bl	8001ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40010400 	.word	0x40010400

0800522c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e0bb      	b.n	80053ba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b05      	cmp	r3, #5
 800524c:	d101      	bne.n	8005252 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0b3      	b.n	80053ba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d101      	bne.n	8005262 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e0ab      	b.n	80053ba <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005262:	4b58      	ldr	r3, [pc, #352]	; (80053c4 <HAL_OPAMP_Init+0x198>)
 8005264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005266:	4a57      	ldr	r2, [pc, #348]	; (80053c4 <HAL_OPAMP_Init+0x198>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	6613      	str	r3, [r2, #96]	; 0x60
 800526e:	4b55      	ldr	r3, [pc, #340]	; (80053c4 <HAL_OPAMP_Init+0x198>)
 8005270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d103      	bne.n	800528e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fc ffe0 	bl	8002254 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d003      	beq.n	80052a4 <HAL_OPAMP_Init+0x78>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b60      	cmp	r3, #96	; 0x60
 80052a2:	d133      	bne.n	800530c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 0110 	bic.w	r1, r3, #16
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b41      	ldr	r3, [pc, #260]	; (80053c8 <HAL_OPAMP_Init+0x19c>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6851      	ldr	r1, [r2, #4]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6892      	ldr	r2, [r2, #8]
 80052cc:	4311      	orrs	r1, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6912      	ldr	r2, [r2, #16]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	7d09      	ldrb	r1, [r1, #20]
 80052d8:	2901      	cmp	r1, #1
 80052da:	d102      	bne.n	80052e2 <HAL_OPAMP_Init+0xb6>
 80052dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052e0:	e000      	b.n	80052e4 <HAL_OPAMP_Init+0xb8>
 80052e2:	2100      	movs	r1, #0
 80052e4:	4311      	orrs	r1, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052ea:	4311      	orrs	r1, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80052f0:	4311      	orrs	r1, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052f6:	04d2      	lsls	r2, r2, #19
 80052f8:	4311      	orrs	r1, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052fe:	0612      	lsls	r2, r2, #24
 8005300:	4311      	orrs	r1, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	430b      	orrs	r3, r1
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	e035      	b.n	8005378 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f023 0110 	bic.w	r1, r3, #16
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <HAL_OPAMP_Init+0x19c>)
 800532a:	4013      	ands	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6851      	ldr	r1, [r2, #4]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6892      	ldr	r2, [r2, #8]
 8005334:	4311      	orrs	r1, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	68d2      	ldr	r2, [r2, #12]
 800533a:	4311      	orrs	r1, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6912      	ldr	r2, [r2, #16]
 8005340:	430a      	orrs	r2, r1
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	7d09      	ldrb	r1, [r1, #20]
 8005346:	2901      	cmp	r1, #1
 8005348:	d102      	bne.n	8005350 <HAL_OPAMP_Init+0x124>
 800534a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800534e:	e000      	b.n	8005352 <HAL_OPAMP_Init+0x126>
 8005350:	2100      	movs	r1, #0
 8005352:	4311      	orrs	r1, r2
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005358:	4311      	orrs	r1, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800535e:	4311      	orrs	r1, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005364:	04d2      	lsls	r2, r2, #19
 8005366:	4311      	orrs	r1, r2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800536c:	0612      	lsls	r2, r2, #24
 800536e:	4311      	orrs	r1, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	430b      	orrs	r3, r1
 8005376:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	db10      	blt.n	80053a4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699a      	ldr	r2, [r3, #24]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40021000 	.word	0x40021000
 80053c8:	e0003e11 	.word	0xe0003e11

080053cc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d102      	bne.n	80053e4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
 80053e2:	e01d      	b.n	8005420 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b05      	cmp	r3, #5
 80053ee:	d102      	bne.n	80053f6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
 80053f4:	e014      	b.n	8005420 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d10c      	bne.n	800541c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800541a:	e001      	b.n	8005420 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b086      	sub	sp, #24
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	75fb      	strb	r3, [r7, #23]
  uint32_t trimmingvaluep;
  uint32_t delta;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	75fb      	strb	r3, [r7, #23]
 8005444:	e113      	b.n	800566e <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b05      	cmp	r3, #5
 8005450:	d102      	bne.n	8005458 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	75fb      	strb	r3, [r7, #23]
 8005456:	e10a      	b.n	800566e <HAL_OPAMP_SelfCalibrate+0x240>
  }
  else
  {

    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if (hopamp->State ==  HAL_OPAMP_STATE_READY)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b01      	cmp	r3, #1
 8005462:	f040 8102 	bne.w	800566a <HAL_OPAMP_SelfCalibrate+0x23c>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0202 	orr.w	r2, r2, #2
 8005474:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0210 	orr.w	r2, r2, #16
 8005484:	601a      	str	r2, [r3, #0]

      /* Enable calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005494:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      /* Select 90% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80054a4:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16UL;
 80054b6:	2310      	movs	r3, #16
 80054b8:	613b      	str	r3, [r7, #16]
      delta = 8UL;
 80054ba:	2308      	movs	r3, #8
 80054bc:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 80054be:	e020      	b.n	8005502 <HAL_OPAMP_SelfCalibrate+0xd4>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	061a      	lsls	r2, r3, #24
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 80054d6:	2002      	movs	r0, #2
 80054d8:	f7fd fc6e 	bl	8002db8 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <HAL_OPAMP_SelfCalibrate+0xc6>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4413      	add	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	e003      	b.n	80054fc <HAL_OPAMP_SelfCalibrate+0xce>
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	613b      	str	r3, [r7, #16]
        }

        delta >>= 1;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1db      	bne.n	80054c0 <HAL_OPAMP_SelfCalibrate+0x92>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	061a      	lsls	r2, r3, #24
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 800551e:	2002      	movs	r0, #2
 8005520:	f7fd fc4a 	bl	8002db8 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00d      	beq.n	800554e <HAL_OPAMP_SelfCalibrate+0x120>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3301      	adds	r3, #1
 8005536:	613b      	str	r3, [r7, #16]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	061a      	lsls	r2, r3, #24
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      /* Select 10% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005560:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16UL;
 8005562:	2310      	movs	r3, #16
 8005564:	60fb      	str	r3, [r7, #12]
      delta = 8UL;
 8005566:	2308      	movs	r3, #8
 8005568:	60bb      	str	r3, [r7, #8]

      while (delta != 0UL)
 800556a:	e020      	b.n	80055ae <HAL_OPAMP_SelfCalibrate+0x180>
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	04da      	lsls	r2, r3, #19
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2);
 8005582:	2002      	movs	r0, #2
 8005584:	f7fd fc18 	bl	8002db8 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <HAL_OPAMP_SelfCalibrate+0x172>
        {
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4413      	add	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e003      	b.n	80055a8 <HAL_OPAMP_SelfCalibrate+0x17a>
        }
        else
        {
          trimmingvaluep -= delta;
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	60fb      	str	r3, [r7, #12]
        }

        delta >>= 1;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	60bb      	str	r3, [r7, #8]
      while (delta != 0UL)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1db      	bne.n	800556c <HAL_OPAMP_SelfCalibrate+0x13e>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	04da      	lsls	r2, r3, #19
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 80055ca:	2002      	movs	r0, #2
 80055cc:	f7fd fbf4 	bl	8002db8 <HAL_Delay>

      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00d      	beq.n	80055fa <HAL_OPAMP_SelfCalibrate+0x1cc>
      {
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	04da      	lsls	r2, r3, #19
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	601a      	str	r2, [r3, #0]
      }

      /* Disable calibration */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005608:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0201 	bic.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]

      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0202 	bic.w	r2, r2, #2
 8005628:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user timing) results in init structure. */

      /* Write calibration result N */
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	631a      	str	r2, [r3, #48]	; 0x30

      /* Select user timing mode */
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2210      	movs	r2, #16
 800563a:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep << OPAMP_INPUT_NONINVERTING);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	04da      	lsls	r2, r3, #19
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen << OPAMP_INPUT_INVERTING);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	061a      	lsls	r2, r3, #24
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e001      	b.n	800566e <HAL_OPAMP_SelfCalibrate+0x240>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d141      	bne.n	800570a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005686:	4b4b      	ldr	r3, [pc, #300]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005692:	d131      	bne.n	80056f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005694:	4b47      	ldr	r3, [pc, #284]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800569a:	4a46      	ldr	r2, [pc, #280]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056a4:	4b43      	ldr	r3, [pc, #268]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056ac:	4a41      	ldr	r2, [pc, #260]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056b4:	4b40      	ldr	r3, [pc, #256]	; (80057b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2232      	movs	r2, #50	; 0x32
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	4a3f      	ldr	r2, [pc, #252]	; (80057bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	0c9b      	lsrs	r3, r3, #18
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ca:	e002      	b.n	80056d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056d2:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056de:	d102      	bne.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f2      	bne.n	80056cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056e6:	4b33      	ldr	r3, [pc, #204]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f2:	d158      	bne.n	80057a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e057      	b.n	80057a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056f8:	4b2e      	ldr	r3, [pc, #184]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056fe:	4a2d      	ldr	r2, [pc, #180]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005708:	e04d      	b.n	80057a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005710:	d141      	bne.n	8005796 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005712:	4b28      	ldr	r3, [pc, #160]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800571a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571e:	d131      	bne.n	8005784 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005720:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005726:	4a23      	ldr	r2, [pc, #140]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005730:	4b20      	ldr	r3, [pc, #128]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005738:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800573e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005740:	4b1d      	ldr	r3, [pc, #116]	; (80057b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2232      	movs	r2, #50	; 0x32
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	0c9b      	lsrs	r3, r3, #18
 8005752:	3301      	adds	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005756:	e002      	b.n	800575e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3b01      	subs	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800575e:	4b15      	ldr	r3, [pc, #84]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576a:	d102      	bne.n	8005772 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f2      	bne.n	8005758 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005772:	4b10      	ldr	r3, [pc, #64]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577e:	d112      	bne.n	80057a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e011      	b.n	80057a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005784:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800578a:	4a0a      	ldr	r2, [pc, #40]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005794:	e007      	b.n	80057a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005796:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800579e:	4a05      	ldr	r2, [pc, #20]	; (80057b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	40007000 	.word	0x40007000
 80057b8:	20000008 	.word	0x20000008
 80057bc:	431bde83 	.word	0x431bde83

080057c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4a04      	ldr	r2, [pc, #16]	; (80057dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057ce:	6093      	str	r3, [r2, #8]
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40007000 	.word	0x40007000

080057e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e308      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d075      	beq.n	80058ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057fe:	4ba3      	ldr	r3, [pc, #652]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005808:	4ba0      	ldr	r3, [pc, #640]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b0c      	cmp	r3, #12
 8005816:	d102      	bne.n	800581e <HAL_RCC_OscConfig+0x3e>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2b03      	cmp	r3, #3
 800581c:	d002      	beq.n	8005824 <HAL_RCC_OscConfig+0x44>
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d10b      	bne.n	800583c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005824:	4b99      	ldr	r3, [pc, #612]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d05b      	beq.n	80058e8 <HAL_RCC_OscConfig+0x108>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d157      	bne.n	80058e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e2e3      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005844:	d106      	bne.n	8005854 <HAL_RCC_OscConfig+0x74>
 8005846:	4b91      	ldr	r3, [pc, #580]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a90      	ldr	r2, [pc, #576]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800584c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e01d      	b.n	8005890 <HAL_RCC_OscConfig+0xb0>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800585c:	d10c      	bne.n	8005878 <HAL_RCC_OscConfig+0x98>
 800585e:	4b8b      	ldr	r3, [pc, #556]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a8a      	ldr	r2, [pc, #552]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	4b88      	ldr	r3, [pc, #544]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a87      	ldr	r2, [pc, #540]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e00b      	b.n	8005890 <HAL_RCC_OscConfig+0xb0>
 8005878:	4b84      	ldr	r3, [pc, #528]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a83      	ldr	r2, [pc, #524]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800587e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	4b81      	ldr	r3, [pc, #516]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a80      	ldr	r2, [pc, #512]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800588a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800588e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d013      	beq.n	80058c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd fa82 	bl	8002da0 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a0:	f7fd fa7e 	bl	8002da0 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	; 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e2a8      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058b2:	4b76      	ldr	r3, [pc, #472]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f0      	beq.n	80058a0 <HAL_RCC_OscConfig+0xc0>
 80058be:	e014      	b.n	80058ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fd fa6e 	bl	8002da0 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058c8:	f7fd fa6a 	bl	8002da0 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	; 0x64
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e294      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058da:	4b6c      	ldr	r3, [pc, #432]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0xe8>
 80058e6:	e000      	b.n	80058ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d075      	beq.n	80059e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058f6:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
 80058fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005900:	4b62      	ldr	r3, [pc, #392]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b0c      	cmp	r3, #12
 800590e:	d102      	bne.n	8005916 <HAL_RCC_OscConfig+0x136>
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d002      	beq.n	800591c <HAL_RCC_OscConfig+0x13c>
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b04      	cmp	r3, #4
 800591a:	d11f      	bne.n	800595c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800591c:	4b5b      	ldr	r3, [pc, #364]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_RCC_OscConfig+0x154>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e267      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005934:	4b55      	ldr	r3, [pc, #340]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	061b      	lsls	r3, r3, #24
 8005942:	4952      	ldr	r1, [pc, #328]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005944:	4313      	orrs	r3, r2
 8005946:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005948:	4b51      	ldr	r3, [pc, #324]	; (8005a90 <HAL_RCC_OscConfig+0x2b0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f7fc fde7 	bl	8002520 <HAL_InitTick>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d043      	beq.n	80059e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e253      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d023      	beq.n	80059ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005964:	4b49      	ldr	r3, [pc, #292]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a48      	ldr	r2, [pc, #288]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800596a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800596e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005970:	f7fd fa16 	bl	8002da0 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005978:	f7fd fa12 	bl	8002da0 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e23c      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800598a:	4b40      	ldr	r3, [pc, #256]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005996:	4b3d      	ldr	r3, [pc, #244]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	061b      	lsls	r3, r3, #24
 80059a4:	4939      	ldr	r1, [pc, #228]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	604b      	str	r3, [r1, #4]
 80059aa:	e01a      	b.n	80059e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ac:	4b37      	ldr	r3, [pc, #220]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a36      	ldr	r2, [pc, #216]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80059b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b8:	f7fd f9f2 	bl	8002da0 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059c0:	f7fd f9ee 	bl	8002da0 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e218      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059d2:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x1e0>
 80059de:	e000      	b.n	80059e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d03c      	beq.n	8005a68 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01c      	beq.n	8005a30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059f6:	4b25      	ldr	r3, [pc, #148]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059fc:	4a23      	ldr	r2, [pc, #140]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fd f9cb 	bl	8002da0 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a0e:	f7fd f9c7 	bl	8002da0 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e1f1      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a20:	4b1a      	ldr	r3, [pc, #104]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0ef      	beq.n	8005a0e <HAL_RCC_OscConfig+0x22e>
 8005a2e:	e01b      	b.n	8005a68 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a30:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a36:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a40:	f7fd f9ae 	bl	8002da0 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a48:	f7fd f9aa 	bl	8002da0 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e1d4      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1ef      	bne.n	8005a48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80ab 	beq.w	8005bcc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a76:	2300      	movs	r3, #0
 8005a78:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a7a:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_RCC_OscConfig+0x2b4>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e005      	b.n	8005a96 <HAL_RCC_OscConfig+0x2b6>
 8005a8a:	bf00      	nop
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	2000000c 	.word	0x2000000c
 8005a94:	2300      	movs	r3, #0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a9a:	4baf      	ldr	r3, [pc, #700]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9e:	4aae      	ldr	r2, [pc, #696]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8005aa6:	4bac      	ldr	r3, [pc, #688]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab6:	4ba9      	ldr	r3, [pc, #676]	; (8005d5c <HAL_RCC_OscConfig+0x57c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d118      	bne.n	8005af4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ac2:	4ba6      	ldr	r3, [pc, #664]	; (8005d5c <HAL_RCC_OscConfig+0x57c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4aa5      	ldr	r2, [pc, #660]	; (8005d5c <HAL_RCC_OscConfig+0x57c>)
 8005ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ace:	f7fd f967 	bl	8002da0 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad6:	f7fd f963 	bl	8002da0 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e18d      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ae8:	4b9c      	ldr	r3, [pc, #624]	; (8005d5c <HAL_RCC_OscConfig+0x57c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d108      	bne.n	8005b0e <HAL_RCC_OscConfig+0x32e>
 8005afc:	4b96      	ldr	r3, [pc, #600]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b02:	4a95      	ldr	r2, [pc, #596]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b0c:	e024      	b.n	8005b58 <HAL_RCC_OscConfig+0x378>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	d110      	bne.n	8005b38 <HAL_RCC_OscConfig+0x358>
 8005b16:	4b90      	ldr	r3, [pc, #576]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1c:	4a8e      	ldr	r2, [pc, #568]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005b1e:	f043 0304 	orr.w	r3, r3, #4
 8005b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b26:	4b8c      	ldr	r3, [pc, #560]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2c:	4a8a      	ldr	r2, [pc, #552]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b36:	e00f      	b.n	8005b58 <HAL_RCC_OscConfig+0x378>
 8005b38:	4b87      	ldr	r3, [pc, #540]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	4a86      	ldr	r2, [pc, #536]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b48:	4b83      	ldr	r3, [pc, #524]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4e:	4a82      	ldr	r2, [pc, #520]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005b50:	f023 0304 	bic.w	r3, r3, #4
 8005b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d016      	beq.n	8005b8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b60:	f7fd f91e 	bl	8002da0 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b66:	e00a      	b.n	8005b7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b68:	f7fd f91a 	bl	8002da0 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e142      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b7e:	4b76      	ldr	r3, [pc, #472]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ed      	beq.n	8005b68 <HAL_RCC_OscConfig+0x388>
 8005b8c:	e015      	b.n	8005bba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8e:	f7fd f907 	bl	8002da0 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b94:	e00a      	b.n	8005bac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b96:	f7fd f903 	bl	8002da0 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e12b      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bac:	4b6a      	ldr	r3, [pc, #424]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1ed      	bne.n	8005b96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bba:	7ffb      	ldrb	r3, [r7, #31]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d105      	bne.n	8005bcc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc0:	4b65      	ldr	r3, [pc, #404]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc4:	4a64      	ldr	r2, [pc, #400]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d03c      	beq.n	8005c52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01c      	beq.n	8005c1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005be0:	4b5d      	ldr	r3, [pc, #372]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005be6:	4a5c      	ldr	r2, [pc, #368]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005be8:	f043 0301 	orr.w	r3, r3, #1
 8005bec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf0:	f7fd f8d6 	bl	8002da0 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bf8:	f7fd f8d2 	bl	8002da0 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0fc      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c0a:	4b53      	ldr	r3, [pc, #332]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0ef      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x418>
 8005c18:	e01b      	b.n	8005c52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c1a:	4b4f      	ldr	r3, [pc, #316]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c20:	4a4d      	ldr	r2, [pc, #308]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005c22:	f023 0301 	bic.w	r3, r3, #1
 8005c26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2a:	f7fd f8b9 	bl	8002da0 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c32:	f7fd f8b5 	bl	8002da0 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e0df      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c44:	4b44      	ldr	r3, [pc, #272]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1ef      	bne.n	8005c32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 80d3 	beq.w	8005e02 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c5c:	4b3e      	ldr	r3, [pc, #248]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 030c 	and.w	r3, r3, #12
 8005c64:	2b0c      	cmp	r3, #12
 8005c66:	f000 808d 	beq.w	8005d84 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d15a      	bne.n	8005d28 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c72:	4b39      	ldr	r3, [pc, #228]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a38      	ldr	r2, [pc, #224]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7e:	f7fd f88f 	bl	8002da0 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c86:	f7fd f88b 	bl	8002da0 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e0b5      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c98:	4b2f      	ldr	r3, [pc, #188]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f0      	bne.n	8005c86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ca4:	4b2c      	ldr	r3, [pc, #176]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	4b2d      	ldr	r3, [pc, #180]	; (8005d60 <HAL_RCC_OscConfig+0x580>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6a11      	ldr	r1, [r2, #32]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cb4:	3a01      	subs	r2, #1
 8005cb6:	0112      	lsls	r2, r2, #4
 8005cb8:	4311      	orrs	r1, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005cbe:	0212      	lsls	r2, r2, #8
 8005cc0:	4311      	orrs	r1, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cc6:	0852      	lsrs	r2, r2, #1
 8005cc8:	3a01      	subs	r2, #1
 8005cca:	0552      	lsls	r2, r2, #21
 8005ccc:	4311      	orrs	r1, r2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cd2:	0852      	lsrs	r2, r2, #1
 8005cd4:	3a01      	subs	r2, #1
 8005cd6:	0652      	lsls	r2, r2, #25
 8005cd8:	4311      	orrs	r1, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005cde:	06d2      	lsls	r2, r2, #27
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	491d      	ldr	r1, [pc, #116]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1a      	ldr	r2, [pc, #104]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cf2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cf4:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d00:	f7fd f84e 	bl	8002da0 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d08:	f7fd f84a 	bl	8002da0 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e074      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d1a:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0f0      	beq.n	8005d08 <HAL_RCC_OscConfig+0x528>
 8005d26:	e06c      	b.n	8005e02 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d28:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d32:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005d34:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	4a07      	ldr	r2, [pc, #28]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4a04      	ldr	r2, [pc, #16]	; (8005d58 <HAL_RCC_OscConfig+0x578>)
 8005d46:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d50:	f7fd f826 	bl	8002da0 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d56:	e00e      	b.n	8005d76 <HAL_RCC_OscConfig+0x596>
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	40007000 	.word	0x40007000
 8005d60:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d64:	f7fd f81c 	bl	8002da0 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e046      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d76:	4b25      	ldr	r3, [pc, #148]	; (8005e0c <HAL_RCC_OscConfig+0x62c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <HAL_RCC_OscConfig+0x584>
 8005d82:	e03e      	b.n	8005e02 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e039      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d90:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <HAL_RCC_OscConfig+0x62c>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f003 0203 	and.w	r2, r3, #3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d12c      	bne.n	8005dfe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	3b01      	subs	r3, #1
 8005db0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d123      	bne.n	8005dfe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d11b      	bne.n	8005dfe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d113      	bne.n	8005dfe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	085b      	lsrs	r3, r3, #1
 8005de2:	3b01      	subs	r3, #1
 8005de4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d109      	bne.n	8005dfe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df4:	085b      	lsrs	r3, r3, #1
 8005df6:	3b01      	subs	r3, #1
 8005df8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40021000 	.word	0x40021000

08005e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e11e      	b.n	8006066 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e28:	4b91      	ldr	r3, [pc, #580]	; (8006070 <HAL_RCC_ClockConfig+0x260>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d910      	bls.n	8005e58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e36:	4b8e      	ldr	r3, [pc, #568]	; (8006070 <HAL_RCC_ClockConfig+0x260>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f023 020f 	bic.w	r2, r3, #15
 8005e3e:	498c      	ldr	r1, [pc, #560]	; (8006070 <HAL_RCC_ClockConfig+0x260>)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e46:	4b8a      	ldr	r3, [pc, #552]	; (8006070 <HAL_RCC_ClockConfig+0x260>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d001      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e106      	b.n	8006066 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d073      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d129      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e6c:	4b81      	ldr	r3, [pc, #516]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0f4      	b.n	8006066 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e7c:	f000 f9b8 	bl	80061f0 <RCC_GetSysClockFreqFromPLLSource>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4a7c      	ldr	r2, [pc, #496]	; (8006078 <HAL_RCC_ClockConfig+0x268>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d93f      	bls.n	8005f0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e8a:	4b7a      	ldr	r3, [pc, #488]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d033      	beq.n	8005f0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d12f      	bne.n	8005f0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005eaa:	4b72      	ldr	r3, [pc, #456]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eb2:	4a70      	ldr	r2, [pc, #448]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	e024      	b.n	8005f0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d107      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ec8:	4b6a      	ldr	r3, [pc, #424]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e0c6      	b.n	8006066 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ed8:	4b66      	ldr	r3, [pc, #408]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0be      	b.n	8006066 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ee8:	f000 f8ce 	bl	8006088 <HAL_RCC_GetSysClockFreq>
 8005eec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4a61      	ldr	r2, [pc, #388]	; (8006078 <HAL_RCC_ClockConfig+0x268>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d909      	bls.n	8005f0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ef6:	4b5f      	ldr	r3, [pc, #380]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005efe:	4a5d      	ldr	r2, [pc, #372]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f0a:	4b5a      	ldr	r3, [pc, #360]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f023 0203 	bic.w	r2, r3, #3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	4957      	ldr	r1, [pc, #348]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1c:	f7fc ff40 	bl	8002da0 <HAL_GetTick>
 8005f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f22:	e00a      	b.n	8005f3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f24:	f7fc ff3c 	bl	8002da0 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e095      	b.n	8006066 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3a:	4b4e      	ldr	r3, [pc, #312]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 020c 	and.w	r2, r3, #12
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d1eb      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d023      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f64:	4b43      	ldr	r3, [pc, #268]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4a42      	ldr	r2, [pc, #264]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005f6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f7c:	4b3d      	ldr	r3, [pc, #244]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f84:	4a3b      	ldr	r2, [pc, #236]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005f86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f8c:	4b39      	ldr	r3, [pc, #228]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	4936      	ldr	r1, [pc, #216]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	608b      	str	r3, [r1, #8]
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b80      	cmp	r3, #128	; 0x80
 8005fa4:	d105      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005fa6:	4b33      	ldr	r3, [pc, #204]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	4a32      	ldr	r2, [pc, #200]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8005fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fb0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fb2:	4b2f      	ldr	r3, [pc, #188]	; (8006070 <HAL_RCC_ClockConfig+0x260>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d21d      	bcs.n	8005ffc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc0:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <HAL_RCC_ClockConfig+0x260>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f023 020f 	bic.w	r2, r3, #15
 8005fc8:	4929      	ldr	r1, [pc, #164]	; (8006070 <HAL_RCC_ClockConfig+0x260>)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fd0:	f7fc fee6 	bl	8002da0 <HAL_GetTick>
 8005fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd6:	e00a      	b.n	8005fee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd8:	f7fc fee2 	bl	8002da0 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e03b      	b.n	8006066 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fee:	4b20      	ldr	r3, [pc, #128]	; (8006070 <HAL_RCC_ClockConfig+0x260>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d1ed      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006008:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4917      	ldr	r1, [pc, #92]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8006016:	4313      	orrs	r3, r2
 8006018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006026:	4b13      	ldr	r3, [pc, #76]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	490f      	ldr	r1, [pc, #60]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800603a:	f000 f825 	bl	8006088 <HAL_RCC_GetSysClockFreq>
 800603e:	4602      	mov	r2, r0
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <HAL_RCC_ClockConfig+0x264>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	490c      	ldr	r1, [pc, #48]	; (800607c <HAL_RCC_ClockConfig+0x26c>)
 800604c:	5ccb      	ldrb	r3, [r1, r3]
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	fa22 f303 	lsr.w	r3, r2, r3
 8006056:	4a0a      	ldr	r2, [pc, #40]	; (8006080 <HAL_RCC_ClockConfig+0x270>)
 8006058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800605a:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <HAL_RCC_ClockConfig+0x274>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fc fa5e 	bl	8002520 <HAL_InitTick>
 8006064:	4603      	mov	r3, r0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40022000 	.word	0x40022000
 8006074:	40021000 	.word	0x40021000
 8006078:	04c4b400 	.word	0x04c4b400
 800607c:	0800de44 	.word	0x0800de44
 8006080:	20000008 	.word	0x20000008
 8006084:	2000000c 	.word	0x2000000c

08006088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800608e:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	2b04      	cmp	r3, #4
 8006098:	d102      	bne.n	80060a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800609a:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <HAL_RCC_GetSysClockFreq+0xbc>)
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	e047      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80060a0:	4b27      	ldr	r3, [pc, #156]	; (8006140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 030c 	and.w	r3, r3, #12
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d102      	bne.n	80060b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060ac:	4b25      	ldr	r3, [pc, #148]	; (8006144 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	e03e      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80060b2:	4b23      	ldr	r3, [pc, #140]	; (8006140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d136      	bne.n	800612c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060be:	4b20      	ldr	r3, [pc, #128]	; (8006140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	091b      	lsrs	r3, r3, #4
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	3301      	adds	r3, #1
 80060d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d10c      	bne.n	80060f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060dc:	4a19      	ldr	r2, [pc, #100]	; (8006144 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e4:	4a16      	ldr	r2, [pc, #88]	; (8006140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060e6:	68d2      	ldr	r2, [r2, #12]
 80060e8:	0a12      	lsrs	r2, r2, #8
 80060ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
 80060f2:	617b      	str	r3, [r7, #20]
      break;
 80060f4:	e00c      	b.n	8006110 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060f6:	4a13      	ldr	r2, [pc, #76]	; (8006144 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fe:	4a10      	ldr	r2, [pc, #64]	; (8006140 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006100:	68d2      	ldr	r2, [r2, #12]
 8006102:	0a12      	lsrs	r2, r2, #8
 8006104:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006108:	fb02 f303 	mul.w	r3, r2, r3
 800610c:	617b      	str	r3, [r7, #20]
      break;
 800610e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	0e5b      	lsrs	r3, r3, #25
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	3301      	adds	r3, #1
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	fbb2 f3f3 	udiv	r3, r2, r3
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	e001      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006130:	693b      	ldr	r3, [r7, #16]
}
 8006132:	4618      	mov	r0, r3
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40021000 	.word	0x40021000
 8006144:	00f42400 	.word	0x00f42400

08006148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800614c:	4b03      	ldr	r3, [pc, #12]	; (800615c <HAL_RCC_GetHCLKFreq+0x14>)
 800614e:	681b      	ldr	r3, [r3, #0]
}
 8006150:	4618      	mov	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20000008 	.word	0x20000008

08006160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006164:	f7ff fff0 	bl	8006148 <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b06      	ldr	r3, [pc, #24]	; (8006184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	0a1b      	lsrs	r3, r3, #8
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4904      	ldr	r1, [pc, #16]	; (8006188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40021000 	.word	0x40021000
 8006188:	0800de54 	.word	0x0800de54

0800618c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	220f      	movs	r2, #15
 800619a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800619c:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <HAL_RCC_GetClockConfig+0x5c>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 0203 	and.w	r2, r3, #3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <HAL_RCC_GetClockConfig+0x5c>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <HAL_RCC_GetClockConfig+0x5c>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80061c0:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <HAL_RCC_GetClockConfig+0x5c>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	08db      	lsrs	r3, r3, #3
 80061c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80061ce:	4b07      	ldr	r3, [pc, #28]	; (80061ec <HAL_RCC_GetClockConfig+0x60>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	601a      	str	r2, [r3, #0]
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000
 80061ec:	40022000 	.word	0x40022000

080061f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061f6:	4b1e      	ldr	r3, [pc, #120]	; (8006270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006200:	4b1b      	ldr	r3, [pc, #108]	; (8006270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	3301      	adds	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b03      	cmp	r3, #3
 8006212:	d10c      	bne.n	800622e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006214:	4a17      	ldr	r2, [pc, #92]	; (8006274 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	fbb2 f3f3 	udiv	r3, r2, r3
 800621c:	4a14      	ldr	r2, [pc, #80]	; (8006270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800621e:	68d2      	ldr	r2, [r2, #12]
 8006220:	0a12      	lsrs	r2, r2, #8
 8006222:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006226:	fb02 f303 	mul.w	r3, r2, r3
 800622a:	617b      	str	r3, [r7, #20]
    break;
 800622c:	e00c      	b.n	8006248 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800622e:	4a11      	ldr	r2, [pc, #68]	; (8006274 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	fbb2 f3f3 	udiv	r3, r2, r3
 8006236:	4a0e      	ldr	r2, [pc, #56]	; (8006270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006238:	68d2      	ldr	r2, [r2, #12]
 800623a:	0a12      	lsrs	r2, r2, #8
 800623c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006240:	fb02 f303 	mul.w	r3, r2, r3
 8006244:	617b      	str	r3, [r7, #20]
    break;
 8006246:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006248:	4b09      	ldr	r3, [pc, #36]	; (8006270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	0e5b      	lsrs	r3, r3, #25
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	3301      	adds	r3, #1
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006260:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006262:	687b      	ldr	r3, [r7, #4]
}
 8006264:	4618      	mov	r0, r3
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	40021000 	.word	0x40021000
 8006274:	00f42400 	.word	0x00f42400

08006278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006280:	2300      	movs	r3, #0
 8006282:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006284:	2300      	movs	r3, #0
 8006286:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 8098 	beq.w	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006296:	2300      	movs	r3, #0
 8006298:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800629a:	4b43      	ldr	r3, [pc, #268]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800629c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10d      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a6:	4b40      	ldr	r3, [pc, #256]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062aa:	4a3f      	ldr	r2, [pc, #252]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b0:	6593      	str	r3, [r2, #88]	; 0x58
 80062b2:	4b3d      	ldr	r3, [pc, #244]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ba:	60bb      	str	r3, [r7, #8]
 80062bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062be:	2301      	movs	r3, #1
 80062c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062c2:	4b3a      	ldr	r3, [pc, #232]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a39      	ldr	r2, [pc, #228]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062ce:	f7fc fd67 	bl	8002da0 <HAL_GetTick>
 80062d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062d4:	e009      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d6:	f7fc fd63 	bl	8002da0 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d902      	bls.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	74fb      	strb	r3, [r7, #19]
        break;
 80062e8:	e005      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ea:	4b30      	ldr	r3, [pc, #192]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0ef      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80062f6:	7cfb      	ldrb	r3, [r7, #19]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d159      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062fc:	4b2a      	ldr	r3, [pc, #168]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006306:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01e      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	429a      	cmp	r2, r3
 8006316:	d019      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006318:	4b23      	ldr	r3, [pc, #140]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800631a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006322:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006324:	4b20      	ldr	r3, [pc, #128]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632a:	4a1f      	ldr	r2, [pc, #124]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800632c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006334:	4b1c      	ldr	r3, [pc, #112]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	4a1b      	ldr	r2, [pc, #108]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800633c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006344:	4a18      	ldr	r2, [pc, #96]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006356:	f7fc fd23 	bl	8002da0 <HAL_GetTick>
 800635a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800635c:	e00b      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635e:	f7fc fd1f 	bl	8002da0 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	f241 3288 	movw	r2, #5000	; 0x1388
 800636c:	4293      	cmp	r3, r2
 800636e:	d902      	bls.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	74fb      	strb	r3, [r7, #19]
            break;
 8006374:	e006      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006376:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0ec      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800638a:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800638c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	4903      	ldr	r1, [pc, #12]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063a0:	e008      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063a2:	7cfb      	ldrb	r3, [r7, #19]
 80063a4:	74bb      	strb	r3, [r7, #18]
 80063a6:	e005      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063a8:	40021000 	.word	0x40021000
 80063ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	7cfb      	ldrb	r3, [r7, #19]
 80063b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063b4:	7c7b      	ldrb	r3, [r7, #17]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d105      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ba:	4ba6      	ldr	r3, [pc, #664]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	4aa5      	ldr	r2, [pc, #660]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063d2:	4ba0      	ldr	r3, [pc, #640]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	f023 0203 	bic.w	r2, r3, #3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	499c      	ldr	r1, [pc, #624]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063f4:	4b97      	ldr	r3, [pc, #604]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fa:	f023 020c 	bic.w	r2, r3, #12
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	4994      	ldr	r1, [pc, #592]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006416:	4b8f      	ldr	r3, [pc, #572]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	498b      	ldr	r1, [pc, #556]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006438:	4b86      	ldr	r3, [pc, #536]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	4983      	ldr	r1, [pc, #524]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800645a:	4b7e      	ldr	r3, [pc, #504]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	497a      	ldr	r1, [pc, #488]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800647c:	4b75      	ldr	r3, [pc, #468]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	4972      	ldr	r1, [pc, #456]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800649e:	4b6d      	ldr	r3, [pc, #436]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	4969      	ldr	r1, [pc, #420]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064c0:	4b64      	ldr	r3, [pc, #400]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	4961      	ldr	r1, [pc, #388]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064e2:	4b5c      	ldr	r3, [pc, #368]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	4958      	ldr	r1, [pc, #352]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006500:	2b00      	cmp	r3, #0
 8006502:	d015      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006504:	4b53      	ldr	r3, [pc, #332]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	4950      	ldr	r1, [pc, #320]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006522:	d105      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006524:	4b4b      	ldr	r3, [pc, #300]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	4a4a      	ldr	r2, [pc, #296]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800652a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800652e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006538:	2b00      	cmp	r3, #0
 800653a:	d015      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800653c:	4b45      	ldr	r3, [pc, #276]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006542:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654a:	4942      	ldr	r1, [pc, #264]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800655a:	d105      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800655c:	4b3d      	ldr	r3, [pc, #244]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	4a3c      	ldr	r2, [pc, #240]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006566:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d015      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006574:	4b37      	ldr	r3, [pc, #220]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	4934      	ldr	r1, [pc, #208]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006592:	d105      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006594:	4b2f      	ldr	r3, [pc, #188]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	4a2e      	ldr	r2, [pc, #184]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800659a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800659e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d015      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065ac:	4b29      	ldr	r3, [pc, #164]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	4926      	ldr	r1, [pc, #152]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ca:	d105      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065cc:	4b21      	ldr	r3, [pc, #132]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	4a20      	ldr	r2, [pc, #128]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d015      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	4918      	ldr	r1, [pc, #96]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006602:	d105      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006604:	4b13      	ldr	r3, [pc, #76]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	4a12      	ldr	r2, [pc, #72]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800660a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800660e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d015      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800661c:	4b0d      	ldr	r3, [pc, #52]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662a:	490a      	ldr	r1, [pc, #40]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800663a:	d105      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800663c:	4b05      	ldr	r3, [pc, #20]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	4a04      	ldr	r2, [pc, #16]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006646:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006648:	7cbb      	ldrb	r3, [r7, #18]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40021000 	.word	0x40021000

08006658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e09d      	b.n	80067a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	2b00      	cmp	r3, #0
 8006670:	d108      	bne.n	8006684 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800667a:	d009      	beq.n	8006690 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	61da      	str	r2, [r3, #28]
 8006682:	e005      	b.n	8006690 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fb fe86 	bl	80023bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066d0:	d902      	bls.n	80066d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	e002      	b.n	80066de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066e6:	d007      	beq.n	80066f8 <HAL_SPI_Init+0xa0>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066f0:	d002      	beq.n	80066f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673a:	ea42 0103 	orr.w	r1, r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	0c1b      	lsrs	r3, r3, #16
 8006754:	f003 0204 	and.w	r2, r3, #4
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	f003 0310 	and.w	r3, r3, #16
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006774:	ea42 0103 	orr.w	r1, r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69da      	ldr	r2, [r3, #28]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006794:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	4613      	mov	r3, r2
 80067bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_SPI_Transmit_DMA+0x20>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e0d8      	b.n	8006982 <HAL_SPI_Transmit_DMA+0x1d2>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d002      	beq.n	80067ea <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80067e4:	2302      	movs	r3, #2
 80067e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067e8:	e0c6      	b.n	8006978 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_SPI_Transmit_DMA+0x46>
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067fa:	e0bd      	b.n	8006978 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2203      	movs	r2, #3
 8006800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	88fa      	ldrh	r2, [r7, #6]
 800681a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006846:	d10f      	bne.n	8006868 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006856:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006866:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686c:	4a47      	ldr	r2, [pc, #284]	; (800698c <HAL_SPI_Transmit_DMA+0x1dc>)
 800686e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006874:	4a46      	ldr	r2, [pc, #280]	; (8006990 <HAL_SPI_Transmit_DMA+0x1e0>)
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687c:	4a45      	ldr	r2, [pc, #276]	; (8006994 <HAL_SPI_Transmit_DMA+0x1e4>)
 800687e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006884:	2200      	movs	r2, #0
 8006886:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006896:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068a0:	d82d      	bhi.n	80068fe <HAL_SPI_Transmit_DMA+0x14e>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ac:	d127      	bne.n	80068fe <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10f      	bne.n	80068dc <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068ca:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	085b      	lsrs	r3, r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068da:	e010      	b.n	80068fe <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ea:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3301      	adds	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	4619      	mov	r1, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	330c      	adds	r3, #12
 800690e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006914:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006916:	f7fe f8f5 	bl	8004b04 <HAL_DMA_Start_IT>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00c      	beq.n	800693a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006924:	f043 0210 	orr.w	r2, r3, #16
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006938:	e01e      	b.n	8006978 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b40      	cmp	r3, #64	; 0x40
 8006946:	d007      	beq.n	8006958 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006956:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0220 	orr.w	r2, r2, #32
 8006966:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0202 	orr.w	r2, r2, #2
 8006976:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006980:	7dfb      	ldrb	r3, [r7, #23]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	08006a7b 	.word	0x08006a7b
 8006990:	080069d5 	.word	0x080069d5
 8006994:	08006a97 	.word	0x08006a97

08006998 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069e2:	f7fc f9dd 	bl	8002da0 <HAL_GetTick>
 80069e6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	d03b      	beq.n	8006a6e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0220 	bic.w	r2, r2, #32
 8006a04:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0202 	bic.w	r2, r2, #2
 8006a14:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	2164      	movs	r1, #100	; 0x64
 8006a1a:	6978      	ldr	r0, [r7, #20]
 8006a1c:	f000 f972 	bl	8006d04 <SPI_EndRxTxTransaction>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2a:	f043 0220 	orr.w	r2, r3, #32
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2200      	movs	r2, #0
 8006a54:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a66:	6978      	ldr	r0, [r7, #20]
 8006a68:	f7ff ffaa 	bl	80069c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a6c:	e002      	b.n	8006a74 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006a6e:	6978      	ldr	r0, [r7, #20]
 8006a70:	f7ff ff92 	bl	8006998 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7ff ff8f 	bl	80069ac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0203 	bic.w	r2, r2, #3
 8006ab2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab8:	f043 0210 	orr.w	r2, r3, #16
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7ff ff79 	bl	80069c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ace:	bf00      	nop
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ae8:	f7fc f95a 	bl	8002da0 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	4413      	add	r3, r2
 8006af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006af8:	f7fc f952 	bl	8002da0 <HAL_GetTick>
 8006afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006afe:	4b39      	ldr	r3, [pc, #228]	; (8006be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	015b      	lsls	r3, r3, #5
 8006b04:	0d1b      	lsrs	r3, r3, #20
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
 8006b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b0e:	e054      	b.n	8006bba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b16:	d050      	beq.n	8006bba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b18:	f7fc f942 	bl	8002da0 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d902      	bls.n	8006b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d13d      	bne.n	8006baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b46:	d111      	bne.n	8006b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b50:	d004      	beq.n	8006b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b5a:	d107      	bne.n	8006b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b74:	d10f      	bne.n	8006b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e017      	b.n	8006bda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d19b      	bne.n	8006b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000008 	.word	0x20000008

08006be8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006bf6:	f7fc f8d3 	bl	8002da0 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	4413      	add	r3, r2
 8006c04:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c06:	f7fc f8cb 	bl	8002da0 <HAL_GetTick>
 8006c0a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c0c:	4b3c      	ldr	r3, [pc, #240]	; (8006d00 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	4613      	mov	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	00da      	lsls	r2, r3, #3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	0d1b      	lsrs	r3, r3, #20
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	fb02 f303 	mul.w	r3, r2, r3
 8006c22:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c24:	e05f      	b.n	8006ce6 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c2c:	d106      	bne.n	8006c3c <SPI_WaitFifoStateUntilTimeout+0x54>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d103      	bne.n	8006c3c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c42:	d050      	beq.n	8006ce6 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c44:	f7fc f8ac 	bl	8002da0 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d902      	bls.n	8006c5a <SPI_WaitFifoStateUntilTimeout+0x72>
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d13d      	bne.n	8006cd6 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c72:	d111      	bne.n	8006c98 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7c:	d004      	beq.n	8006c88 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c86:	d107      	bne.n	8006c98 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca0:	d10f      	bne.n	8006cc2 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e010      	b.n	8006cf8 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d197      	bne.n	8006c26 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20000008 	.word	0x20000008

08006d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff ff63 	bl	8006be8 <SPI_WaitFifoStateUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2c:	f043 0220 	orr.w	r2, r3, #32
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e027      	b.n	8006d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2180      	movs	r1, #128	; 0x80
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7ff fec8 	bl	8006ad8 <SPI_WaitFlagStateUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d52:	f043 0220 	orr.w	r2, r3, #32
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e014      	b.n	8006d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7ff ff3c 	bl	8006be8 <SPI_WaitFifoStateUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7a:	f043 0220 	orr.w	r2, r3, #32
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e000      	b.n	8006d88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e049      	b.n	8006e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f841 	bl	8006e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f000 fce2 	bl	8007798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e04a      	b.n	8006f02 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a21      	ldr	r2, [pc, #132]	; (8006f10 <HAL_TIM_Base_Start_IT+0xbc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d013      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <HAL_TIM_Base_Start_IT+0xc0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1a      	ldr	r2, [pc, #104]	; (8006f1c <HAL_TIM_Base_Start_IT+0xc8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a19      	ldr	r2, [pc, #100]	; (8006f20 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d115      	bne.n	8006eec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	4b17      	ldr	r3, [pc, #92]	; (8006f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b06      	cmp	r3, #6
 8006ed0:	d015      	beq.n	8006efe <HAL_TIM_Base_Start_IT+0xaa>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed8:	d011      	beq.n	8006efe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0201 	orr.w	r2, r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eea:	e008      	b.n	8006efe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	e000      	b.n	8006f00 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40012c00 	.word	0x40012c00
 8006f14:	40000400 	.word	0x40000400
 8006f18:	40000800 	.word	0x40000800
 8006f1c:	40013400 	.word	0x40013400
 8006f20:	40014000 	.word	0x40014000
 8006f24:	00010007 	.word	0x00010007

08006f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e049      	b.n	8006fce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fb fe2a 	bl	8002ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3304      	adds	r3, #4
 8006f64:	4619      	mov	r1, r3
 8006f66:	4610      	mov	r0, r2
 8006f68:	f000 fc16 	bl	8007798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <HAL_TIM_PWM_Start+0x24>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	bf14      	ite	ne
 8006ff4:	2301      	movne	r3, #1
 8006ff6:	2300      	moveq	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	e03c      	b.n	8007076 <HAL_TIM_PWM_Start+0x9e>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d109      	bne.n	8007016 <HAL_TIM_PWM_Start+0x3e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b01      	cmp	r3, #1
 800700c:	bf14      	ite	ne
 800700e:	2301      	movne	r3, #1
 8007010:	2300      	moveq	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	e02f      	b.n	8007076 <HAL_TIM_PWM_Start+0x9e>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d109      	bne.n	8007030 <HAL_TIM_PWM_Start+0x58>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	bf14      	ite	ne
 8007028:	2301      	movne	r3, #1
 800702a:	2300      	moveq	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	e022      	b.n	8007076 <HAL_TIM_PWM_Start+0x9e>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b0c      	cmp	r3, #12
 8007034:	d109      	bne.n	800704a <HAL_TIM_PWM_Start+0x72>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b01      	cmp	r3, #1
 8007040:	bf14      	ite	ne
 8007042:	2301      	movne	r3, #1
 8007044:	2300      	moveq	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	e015      	b.n	8007076 <HAL_TIM_PWM_Start+0x9e>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b10      	cmp	r3, #16
 800704e:	d109      	bne.n	8007064 <HAL_TIM_PWM_Start+0x8c>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b01      	cmp	r3, #1
 800705a:	bf14      	ite	ne
 800705c:	2301      	movne	r3, #1
 800705e:	2300      	moveq	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	e008      	b.n	8007076 <HAL_TIM_PWM_Start+0x9e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	bf14      	ite	ne
 8007070:	2301      	movne	r3, #1
 8007072:	2300      	moveq	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e097      	b.n	80071ae <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <HAL_TIM_PWM_Start+0xb6>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800708c:	e023      	b.n	80070d6 <HAL_TIM_PWM_Start+0xfe>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d104      	bne.n	800709e <HAL_TIM_PWM_Start+0xc6>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800709c:	e01b      	b.n	80070d6 <HAL_TIM_PWM_Start+0xfe>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_PWM_Start+0xd6>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ac:	e013      	b.n	80070d6 <HAL_TIM_PWM_Start+0xfe>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	d104      	bne.n	80070be <HAL_TIM_PWM_Start+0xe6>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070bc:	e00b      	b.n	80070d6 <HAL_TIM_PWM_Start+0xfe>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d104      	bne.n	80070ce <HAL_TIM_PWM_Start+0xf6>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070cc:	e003      	b.n	80070d6 <HAL_TIM_PWM_Start+0xfe>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2201      	movs	r2, #1
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fee0 	bl	8007ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a33      	ldr	r2, [pc, #204]	; (80071b8 <HAL_TIM_PWM_Start+0x1e0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <HAL_TIM_PWM_Start+0x13e>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a32      	ldr	r2, [pc, #200]	; (80071bc <HAL_TIM_PWM_Start+0x1e4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00e      	beq.n	8007116 <HAL_TIM_PWM_Start+0x13e>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a30      	ldr	r2, [pc, #192]	; (80071c0 <HAL_TIM_PWM_Start+0x1e8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d009      	beq.n	8007116 <HAL_TIM_PWM_Start+0x13e>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a2f      	ldr	r2, [pc, #188]	; (80071c4 <HAL_TIM_PWM_Start+0x1ec>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_TIM_PWM_Start+0x13e>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a2d      	ldr	r2, [pc, #180]	; (80071c8 <HAL_TIM_PWM_Start+0x1f0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d101      	bne.n	800711a <HAL_TIM_PWM_Start+0x142>
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <HAL_TIM_PWM_Start+0x144>
 800711a:	2300      	movs	r3, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d007      	beq.n	8007130 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800712e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a20      	ldr	r2, [pc, #128]	; (80071b8 <HAL_TIM_PWM_Start+0x1e0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d018      	beq.n	800716c <HAL_TIM_PWM_Start+0x194>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007142:	d013      	beq.n	800716c <HAL_TIM_PWM_Start+0x194>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a20      	ldr	r2, [pc, #128]	; (80071cc <HAL_TIM_PWM_Start+0x1f4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00e      	beq.n	800716c <HAL_TIM_PWM_Start+0x194>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <HAL_TIM_PWM_Start+0x1f8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d009      	beq.n	800716c <HAL_TIM_PWM_Start+0x194>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a17      	ldr	r2, [pc, #92]	; (80071bc <HAL_TIM_PWM_Start+0x1e4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d004      	beq.n	800716c <HAL_TIM_PWM_Start+0x194>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a16      	ldr	r2, [pc, #88]	; (80071c0 <HAL_TIM_PWM_Start+0x1e8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d115      	bne.n	8007198 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <HAL_TIM_PWM_Start+0x1fc>)
 8007174:	4013      	ands	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b06      	cmp	r3, #6
 800717c:	d015      	beq.n	80071aa <HAL_TIM_PWM_Start+0x1d2>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007184:	d011      	beq.n	80071aa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0201 	orr.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007196:	e008      	b.n	80071aa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e000      	b.n	80071ac <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40012c00 	.word	0x40012c00
 80071bc:	40013400 	.word	0x40013400
 80071c0:	40014000 	.word	0x40014000
 80071c4:	40014400 	.word	0x40014400
 80071c8:	40014800 	.word	0x40014800
 80071cc:	40000400 	.word	0x40000400
 80071d0:	40000800 	.word	0x40000800
 80071d4:	00010007 	.word	0x00010007

080071d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d122      	bne.n	8007234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d11b      	bne.n	8007234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f06f 0202 	mvn.w	r2, #2
 8007204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa9d 	bl	800775a <HAL_TIM_IC_CaptureCallback>
 8007220:	e005      	b.n	800722e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa8f 	bl	8007746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 faa0 	bl	800776e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b04      	cmp	r3, #4
 8007240:	d122      	bne.n	8007288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b04      	cmp	r3, #4
 800724e:	d11b      	bne.n	8007288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0204 	mvn.w	r2, #4
 8007258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fa73 	bl	800775a <HAL_TIM_IC_CaptureCallback>
 8007274:	e005      	b.n	8007282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa65 	bl	8007746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fa76 	bl	800776e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b08      	cmp	r3, #8
 8007294:	d122      	bne.n	80072dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d11b      	bne.n	80072dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f06f 0208 	mvn.w	r2, #8
 80072ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2204      	movs	r2, #4
 80072b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa49 	bl	800775a <HAL_TIM_IC_CaptureCallback>
 80072c8:	e005      	b.n	80072d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fa3b 	bl	8007746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fa4c 	bl	800776e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f003 0310 	and.w	r3, r3, #16
 80072e6:	2b10      	cmp	r3, #16
 80072e8:	d122      	bne.n	8007330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b10      	cmp	r3, #16
 80072f6:	d11b      	bne.n	8007330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0210 	mvn.w	r2, #16
 8007300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2208      	movs	r2, #8
 8007306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa1f 	bl	800775a <HAL_TIM_IC_CaptureCallback>
 800731c:	e005      	b.n	800732a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa11 	bl	8007746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fa22 	bl	800776e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b01      	cmp	r3, #1
 800733c:	d10e      	bne.n	800735c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	d107      	bne.n	800735c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f06f 0201 	mvn.w	r2, #1
 8007354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fa febc 	bl	80020d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007366:	2b80      	cmp	r3, #128	; 0x80
 8007368:	d10e      	bne.n	8007388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007374:	2b80      	cmp	r3, #128	; 0x80
 8007376:	d107      	bne.n	8007388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fef3 	bl	800816e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007396:	d10e      	bne.n	80073b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a2:	2b80      	cmp	r3, #128	; 0x80
 80073a4:	d107      	bne.n	80073b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80073ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fee6 	bl	8008182 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c0:	2b40      	cmp	r3, #64	; 0x40
 80073c2:	d10e      	bne.n	80073e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d107      	bne.n	80073e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f9d0 	bl	8007782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d10e      	bne.n	800740e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d107      	bne.n	800740e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f06f 0220 	mvn.w	r2, #32
 8007406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fea6 	bl	800815a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741c:	d10f      	bne.n	800743e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800742c:	d107      	bne.n	800743e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 feac 	bl	8008196 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800744c:	d10f      	bne.n	800746e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800745c:	d107      	bne.n	800746e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fe9e 	bl	80081aa <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800747c:	d10f      	bne.n	800749e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800748c:	d107      	bne.n	800749e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fe90 	bl	80081be <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074ac:	d10f      	bne.n	80074ce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074bc:	d107      	bne.n	80074ce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80074c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fe82 	bl	80081d2 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e0fd      	b.n	80076ee <HAL_TIM_PWM_ConfigChannel+0x216>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b14      	cmp	r3, #20
 80074fe:	f200 80f0 	bhi.w	80076e2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007502:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	0800755d 	.word	0x0800755d
 800750c:	080076e3 	.word	0x080076e3
 8007510:	080076e3 	.word	0x080076e3
 8007514:	080076e3 	.word	0x080076e3
 8007518:	0800759d 	.word	0x0800759d
 800751c:	080076e3 	.word	0x080076e3
 8007520:	080076e3 	.word	0x080076e3
 8007524:	080076e3 	.word	0x080076e3
 8007528:	080075df 	.word	0x080075df
 800752c:	080076e3 	.word	0x080076e3
 8007530:	080076e3 	.word	0x080076e3
 8007534:	080076e3 	.word	0x080076e3
 8007538:	0800761f 	.word	0x0800761f
 800753c:	080076e3 	.word	0x080076e3
 8007540:	080076e3 	.word	0x080076e3
 8007544:	080076e3 	.word	0x080076e3
 8007548:	08007661 	.word	0x08007661
 800754c:	080076e3 	.word	0x080076e3
 8007550:	080076e3 	.word	0x080076e3
 8007554:	080076e3 	.word	0x080076e3
 8007558:	080076a1 	.word	0x080076a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f9a8 	bl	80078b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0208 	orr.w	r2, r2, #8
 8007576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0204 	bic.w	r2, r2, #4
 8007586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6999      	ldr	r1, [r3, #24]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	619a      	str	r2, [r3, #24]
      break;
 800759a:	e0a3      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fa18 	bl	80079d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6999      	ldr	r1, [r3, #24]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	021a      	lsls	r2, r3, #8
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	619a      	str	r2, [r3, #24]
      break;
 80075dc:	e082      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fa81 	bl	8007aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0208 	orr.w	r2, r2, #8
 80075f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0204 	bic.w	r2, r2, #4
 8007608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69d9      	ldr	r1, [r3, #28]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	61da      	str	r2, [r3, #28]
      break;
 800761c:	e062      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fae9 	bl	8007bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69d9      	ldr	r1, [r3, #28]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	021a      	lsls	r2, r3, #8
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	61da      	str	r2, [r3, #28]
      break;
 800765e:	e041      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fb52 	bl	8007d10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0208 	orr.w	r2, r2, #8
 800767a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0204 	bic.w	r2, r2, #4
 800768a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	691a      	ldr	r2, [r3, #16]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800769e:	e021      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fb96 	bl	8007dd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	021a      	lsls	r2, r3, #8
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80076e0:	e000      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80076e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop

080076f8 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <HAL_TIM_GenerateEvent+0x18>
 800770c:	2302      	movs	r3, #2
 800770e:	e014      	b.n	800773a <HAL_TIM_GenerateEvent+0x42>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800774e:	bf00      	nop
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007762:	bf00      	nop
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
	...

08007798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a3c      	ldr	r2, [pc, #240]	; (800789c <TIM_Base_SetConfig+0x104>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d00f      	beq.n	80077d0 <TIM_Base_SetConfig+0x38>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b6:	d00b      	beq.n	80077d0 <TIM_Base_SetConfig+0x38>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a39      	ldr	r2, [pc, #228]	; (80078a0 <TIM_Base_SetConfig+0x108>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d007      	beq.n	80077d0 <TIM_Base_SetConfig+0x38>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a38      	ldr	r2, [pc, #224]	; (80078a4 <TIM_Base_SetConfig+0x10c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d003      	beq.n	80077d0 <TIM_Base_SetConfig+0x38>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a37      	ldr	r2, [pc, #220]	; (80078a8 <TIM_Base_SetConfig+0x110>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d108      	bne.n	80077e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a2d      	ldr	r2, [pc, #180]	; (800789c <TIM_Base_SetConfig+0x104>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d01b      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f0:	d017      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a2a      	ldr	r2, [pc, #168]	; (80078a0 <TIM_Base_SetConfig+0x108>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a29      	ldr	r2, [pc, #164]	; (80078a4 <TIM_Base_SetConfig+0x10c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00f      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <TIM_Base_SetConfig+0x110>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00b      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a27      	ldr	r2, [pc, #156]	; (80078ac <TIM_Base_SetConfig+0x114>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d007      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a26      	ldr	r2, [pc, #152]	; (80078b0 <TIM_Base_SetConfig+0x118>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d003      	beq.n	8007822 <TIM_Base_SetConfig+0x8a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a25      	ldr	r2, [pc, #148]	; (80078b4 <TIM_Base_SetConfig+0x11c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d108      	bne.n	8007834 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4313      	orrs	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a10      	ldr	r2, [pc, #64]	; (800789c <TIM_Base_SetConfig+0x104>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00f      	beq.n	8007880 <TIM_Base_SetConfig+0xe8>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <TIM_Base_SetConfig+0x110>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00b      	beq.n	8007880 <TIM_Base_SetConfig+0xe8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a10      	ldr	r2, [pc, #64]	; (80078ac <TIM_Base_SetConfig+0x114>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d007      	beq.n	8007880 <TIM_Base_SetConfig+0xe8>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a0f      	ldr	r2, [pc, #60]	; (80078b0 <TIM_Base_SetConfig+0x118>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_Base_SetConfig+0xe8>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a0e      	ldr	r2, [pc, #56]	; (80078b4 <TIM_Base_SetConfig+0x11c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d103      	bne.n	8007888 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	615a      	str	r2, [r3, #20]
}
 800788e:	bf00      	nop
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40012c00 	.word	0x40012c00
 80078a0:	40000400 	.word	0x40000400
 80078a4:	40000800 	.word	0x40000800
 80078a8:	40013400 	.word	0x40013400
 80078ac:	40014000 	.word	0x40014000
 80078b0:	40014400 	.word	0x40014400
 80078b4:	40014800 	.word	0x40014800

080078b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f023 0201 	bic.w	r2, r3, #1
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 0303 	bic.w	r3, r3, #3
 80078f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f023 0302 	bic.w	r3, r3, #2
 8007904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a2c      	ldr	r2, [pc, #176]	; (80079c4 <TIM_OC1_SetConfig+0x10c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00f      	beq.n	8007938 <TIM_OC1_SetConfig+0x80>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a2b      	ldr	r2, [pc, #172]	; (80079c8 <TIM_OC1_SetConfig+0x110>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d00b      	beq.n	8007938 <TIM_OC1_SetConfig+0x80>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a2a      	ldr	r2, [pc, #168]	; (80079cc <TIM_OC1_SetConfig+0x114>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d007      	beq.n	8007938 <TIM_OC1_SetConfig+0x80>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a29      	ldr	r2, [pc, #164]	; (80079d0 <TIM_OC1_SetConfig+0x118>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <TIM_OC1_SetConfig+0x80>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a28      	ldr	r2, [pc, #160]	; (80079d4 <TIM_OC1_SetConfig+0x11c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d10c      	bne.n	8007952 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f023 0308 	bic.w	r3, r3, #8
 800793e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f023 0304 	bic.w	r3, r3, #4
 8007950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a1b      	ldr	r2, [pc, #108]	; (80079c4 <TIM_OC1_SetConfig+0x10c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00f      	beq.n	800797a <TIM_OC1_SetConfig+0xc2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a1a      	ldr	r2, [pc, #104]	; (80079c8 <TIM_OC1_SetConfig+0x110>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00b      	beq.n	800797a <TIM_OC1_SetConfig+0xc2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a19      	ldr	r2, [pc, #100]	; (80079cc <TIM_OC1_SetConfig+0x114>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d007      	beq.n	800797a <TIM_OC1_SetConfig+0xc2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a18      	ldr	r2, [pc, #96]	; (80079d0 <TIM_OC1_SetConfig+0x118>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d003      	beq.n	800797a <TIM_OC1_SetConfig+0xc2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a17      	ldr	r2, [pc, #92]	; (80079d4 <TIM_OC1_SetConfig+0x11c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d111      	bne.n	800799e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4313      	orrs	r3, r2
 8007992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	621a      	str	r2, [r3, #32]
}
 80079b8:	bf00      	nop
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	40012c00 	.word	0x40012c00
 80079c8:	40013400 	.word	0x40013400
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40014400 	.word	0x40014400
 80079d4:	40014800 	.word	0x40014800

080079d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f023 0210 	bic.w	r2, r3, #16
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f023 0320 	bic.w	r3, r3, #32
 8007a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a28      	ldr	r2, [pc, #160]	; (8007ad8 <TIM_OC2_SetConfig+0x100>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_OC2_SetConfig+0x6c>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a27      	ldr	r2, [pc, #156]	; (8007adc <TIM_OC2_SetConfig+0x104>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d10d      	bne.n	8007a60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a1d      	ldr	r2, [pc, #116]	; (8007ad8 <TIM_OC2_SetConfig+0x100>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d00f      	beq.n	8007a88 <TIM_OC2_SetConfig+0xb0>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a1c      	ldr	r2, [pc, #112]	; (8007adc <TIM_OC2_SetConfig+0x104>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00b      	beq.n	8007a88 <TIM_OC2_SetConfig+0xb0>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <TIM_OC2_SetConfig+0x108>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d007      	beq.n	8007a88 <TIM_OC2_SetConfig+0xb0>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ae4 <TIM_OC2_SetConfig+0x10c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d003      	beq.n	8007a88 <TIM_OC2_SetConfig+0xb0>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a19      	ldr	r2, [pc, #100]	; (8007ae8 <TIM_OC2_SetConfig+0x110>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d113      	bne.n	8007ab0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	621a      	str	r2, [r3, #32]
}
 8007aca:	bf00      	nop
 8007acc:	371c      	adds	r7, #28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	40012c00 	.word	0x40012c00
 8007adc:	40013400 	.word	0x40013400
 8007ae0:	40014000 	.word	0x40014000
 8007ae4:	40014400 	.word	0x40014400
 8007ae8:	40014800 	.word	0x40014800

08007aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 0303 	bic.w	r3, r3, #3
 8007b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	021b      	lsls	r3, r3, #8
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a27      	ldr	r2, [pc, #156]	; (8007be8 <TIM_OC3_SetConfig+0xfc>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d003      	beq.n	8007b56 <TIM_OC3_SetConfig+0x6a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a26      	ldr	r2, [pc, #152]	; (8007bec <TIM_OC3_SetConfig+0x100>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d10d      	bne.n	8007b72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <TIM_OC3_SetConfig+0xfc>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00f      	beq.n	8007b9a <TIM_OC3_SetConfig+0xae>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a1b      	ldr	r2, [pc, #108]	; (8007bec <TIM_OC3_SetConfig+0x100>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00b      	beq.n	8007b9a <TIM_OC3_SetConfig+0xae>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a1a      	ldr	r2, [pc, #104]	; (8007bf0 <TIM_OC3_SetConfig+0x104>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d007      	beq.n	8007b9a <TIM_OC3_SetConfig+0xae>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <TIM_OC3_SetConfig+0x108>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <TIM_OC3_SetConfig+0xae>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a18      	ldr	r2, [pc, #96]	; (8007bf8 <TIM_OC3_SetConfig+0x10c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d113      	bne.n	8007bc2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	621a      	str	r2, [r3, #32]
}
 8007bdc:	bf00      	nop
 8007bde:	371c      	adds	r7, #28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	40012c00 	.word	0x40012c00
 8007bec:	40013400 	.word	0x40013400
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	40014400 	.word	0x40014400
 8007bf8:	40014800 	.word	0x40014800

08007bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	031b      	lsls	r3, r3, #12
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a28      	ldr	r2, [pc, #160]	; (8007cfc <TIM_OC4_SetConfig+0x100>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d003      	beq.n	8007c68 <TIM_OC4_SetConfig+0x6c>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a27      	ldr	r2, [pc, #156]	; (8007d00 <TIM_OC4_SetConfig+0x104>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d10d      	bne.n	8007c84 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	031b      	lsls	r3, r3, #12
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a1d      	ldr	r2, [pc, #116]	; (8007cfc <TIM_OC4_SetConfig+0x100>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00f      	beq.n	8007cac <TIM_OC4_SetConfig+0xb0>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a1c      	ldr	r2, [pc, #112]	; (8007d00 <TIM_OC4_SetConfig+0x104>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00b      	beq.n	8007cac <TIM_OC4_SetConfig+0xb0>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a1b      	ldr	r2, [pc, #108]	; (8007d04 <TIM_OC4_SetConfig+0x108>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d007      	beq.n	8007cac <TIM_OC4_SetConfig+0xb0>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a1a      	ldr	r2, [pc, #104]	; (8007d08 <TIM_OC4_SetConfig+0x10c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d003      	beq.n	8007cac <TIM_OC4_SetConfig+0xb0>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a19      	ldr	r2, [pc, #100]	; (8007d0c <TIM_OC4_SetConfig+0x110>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d113      	bne.n	8007cd4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cb2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	019b      	lsls	r3, r3, #6
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	019b      	lsls	r3, r3, #6
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40012c00 	.word	0x40012c00
 8007d00:	40013400 	.word	0x40013400
 8007d04:	40014000 	.word	0x40014000
 8007d08:	40014400 	.word	0x40014400
 8007d0c:	40014800 	.word	0x40014800

08007d10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	041b      	lsls	r3, r3, #16
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a17      	ldr	r2, [pc, #92]	; (8007dc4 <TIM_OC5_SetConfig+0xb4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00f      	beq.n	8007d8a <TIM_OC5_SetConfig+0x7a>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a16      	ldr	r2, [pc, #88]	; (8007dc8 <TIM_OC5_SetConfig+0xb8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00b      	beq.n	8007d8a <TIM_OC5_SetConfig+0x7a>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a15      	ldr	r2, [pc, #84]	; (8007dcc <TIM_OC5_SetConfig+0xbc>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d007      	beq.n	8007d8a <TIM_OC5_SetConfig+0x7a>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a14      	ldr	r2, [pc, #80]	; (8007dd0 <TIM_OC5_SetConfig+0xc0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d003      	beq.n	8007d8a <TIM_OC5_SetConfig+0x7a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a13      	ldr	r2, [pc, #76]	; (8007dd4 <TIM_OC5_SetConfig+0xc4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d109      	bne.n	8007d9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	621a      	str	r2, [r3, #32]
}
 8007db8:	bf00      	nop
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	40012c00 	.word	0x40012c00
 8007dc8:	40013400 	.word	0x40013400
 8007dcc:	40014000 	.word	0x40014000
 8007dd0:	40014400 	.word	0x40014400
 8007dd4:	40014800 	.word	0x40014800

08007dd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	051b      	lsls	r3, r3, #20
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a18      	ldr	r2, [pc, #96]	; (8007e90 <TIM_OC6_SetConfig+0xb8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00f      	beq.n	8007e54 <TIM_OC6_SetConfig+0x7c>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a17      	ldr	r2, [pc, #92]	; (8007e94 <TIM_OC6_SetConfig+0xbc>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00b      	beq.n	8007e54 <TIM_OC6_SetConfig+0x7c>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a16      	ldr	r2, [pc, #88]	; (8007e98 <TIM_OC6_SetConfig+0xc0>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d007      	beq.n	8007e54 <TIM_OC6_SetConfig+0x7c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a15      	ldr	r2, [pc, #84]	; (8007e9c <TIM_OC6_SetConfig+0xc4>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_OC6_SetConfig+0x7c>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a14      	ldr	r2, [pc, #80]	; (8007ea0 <TIM_OC6_SetConfig+0xc8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d109      	bne.n	8007e68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	029b      	lsls	r3, r3, #10
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40012c00 	.word	0x40012c00
 8007e94:	40013400 	.word	0x40013400
 8007e98:	40014000 	.word	0x40014000
 8007e9c:	40014400 	.word	0x40014400
 8007ea0:	40014800 	.word	0x40014800

08007ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f003 031f 	and.w	r3, r3, #31
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1a      	ldr	r2, [r3, #32]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	401a      	ands	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1a      	ldr	r2, [r3, #32]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f003 031f 	and.w	r3, r3, #31
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
	...

08007ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e065      	b.n	8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a2b      	ldr	r2, [pc, #172]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d108      	bne.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1b      	ldr	r2, [pc, #108]	; (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d018      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7e:	d013      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00e      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a17      	ldr	r2, [pc, #92]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d009      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a12      	ldr	r2, [pc, #72]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d004      	beq.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a13      	ldr	r2, [pc, #76]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d10c      	bne.n	8007fc2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	40012c00 	.word	0x40012c00
 8007fe4:	40013400 	.word	0x40013400
 8007fe8:	40000400 	.word	0x40000400
 8007fec:	40000800 	.word	0x40000800
 8007ff0:	40014000 	.word	0x40014000

08007ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800800c:	2302      	movs	r3, #2
 800800e:	e087      	b.n	8008120 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	4313      	orrs	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	4313      	orrs	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	041b      	lsls	r3, r3, #16
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a27      	ldr	r2, [pc, #156]	; (800812c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d004      	beq.n	800809e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a25      	ldr	r2, [pc, #148]	; (8008130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d106      	bne.n	80080ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a1e      	ldr	r2, [pc, #120]	; (800812c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d004      	beq.n	80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a1d      	ldr	r2, [pc, #116]	; (8008130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d126      	bne.n	800810e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	051b      	lsls	r3, r3, #20
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	4313      	orrs	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a0e      	ldr	r2, [pc, #56]	; (800812c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d004      	beq.n	8008100 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a0d      	ldr	r2, [pc, #52]	; (8008130 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d106      	bne.n	800810e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	40012c00 	.word	0x40012c00
 8008130:	40013400 	.word	0x40013400

08008134 <HAL_TIMEx_DitheringEnable>:
  *         So it may be necessary to read ARR value or CCRx value with macros @ref __HAL_TIM_GET_AUTORELOAD() __HAL_TIM_GET_COMPARE()
  *         and if necessary update Init structure field htim->Init.Period .
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_DitheringEnable(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->CR1, TIM_CR1_DITHEN);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800814a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <__errno>:
 80081e8:	4b01      	ldr	r3, [pc, #4]	; (80081f0 <__errno+0x8>)
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000014 	.word	0x20000014

080081f4 <__libc_init_array>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	4d0d      	ldr	r5, [pc, #52]	; (800822c <__libc_init_array+0x38>)
 80081f8:	4c0d      	ldr	r4, [pc, #52]	; (8008230 <__libc_init_array+0x3c>)
 80081fa:	1b64      	subs	r4, r4, r5
 80081fc:	10a4      	asrs	r4, r4, #2
 80081fe:	2600      	movs	r6, #0
 8008200:	42a6      	cmp	r6, r4
 8008202:	d109      	bne.n	8008218 <__libc_init_array+0x24>
 8008204:	4d0b      	ldr	r5, [pc, #44]	; (8008234 <__libc_init_array+0x40>)
 8008206:	4c0c      	ldr	r4, [pc, #48]	; (8008238 <__libc_init_array+0x44>)
 8008208:	f005 f818 	bl	800d23c <_init>
 800820c:	1b64      	subs	r4, r4, r5
 800820e:	10a4      	asrs	r4, r4, #2
 8008210:	2600      	movs	r6, #0
 8008212:	42a6      	cmp	r6, r4
 8008214:	d105      	bne.n	8008222 <__libc_init_array+0x2e>
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	f855 3b04 	ldr.w	r3, [r5], #4
 800821c:	4798      	blx	r3
 800821e:	3601      	adds	r6, #1
 8008220:	e7ee      	b.n	8008200 <__libc_init_array+0xc>
 8008222:	f855 3b04 	ldr.w	r3, [r5], #4
 8008226:	4798      	blx	r3
 8008228:	3601      	adds	r6, #1
 800822a:	e7f2      	b.n	8008212 <__libc_init_array+0x1e>
 800822c:	0800e458 	.word	0x0800e458
 8008230:	0800e458 	.word	0x0800e458
 8008234:	0800e458 	.word	0x0800e458
 8008238:	0800e45c 	.word	0x0800e45c

0800823c <memset>:
 800823c:	4402      	add	r2, r0
 800823e:	4603      	mov	r3, r0
 8008240:	4293      	cmp	r3, r2
 8008242:	d100      	bne.n	8008246 <memset+0xa>
 8008244:	4770      	bx	lr
 8008246:	f803 1b01 	strb.w	r1, [r3], #1
 800824a:	e7f9      	b.n	8008240 <memset+0x4>

0800824c <__cvt>:
 800824c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008250:	ec55 4b10 	vmov	r4, r5, d0
 8008254:	2d00      	cmp	r5, #0
 8008256:	460e      	mov	r6, r1
 8008258:	4619      	mov	r1, r3
 800825a:	462b      	mov	r3, r5
 800825c:	bfbb      	ittet	lt
 800825e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008262:	461d      	movlt	r5, r3
 8008264:	2300      	movge	r3, #0
 8008266:	232d      	movlt	r3, #45	; 0x2d
 8008268:	700b      	strb	r3, [r1, #0]
 800826a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800826c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008270:	4691      	mov	r9, r2
 8008272:	f023 0820 	bic.w	r8, r3, #32
 8008276:	bfbc      	itt	lt
 8008278:	4622      	movlt	r2, r4
 800827a:	4614      	movlt	r4, r2
 800827c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008280:	d005      	beq.n	800828e <__cvt+0x42>
 8008282:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008286:	d100      	bne.n	800828a <__cvt+0x3e>
 8008288:	3601      	adds	r6, #1
 800828a:	2102      	movs	r1, #2
 800828c:	e000      	b.n	8008290 <__cvt+0x44>
 800828e:	2103      	movs	r1, #3
 8008290:	ab03      	add	r3, sp, #12
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	ab02      	add	r3, sp, #8
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	ec45 4b10 	vmov	d0, r4, r5
 800829c:	4653      	mov	r3, sl
 800829e:	4632      	mov	r2, r6
 80082a0:	f000 fcea 	bl	8008c78 <_dtoa_r>
 80082a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082a8:	4607      	mov	r7, r0
 80082aa:	d102      	bne.n	80082b2 <__cvt+0x66>
 80082ac:	f019 0f01 	tst.w	r9, #1
 80082b0:	d022      	beq.n	80082f8 <__cvt+0xac>
 80082b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082b6:	eb07 0906 	add.w	r9, r7, r6
 80082ba:	d110      	bne.n	80082de <__cvt+0x92>
 80082bc:	783b      	ldrb	r3, [r7, #0]
 80082be:	2b30      	cmp	r3, #48	; 0x30
 80082c0:	d10a      	bne.n	80082d8 <__cvt+0x8c>
 80082c2:	2200      	movs	r2, #0
 80082c4:	2300      	movs	r3, #0
 80082c6:	4620      	mov	r0, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	f7f8 fc25 	bl	8000b18 <__aeabi_dcmpeq>
 80082ce:	b918      	cbnz	r0, 80082d8 <__cvt+0x8c>
 80082d0:	f1c6 0601 	rsb	r6, r6, #1
 80082d4:	f8ca 6000 	str.w	r6, [sl]
 80082d8:	f8da 3000 	ldr.w	r3, [sl]
 80082dc:	4499      	add	r9, r3
 80082de:	2200      	movs	r2, #0
 80082e0:	2300      	movs	r3, #0
 80082e2:	4620      	mov	r0, r4
 80082e4:	4629      	mov	r1, r5
 80082e6:	f7f8 fc17 	bl	8000b18 <__aeabi_dcmpeq>
 80082ea:	b108      	cbz	r0, 80082f0 <__cvt+0xa4>
 80082ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80082f0:	2230      	movs	r2, #48	; 0x30
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	454b      	cmp	r3, r9
 80082f6:	d307      	bcc.n	8008308 <__cvt+0xbc>
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082fc:	1bdb      	subs	r3, r3, r7
 80082fe:	4638      	mov	r0, r7
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	b004      	add	sp, #16
 8008304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008308:	1c59      	adds	r1, r3, #1
 800830a:	9103      	str	r1, [sp, #12]
 800830c:	701a      	strb	r2, [r3, #0]
 800830e:	e7f0      	b.n	80082f2 <__cvt+0xa6>

08008310 <__exponent>:
 8008310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008312:	4603      	mov	r3, r0
 8008314:	2900      	cmp	r1, #0
 8008316:	bfb8      	it	lt
 8008318:	4249      	neglt	r1, r1
 800831a:	f803 2b02 	strb.w	r2, [r3], #2
 800831e:	bfb4      	ite	lt
 8008320:	222d      	movlt	r2, #45	; 0x2d
 8008322:	222b      	movge	r2, #43	; 0x2b
 8008324:	2909      	cmp	r1, #9
 8008326:	7042      	strb	r2, [r0, #1]
 8008328:	dd2a      	ble.n	8008380 <__exponent+0x70>
 800832a:	f10d 0407 	add.w	r4, sp, #7
 800832e:	46a4      	mov	ip, r4
 8008330:	270a      	movs	r7, #10
 8008332:	46a6      	mov	lr, r4
 8008334:	460a      	mov	r2, r1
 8008336:	fb91 f6f7 	sdiv	r6, r1, r7
 800833a:	fb07 1516 	mls	r5, r7, r6, r1
 800833e:	3530      	adds	r5, #48	; 0x30
 8008340:	2a63      	cmp	r2, #99	; 0x63
 8008342:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008346:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800834a:	4631      	mov	r1, r6
 800834c:	dcf1      	bgt.n	8008332 <__exponent+0x22>
 800834e:	3130      	adds	r1, #48	; 0x30
 8008350:	f1ae 0502 	sub.w	r5, lr, #2
 8008354:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008358:	1c44      	adds	r4, r0, #1
 800835a:	4629      	mov	r1, r5
 800835c:	4561      	cmp	r1, ip
 800835e:	d30a      	bcc.n	8008376 <__exponent+0x66>
 8008360:	f10d 0209 	add.w	r2, sp, #9
 8008364:	eba2 020e 	sub.w	r2, r2, lr
 8008368:	4565      	cmp	r5, ip
 800836a:	bf88      	it	hi
 800836c:	2200      	movhi	r2, #0
 800836e:	4413      	add	r3, r2
 8008370:	1a18      	subs	r0, r3, r0
 8008372:	b003      	add	sp, #12
 8008374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800837a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800837e:	e7ed      	b.n	800835c <__exponent+0x4c>
 8008380:	2330      	movs	r3, #48	; 0x30
 8008382:	3130      	adds	r1, #48	; 0x30
 8008384:	7083      	strb	r3, [r0, #2]
 8008386:	70c1      	strb	r1, [r0, #3]
 8008388:	1d03      	adds	r3, r0, #4
 800838a:	e7f1      	b.n	8008370 <__exponent+0x60>

0800838c <_printf_float>:
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	ed2d 8b02 	vpush	{d8}
 8008394:	b08d      	sub	sp, #52	; 0x34
 8008396:	460c      	mov	r4, r1
 8008398:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800839c:	4616      	mov	r6, r2
 800839e:	461f      	mov	r7, r3
 80083a0:	4605      	mov	r5, r0
 80083a2:	f001 fa55 	bl	8009850 <_localeconv_r>
 80083a6:	f8d0 a000 	ldr.w	sl, [r0]
 80083aa:	4650      	mov	r0, sl
 80083ac:	f7f7 ff38 	bl	8000220 <strlen>
 80083b0:	2300      	movs	r3, #0
 80083b2:	930a      	str	r3, [sp, #40]	; 0x28
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	9305      	str	r3, [sp, #20]
 80083b8:	f8d8 3000 	ldr.w	r3, [r8]
 80083bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083c0:	3307      	adds	r3, #7
 80083c2:	f023 0307 	bic.w	r3, r3, #7
 80083c6:	f103 0208 	add.w	r2, r3, #8
 80083ca:	f8c8 2000 	str.w	r2, [r8]
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083de:	9307      	str	r3, [sp, #28]
 80083e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80083e4:	ee08 0a10 	vmov	s16, r0
 80083e8:	4b9f      	ldr	r3, [pc, #636]	; (8008668 <_printf_float+0x2dc>)
 80083ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083f2:	f7f8 fbc3 	bl	8000b7c <__aeabi_dcmpun>
 80083f6:	bb88      	cbnz	r0, 800845c <_printf_float+0xd0>
 80083f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083fc:	4b9a      	ldr	r3, [pc, #616]	; (8008668 <_printf_float+0x2dc>)
 80083fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008402:	f7f8 fb9d 	bl	8000b40 <__aeabi_dcmple>
 8008406:	bb48      	cbnz	r0, 800845c <_printf_float+0xd0>
 8008408:	2200      	movs	r2, #0
 800840a:	2300      	movs	r3, #0
 800840c:	4640      	mov	r0, r8
 800840e:	4649      	mov	r1, r9
 8008410:	f7f8 fb8c 	bl	8000b2c <__aeabi_dcmplt>
 8008414:	b110      	cbz	r0, 800841c <_printf_float+0x90>
 8008416:	232d      	movs	r3, #45	; 0x2d
 8008418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800841c:	4b93      	ldr	r3, [pc, #588]	; (800866c <_printf_float+0x2e0>)
 800841e:	4894      	ldr	r0, [pc, #592]	; (8008670 <_printf_float+0x2e4>)
 8008420:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008424:	bf94      	ite	ls
 8008426:	4698      	movls	r8, r3
 8008428:	4680      	movhi	r8, r0
 800842a:	2303      	movs	r3, #3
 800842c:	6123      	str	r3, [r4, #16]
 800842e:	9b05      	ldr	r3, [sp, #20]
 8008430:	f023 0204 	bic.w	r2, r3, #4
 8008434:	6022      	str	r2, [r4, #0]
 8008436:	f04f 0900 	mov.w	r9, #0
 800843a:	9700      	str	r7, [sp, #0]
 800843c:	4633      	mov	r3, r6
 800843e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008440:	4621      	mov	r1, r4
 8008442:	4628      	mov	r0, r5
 8008444:	f000 f9d8 	bl	80087f8 <_printf_common>
 8008448:	3001      	adds	r0, #1
 800844a:	f040 8090 	bne.w	800856e <_printf_float+0x1e2>
 800844e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008452:	b00d      	add	sp, #52	; 0x34
 8008454:	ecbd 8b02 	vpop	{d8}
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845c:	4642      	mov	r2, r8
 800845e:	464b      	mov	r3, r9
 8008460:	4640      	mov	r0, r8
 8008462:	4649      	mov	r1, r9
 8008464:	f7f8 fb8a 	bl	8000b7c <__aeabi_dcmpun>
 8008468:	b140      	cbz	r0, 800847c <_printf_float+0xf0>
 800846a:	464b      	mov	r3, r9
 800846c:	2b00      	cmp	r3, #0
 800846e:	bfbc      	itt	lt
 8008470:	232d      	movlt	r3, #45	; 0x2d
 8008472:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008476:	487f      	ldr	r0, [pc, #508]	; (8008674 <_printf_float+0x2e8>)
 8008478:	4b7f      	ldr	r3, [pc, #508]	; (8008678 <_printf_float+0x2ec>)
 800847a:	e7d1      	b.n	8008420 <_printf_float+0x94>
 800847c:	6863      	ldr	r3, [r4, #4]
 800847e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008482:	9206      	str	r2, [sp, #24]
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	d13f      	bne.n	8008508 <_printf_float+0x17c>
 8008488:	2306      	movs	r3, #6
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	9b05      	ldr	r3, [sp, #20]
 800848e:	6861      	ldr	r1, [r4, #4]
 8008490:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008494:	2300      	movs	r3, #0
 8008496:	9303      	str	r3, [sp, #12]
 8008498:	ab0a      	add	r3, sp, #40	; 0x28
 800849a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800849e:	ab09      	add	r3, sp, #36	; 0x24
 80084a0:	ec49 8b10 	vmov	d0, r8, r9
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	6022      	str	r2, [r4, #0]
 80084a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084ac:	4628      	mov	r0, r5
 80084ae:	f7ff fecd 	bl	800824c <__cvt>
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084b6:	2b47      	cmp	r3, #71	; 0x47
 80084b8:	4680      	mov	r8, r0
 80084ba:	d108      	bne.n	80084ce <_printf_float+0x142>
 80084bc:	1cc8      	adds	r0, r1, #3
 80084be:	db02      	blt.n	80084c6 <_printf_float+0x13a>
 80084c0:	6863      	ldr	r3, [r4, #4]
 80084c2:	4299      	cmp	r1, r3
 80084c4:	dd41      	ble.n	800854a <_printf_float+0x1be>
 80084c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80084ca:	fa5f fb8b 	uxtb.w	fp, fp
 80084ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084d2:	d820      	bhi.n	8008516 <_printf_float+0x18a>
 80084d4:	3901      	subs	r1, #1
 80084d6:	465a      	mov	r2, fp
 80084d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084dc:	9109      	str	r1, [sp, #36]	; 0x24
 80084de:	f7ff ff17 	bl	8008310 <__exponent>
 80084e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084e4:	1813      	adds	r3, r2, r0
 80084e6:	2a01      	cmp	r2, #1
 80084e8:	4681      	mov	r9, r0
 80084ea:	6123      	str	r3, [r4, #16]
 80084ec:	dc02      	bgt.n	80084f4 <_printf_float+0x168>
 80084ee:	6822      	ldr	r2, [r4, #0]
 80084f0:	07d2      	lsls	r2, r2, #31
 80084f2:	d501      	bpl.n	80084f8 <_printf_float+0x16c>
 80084f4:	3301      	adds	r3, #1
 80084f6:	6123      	str	r3, [r4, #16]
 80084f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d09c      	beq.n	800843a <_printf_float+0xae>
 8008500:	232d      	movs	r3, #45	; 0x2d
 8008502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008506:	e798      	b.n	800843a <_printf_float+0xae>
 8008508:	9a06      	ldr	r2, [sp, #24]
 800850a:	2a47      	cmp	r2, #71	; 0x47
 800850c:	d1be      	bne.n	800848c <_printf_float+0x100>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1bc      	bne.n	800848c <_printf_float+0x100>
 8008512:	2301      	movs	r3, #1
 8008514:	e7b9      	b.n	800848a <_printf_float+0xfe>
 8008516:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800851a:	d118      	bne.n	800854e <_printf_float+0x1c2>
 800851c:	2900      	cmp	r1, #0
 800851e:	6863      	ldr	r3, [r4, #4]
 8008520:	dd0b      	ble.n	800853a <_printf_float+0x1ae>
 8008522:	6121      	str	r1, [r4, #16]
 8008524:	b913      	cbnz	r3, 800852c <_printf_float+0x1a0>
 8008526:	6822      	ldr	r2, [r4, #0]
 8008528:	07d0      	lsls	r0, r2, #31
 800852a:	d502      	bpl.n	8008532 <_printf_float+0x1a6>
 800852c:	3301      	adds	r3, #1
 800852e:	440b      	add	r3, r1
 8008530:	6123      	str	r3, [r4, #16]
 8008532:	65a1      	str	r1, [r4, #88]	; 0x58
 8008534:	f04f 0900 	mov.w	r9, #0
 8008538:	e7de      	b.n	80084f8 <_printf_float+0x16c>
 800853a:	b913      	cbnz	r3, 8008542 <_printf_float+0x1b6>
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	07d2      	lsls	r2, r2, #31
 8008540:	d501      	bpl.n	8008546 <_printf_float+0x1ba>
 8008542:	3302      	adds	r3, #2
 8008544:	e7f4      	b.n	8008530 <_printf_float+0x1a4>
 8008546:	2301      	movs	r3, #1
 8008548:	e7f2      	b.n	8008530 <_printf_float+0x1a4>
 800854a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800854e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008550:	4299      	cmp	r1, r3
 8008552:	db05      	blt.n	8008560 <_printf_float+0x1d4>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	6121      	str	r1, [r4, #16]
 8008558:	07d8      	lsls	r0, r3, #31
 800855a:	d5ea      	bpl.n	8008532 <_printf_float+0x1a6>
 800855c:	1c4b      	adds	r3, r1, #1
 800855e:	e7e7      	b.n	8008530 <_printf_float+0x1a4>
 8008560:	2900      	cmp	r1, #0
 8008562:	bfd4      	ite	le
 8008564:	f1c1 0202 	rsble	r2, r1, #2
 8008568:	2201      	movgt	r2, #1
 800856a:	4413      	add	r3, r2
 800856c:	e7e0      	b.n	8008530 <_printf_float+0x1a4>
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	055a      	lsls	r2, r3, #21
 8008572:	d407      	bmi.n	8008584 <_printf_float+0x1f8>
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	4642      	mov	r2, r8
 8008578:	4631      	mov	r1, r6
 800857a:	4628      	mov	r0, r5
 800857c:	47b8      	blx	r7
 800857e:	3001      	adds	r0, #1
 8008580:	d12c      	bne.n	80085dc <_printf_float+0x250>
 8008582:	e764      	b.n	800844e <_printf_float+0xc2>
 8008584:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008588:	f240 80e0 	bls.w	800874c <_printf_float+0x3c0>
 800858c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008590:	2200      	movs	r2, #0
 8008592:	2300      	movs	r3, #0
 8008594:	f7f8 fac0 	bl	8000b18 <__aeabi_dcmpeq>
 8008598:	2800      	cmp	r0, #0
 800859a:	d034      	beq.n	8008606 <_printf_float+0x27a>
 800859c:	4a37      	ldr	r2, [pc, #220]	; (800867c <_printf_float+0x2f0>)
 800859e:	2301      	movs	r3, #1
 80085a0:	4631      	mov	r1, r6
 80085a2:	4628      	mov	r0, r5
 80085a4:	47b8      	blx	r7
 80085a6:	3001      	adds	r0, #1
 80085a8:	f43f af51 	beq.w	800844e <_printf_float+0xc2>
 80085ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085b0:	429a      	cmp	r2, r3
 80085b2:	db02      	blt.n	80085ba <_printf_float+0x22e>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	07d8      	lsls	r0, r3, #31
 80085b8:	d510      	bpl.n	80085dc <_printf_float+0x250>
 80085ba:	ee18 3a10 	vmov	r3, s16
 80085be:	4652      	mov	r2, sl
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f af41 	beq.w	800844e <_printf_float+0xc2>
 80085cc:	f04f 0800 	mov.w	r8, #0
 80085d0:	f104 091a 	add.w	r9, r4, #26
 80085d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d6:	3b01      	subs	r3, #1
 80085d8:	4543      	cmp	r3, r8
 80085da:	dc09      	bgt.n	80085f0 <_printf_float+0x264>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	079b      	lsls	r3, r3, #30
 80085e0:	f100 8105 	bmi.w	80087ee <_printf_float+0x462>
 80085e4:	68e0      	ldr	r0, [r4, #12]
 80085e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e8:	4298      	cmp	r0, r3
 80085ea:	bfb8      	it	lt
 80085ec:	4618      	movlt	r0, r3
 80085ee:	e730      	b.n	8008452 <_printf_float+0xc6>
 80085f0:	2301      	movs	r3, #1
 80085f2:	464a      	mov	r2, r9
 80085f4:	4631      	mov	r1, r6
 80085f6:	4628      	mov	r0, r5
 80085f8:	47b8      	blx	r7
 80085fa:	3001      	adds	r0, #1
 80085fc:	f43f af27 	beq.w	800844e <_printf_float+0xc2>
 8008600:	f108 0801 	add.w	r8, r8, #1
 8008604:	e7e6      	b.n	80085d4 <_printf_float+0x248>
 8008606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008608:	2b00      	cmp	r3, #0
 800860a:	dc39      	bgt.n	8008680 <_printf_float+0x2f4>
 800860c:	4a1b      	ldr	r2, [pc, #108]	; (800867c <_printf_float+0x2f0>)
 800860e:	2301      	movs	r3, #1
 8008610:	4631      	mov	r1, r6
 8008612:	4628      	mov	r0, r5
 8008614:	47b8      	blx	r7
 8008616:	3001      	adds	r0, #1
 8008618:	f43f af19 	beq.w	800844e <_printf_float+0xc2>
 800861c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008620:	4313      	orrs	r3, r2
 8008622:	d102      	bne.n	800862a <_printf_float+0x29e>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	07d9      	lsls	r1, r3, #31
 8008628:	d5d8      	bpl.n	80085dc <_printf_float+0x250>
 800862a:	ee18 3a10 	vmov	r3, s16
 800862e:	4652      	mov	r2, sl
 8008630:	4631      	mov	r1, r6
 8008632:	4628      	mov	r0, r5
 8008634:	47b8      	blx	r7
 8008636:	3001      	adds	r0, #1
 8008638:	f43f af09 	beq.w	800844e <_printf_float+0xc2>
 800863c:	f04f 0900 	mov.w	r9, #0
 8008640:	f104 0a1a 	add.w	sl, r4, #26
 8008644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008646:	425b      	negs	r3, r3
 8008648:	454b      	cmp	r3, r9
 800864a:	dc01      	bgt.n	8008650 <_printf_float+0x2c4>
 800864c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800864e:	e792      	b.n	8008576 <_printf_float+0x1ea>
 8008650:	2301      	movs	r3, #1
 8008652:	4652      	mov	r2, sl
 8008654:	4631      	mov	r1, r6
 8008656:	4628      	mov	r0, r5
 8008658:	47b8      	blx	r7
 800865a:	3001      	adds	r0, #1
 800865c:	f43f aef7 	beq.w	800844e <_printf_float+0xc2>
 8008660:	f109 0901 	add.w	r9, r9, #1
 8008664:	e7ee      	b.n	8008644 <_printf_float+0x2b8>
 8008666:	bf00      	nop
 8008668:	7fefffff 	.word	0x7fefffff
 800866c:	0800de60 	.word	0x0800de60
 8008670:	0800de64 	.word	0x0800de64
 8008674:	0800de6c 	.word	0x0800de6c
 8008678:	0800de68 	.word	0x0800de68
 800867c:	0800de70 	.word	0x0800de70
 8008680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008684:	429a      	cmp	r2, r3
 8008686:	bfa8      	it	ge
 8008688:	461a      	movge	r2, r3
 800868a:	2a00      	cmp	r2, #0
 800868c:	4691      	mov	r9, r2
 800868e:	dc37      	bgt.n	8008700 <_printf_float+0x374>
 8008690:	f04f 0b00 	mov.w	fp, #0
 8008694:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008698:	f104 021a 	add.w	r2, r4, #26
 800869c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800869e:	9305      	str	r3, [sp, #20]
 80086a0:	eba3 0309 	sub.w	r3, r3, r9
 80086a4:	455b      	cmp	r3, fp
 80086a6:	dc33      	bgt.n	8008710 <_printf_float+0x384>
 80086a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086ac:	429a      	cmp	r2, r3
 80086ae:	db3b      	blt.n	8008728 <_printf_float+0x39c>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	07da      	lsls	r2, r3, #31
 80086b4:	d438      	bmi.n	8008728 <_printf_float+0x39c>
 80086b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086b8:	9b05      	ldr	r3, [sp, #20]
 80086ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	eba2 0901 	sub.w	r9, r2, r1
 80086c2:	4599      	cmp	r9, r3
 80086c4:	bfa8      	it	ge
 80086c6:	4699      	movge	r9, r3
 80086c8:	f1b9 0f00 	cmp.w	r9, #0
 80086cc:	dc35      	bgt.n	800873a <_printf_float+0x3ae>
 80086ce:	f04f 0800 	mov.w	r8, #0
 80086d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086d6:	f104 0a1a 	add.w	sl, r4, #26
 80086da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086de:	1a9b      	subs	r3, r3, r2
 80086e0:	eba3 0309 	sub.w	r3, r3, r9
 80086e4:	4543      	cmp	r3, r8
 80086e6:	f77f af79 	ble.w	80085dc <_printf_float+0x250>
 80086ea:	2301      	movs	r3, #1
 80086ec:	4652      	mov	r2, sl
 80086ee:	4631      	mov	r1, r6
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b8      	blx	r7
 80086f4:	3001      	adds	r0, #1
 80086f6:	f43f aeaa 	beq.w	800844e <_printf_float+0xc2>
 80086fa:	f108 0801 	add.w	r8, r8, #1
 80086fe:	e7ec      	b.n	80086da <_printf_float+0x34e>
 8008700:	4613      	mov	r3, r2
 8008702:	4631      	mov	r1, r6
 8008704:	4642      	mov	r2, r8
 8008706:	4628      	mov	r0, r5
 8008708:	47b8      	blx	r7
 800870a:	3001      	adds	r0, #1
 800870c:	d1c0      	bne.n	8008690 <_printf_float+0x304>
 800870e:	e69e      	b.n	800844e <_printf_float+0xc2>
 8008710:	2301      	movs	r3, #1
 8008712:	4631      	mov	r1, r6
 8008714:	4628      	mov	r0, r5
 8008716:	9205      	str	r2, [sp, #20]
 8008718:	47b8      	blx	r7
 800871a:	3001      	adds	r0, #1
 800871c:	f43f ae97 	beq.w	800844e <_printf_float+0xc2>
 8008720:	9a05      	ldr	r2, [sp, #20]
 8008722:	f10b 0b01 	add.w	fp, fp, #1
 8008726:	e7b9      	b.n	800869c <_printf_float+0x310>
 8008728:	ee18 3a10 	vmov	r3, s16
 800872c:	4652      	mov	r2, sl
 800872e:	4631      	mov	r1, r6
 8008730:	4628      	mov	r0, r5
 8008732:	47b8      	blx	r7
 8008734:	3001      	adds	r0, #1
 8008736:	d1be      	bne.n	80086b6 <_printf_float+0x32a>
 8008738:	e689      	b.n	800844e <_printf_float+0xc2>
 800873a:	9a05      	ldr	r2, [sp, #20]
 800873c:	464b      	mov	r3, r9
 800873e:	4442      	add	r2, r8
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	d1c1      	bne.n	80086ce <_printf_float+0x342>
 800874a:	e680      	b.n	800844e <_printf_float+0xc2>
 800874c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800874e:	2a01      	cmp	r2, #1
 8008750:	dc01      	bgt.n	8008756 <_printf_float+0x3ca>
 8008752:	07db      	lsls	r3, r3, #31
 8008754:	d538      	bpl.n	80087c8 <_printf_float+0x43c>
 8008756:	2301      	movs	r3, #1
 8008758:	4642      	mov	r2, r8
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	f43f ae74 	beq.w	800844e <_printf_float+0xc2>
 8008766:	ee18 3a10 	vmov	r3, s16
 800876a:	4652      	mov	r2, sl
 800876c:	4631      	mov	r1, r6
 800876e:	4628      	mov	r0, r5
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	f43f ae6b 	beq.w	800844e <_printf_float+0xc2>
 8008778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800877c:	2200      	movs	r2, #0
 800877e:	2300      	movs	r3, #0
 8008780:	f7f8 f9ca 	bl	8000b18 <__aeabi_dcmpeq>
 8008784:	b9d8      	cbnz	r0, 80087be <_printf_float+0x432>
 8008786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008788:	f108 0201 	add.w	r2, r8, #1
 800878c:	3b01      	subs	r3, #1
 800878e:	4631      	mov	r1, r6
 8008790:	4628      	mov	r0, r5
 8008792:	47b8      	blx	r7
 8008794:	3001      	adds	r0, #1
 8008796:	d10e      	bne.n	80087b6 <_printf_float+0x42a>
 8008798:	e659      	b.n	800844e <_printf_float+0xc2>
 800879a:	2301      	movs	r3, #1
 800879c:	4652      	mov	r2, sl
 800879e:	4631      	mov	r1, r6
 80087a0:	4628      	mov	r0, r5
 80087a2:	47b8      	blx	r7
 80087a4:	3001      	adds	r0, #1
 80087a6:	f43f ae52 	beq.w	800844e <_printf_float+0xc2>
 80087aa:	f108 0801 	add.w	r8, r8, #1
 80087ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b0:	3b01      	subs	r3, #1
 80087b2:	4543      	cmp	r3, r8
 80087b4:	dcf1      	bgt.n	800879a <_printf_float+0x40e>
 80087b6:	464b      	mov	r3, r9
 80087b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087bc:	e6dc      	b.n	8008578 <_printf_float+0x1ec>
 80087be:	f04f 0800 	mov.w	r8, #0
 80087c2:	f104 0a1a 	add.w	sl, r4, #26
 80087c6:	e7f2      	b.n	80087ae <_printf_float+0x422>
 80087c8:	2301      	movs	r3, #1
 80087ca:	4642      	mov	r2, r8
 80087cc:	e7df      	b.n	800878e <_printf_float+0x402>
 80087ce:	2301      	movs	r3, #1
 80087d0:	464a      	mov	r2, r9
 80087d2:	4631      	mov	r1, r6
 80087d4:	4628      	mov	r0, r5
 80087d6:	47b8      	blx	r7
 80087d8:	3001      	adds	r0, #1
 80087da:	f43f ae38 	beq.w	800844e <_printf_float+0xc2>
 80087de:	f108 0801 	add.w	r8, r8, #1
 80087e2:	68e3      	ldr	r3, [r4, #12]
 80087e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087e6:	1a5b      	subs	r3, r3, r1
 80087e8:	4543      	cmp	r3, r8
 80087ea:	dcf0      	bgt.n	80087ce <_printf_float+0x442>
 80087ec:	e6fa      	b.n	80085e4 <_printf_float+0x258>
 80087ee:	f04f 0800 	mov.w	r8, #0
 80087f2:	f104 0919 	add.w	r9, r4, #25
 80087f6:	e7f4      	b.n	80087e2 <_printf_float+0x456>

080087f8 <_printf_common>:
 80087f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087fc:	4616      	mov	r6, r2
 80087fe:	4699      	mov	r9, r3
 8008800:	688a      	ldr	r2, [r1, #8]
 8008802:	690b      	ldr	r3, [r1, #16]
 8008804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008808:	4293      	cmp	r3, r2
 800880a:	bfb8      	it	lt
 800880c:	4613      	movlt	r3, r2
 800880e:	6033      	str	r3, [r6, #0]
 8008810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008814:	4607      	mov	r7, r0
 8008816:	460c      	mov	r4, r1
 8008818:	b10a      	cbz	r2, 800881e <_printf_common+0x26>
 800881a:	3301      	adds	r3, #1
 800881c:	6033      	str	r3, [r6, #0]
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	0699      	lsls	r1, r3, #26
 8008822:	bf42      	ittt	mi
 8008824:	6833      	ldrmi	r3, [r6, #0]
 8008826:	3302      	addmi	r3, #2
 8008828:	6033      	strmi	r3, [r6, #0]
 800882a:	6825      	ldr	r5, [r4, #0]
 800882c:	f015 0506 	ands.w	r5, r5, #6
 8008830:	d106      	bne.n	8008840 <_printf_common+0x48>
 8008832:	f104 0a19 	add.w	sl, r4, #25
 8008836:	68e3      	ldr	r3, [r4, #12]
 8008838:	6832      	ldr	r2, [r6, #0]
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	42ab      	cmp	r3, r5
 800883e:	dc26      	bgt.n	800888e <_printf_common+0x96>
 8008840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008844:	1e13      	subs	r3, r2, #0
 8008846:	6822      	ldr	r2, [r4, #0]
 8008848:	bf18      	it	ne
 800884a:	2301      	movne	r3, #1
 800884c:	0692      	lsls	r2, r2, #26
 800884e:	d42b      	bmi.n	80088a8 <_printf_common+0xb0>
 8008850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008854:	4649      	mov	r1, r9
 8008856:	4638      	mov	r0, r7
 8008858:	47c0      	blx	r8
 800885a:	3001      	adds	r0, #1
 800885c:	d01e      	beq.n	800889c <_printf_common+0xa4>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	68e5      	ldr	r5, [r4, #12]
 8008862:	6832      	ldr	r2, [r6, #0]
 8008864:	f003 0306 	and.w	r3, r3, #6
 8008868:	2b04      	cmp	r3, #4
 800886a:	bf08      	it	eq
 800886c:	1aad      	subeq	r5, r5, r2
 800886e:	68a3      	ldr	r3, [r4, #8]
 8008870:	6922      	ldr	r2, [r4, #16]
 8008872:	bf0c      	ite	eq
 8008874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008878:	2500      	movne	r5, #0
 800887a:	4293      	cmp	r3, r2
 800887c:	bfc4      	itt	gt
 800887e:	1a9b      	subgt	r3, r3, r2
 8008880:	18ed      	addgt	r5, r5, r3
 8008882:	2600      	movs	r6, #0
 8008884:	341a      	adds	r4, #26
 8008886:	42b5      	cmp	r5, r6
 8008888:	d11a      	bne.n	80088c0 <_printf_common+0xc8>
 800888a:	2000      	movs	r0, #0
 800888c:	e008      	b.n	80088a0 <_printf_common+0xa8>
 800888e:	2301      	movs	r3, #1
 8008890:	4652      	mov	r2, sl
 8008892:	4649      	mov	r1, r9
 8008894:	4638      	mov	r0, r7
 8008896:	47c0      	blx	r8
 8008898:	3001      	adds	r0, #1
 800889a:	d103      	bne.n	80088a4 <_printf_common+0xac>
 800889c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a4:	3501      	adds	r5, #1
 80088a6:	e7c6      	b.n	8008836 <_printf_common+0x3e>
 80088a8:	18e1      	adds	r1, r4, r3
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	2030      	movs	r0, #48	; 0x30
 80088ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088b2:	4422      	add	r2, r4
 80088b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088bc:	3302      	adds	r3, #2
 80088be:	e7c7      	b.n	8008850 <_printf_common+0x58>
 80088c0:	2301      	movs	r3, #1
 80088c2:	4622      	mov	r2, r4
 80088c4:	4649      	mov	r1, r9
 80088c6:	4638      	mov	r0, r7
 80088c8:	47c0      	blx	r8
 80088ca:	3001      	adds	r0, #1
 80088cc:	d0e6      	beq.n	800889c <_printf_common+0xa4>
 80088ce:	3601      	adds	r6, #1
 80088d0:	e7d9      	b.n	8008886 <_printf_common+0x8e>
	...

080088d4 <_printf_i>:
 80088d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088d8:	460c      	mov	r4, r1
 80088da:	4691      	mov	r9, r2
 80088dc:	7e27      	ldrb	r7, [r4, #24]
 80088de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088e0:	2f78      	cmp	r7, #120	; 0x78
 80088e2:	4680      	mov	r8, r0
 80088e4:	469a      	mov	sl, r3
 80088e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088ea:	d807      	bhi.n	80088fc <_printf_i+0x28>
 80088ec:	2f62      	cmp	r7, #98	; 0x62
 80088ee:	d80a      	bhi.n	8008906 <_printf_i+0x32>
 80088f0:	2f00      	cmp	r7, #0
 80088f2:	f000 80d8 	beq.w	8008aa6 <_printf_i+0x1d2>
 80088f6:	2f58      	cmp	r7, #88	; 0x58
 80088f8:	f000 80a3 	beq.w	8008a42 <_printf_i+0x16e>
 80088fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008904:	e03a      	b.n	800897c <_printf_i+0xa8>
 8008906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800890a:	2b15      	cmp	r3, #21
 800890c:	d8f6      	bhi.n	80088fc <_printf_i+0x28>
 800890e:	a001      	add	r0, pc, #4	; (adr r0, 8008914 <_printf_i+0x40>)
 8008910:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008914:	0800896d 	.word	0x0800896d
 8008918:	08008981 	.word	0x08008981
 800891c:	080088fd 	.word	0x080088fd
 8008920:	080088fd 	.word	0x080088fd
 8008924:	080088fd 	.word	0x080088fd
 8008928:	080088fd 	.word	0x080088fd
 800892c:	08008981 	.word	0x08008981
 8008930:	080088fd 	.word	0x080088fd
 8008934:	080088fd 	.word	0x080088fd
 8008938:	080088fd 	.word	0x080088fd
 800893c:	080088fd 	.word	0x080088fd
 8008940:	08008a8d 	.word	0x08008a8d
 8008944:	080089b1 	.word	0x080089b1
 8008948:	08008a6f 	.word	0x08008a6f
 800894c:	080088fd 	.word	0x080088fd
 8008950:	080088fd 	.word	0x080088fd
 8008954:	08008aaf 	.word	0x08008aaf
 8008958:	080088fd 	.word	0x080088fd
 800895c:	080089b1 	.word	0x080089b1
 8008960:	080088fd 	.word	0x080088fd
 8008964:	080088fd 	.word	0x080088fd
 8008968:	08008a77 	.word	0x08008a77
 800896c:	680b      	ldr	r3, [r1, #0]
 800896e:	1d1a      	adds	r2, r3, #4
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	600a      	str	r2, [r1, #0]
 8008974:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800897c:	2301      	movs	r3, #1
 800897e:	e0a3      	b.n	8008ac8 <_printf_i+0x1f4>
 8008980:	6825      	ldr	r5, [r4, #0]
 8008982:	6808      	ldr	r0, [r1, #0]
 8008984:	062e      	lsls	r6, r5, #24
 8008986:	f100 0304 	add.w	r3, r0, #4
 800898a:	d50a      	bpl.n	80089a2 <_printf_i+0xce>
 800898c:	6805      	ldr	r5, [r0, #0]
 800898e:	600b      	str	r3, [r1, #0]
 8008990:	2d00      	cmp	r5, #0
 8008992:	da03      	bge.n	800899c <_printf_i+0xc8>
 8008994:	232d      	movs	r3, #45	; 0x2d
 8008996:	426d      	negs	r5, r5
 8008998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800899c:	485e      	ldr	r0, [pc, #376]	; (8008b18 <_printf_i+0x244>)
 800899e:	230a      	movs	r3, #10
 80089a0:	e019      	b.n	80089d6 <_printf_i+0x102>
 80089a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089a6:	6805      	ldr	r5, [r0, #0]
 80089a8:	600b      	str	r3, [r1, #0]
 80089aa:	bf18      	it	ne
 80089ac:	b22d      	sxthne	r5, r5
 80089ae:	e7ef      	b.n	8008990 <_printf_i+0xbc>
 80089b0:	680b      	ldr	r3, [r1, #0]
 80089b2:	6825      	ldr	r5, [r4, #0]
 80089b4:	1d18      	adds	r0, r3, #4
 80089b6:	6008      	str	r0, [r1, #0]
 80089b8:	0628      	lsls	r0, r5, #24
 80089ba:	d501      	bpl.n	80089c0 <_printf_i+0xec>
 80089bc:	681d      	ldr	r5, [r3, #0]
 80089be:	e002      	b.n	80089c6 <_printf_i+0xf2>
 80089c0:	0669      	lsls	r1, r5, #25
 80089c2:	d5fb      	bpl.n	80089bc <_printf_i+0xe8>
 80089c4:	881d      	ldrh	r5, [r3, #0]
 80089c6:	4854      	ldr	r0, [pc, #336]	; (8008b18 <_printf_i+0x244>)
 80089c8:	2f6f      	cmp	r7, #111	; 0x6f
 80089ca:	bf0c      	ite	eq
 80089cc:	2308      	moveq	r3, #8
 80089ce:	230a      	movne	r3, #10
 80089d0:	2100      	movs	r1, #0
 80089d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089d6:	6866      	ldr	r6, [r4, #4]
 80089d8:	60a6      	str	r6, [r4, #8]
 80089da:	2e00      	cmp	r6, #0
 80089dc:	bfa2      	ittt	ge
 80089de:	6821      	ldrge	r1, [r4, #0]
 80089e0:	f021 0104 	bicge.w	r1, r1, #4
 80089e4:	6021      	strge	r1, [r4, #0]
 80089e6:	b90d      	cbnz	r5, 80089ec <_printf_i+0x118>
 80089e8:	2e00      	cmp	r6, #0
 80089ea:	d04d      	beq.n	8008a88 <_printf_i+0x1b4>
 80089ec:	4616      	mov	r6, r2
 80089ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80089f2:	fb03 5711 	mls	r7, r3, r1, r5
 80089f6:	5dc7      	ldrb	r7, [r0, r7]
 80089f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089fc:	462f      	mov	r7, r5
 80089fe:	42bb      	cmp	r3, r7
 8008a00:	460d      	mov	r5, r1
 8008a02:	d9f4      	bls.n	80089ee <_printf_i+0x11a>
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	d10b      	bne.n	8008a20 <_printf_i+0x14c>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	07df      	lsls	r7, r3, #31
 8008a0c:	d508      	bpl.n	8008a20 <_printf_i+0x14c>
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	6861      	ldr	r1, [r4, #4]
 8008a12:	4299      	cmp	r1, r3
 8008a14:	bfde      	ittt	le
 8008a16:	2330      	movle	r3, #48	; 0x30
 8008a18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a1c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008a20:	1b92      	subs	r2, r2, r6
 8008a22:	6122      	str	r2, [r4, #16]
 8008a24:	f8cd a000 	str.w	sl, [sp]
 8008a28:	464b      	mov	r3, r9
 8008a2a:	aa03      	add	r2, sp, #12
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	4640      	mov	r0, r8
 8008a30:	f7ff fee2 	bl	80087f8 <_printf_common>
 8008a34:	3001      	adds	r0, #1
 8008a36:	d14c      	bne.n	8008ad2 <_printf_i+0x1fe>
 8008a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a3c:	b004      	add	sp, #16
 8008a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a42:	4835      	ldr	r0, [pc, #212]	; (8008b18 <_printf_i+0x244>)
 8008a44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	680e      	ldr	r6, [r1, #0]
 8008a4c:	061f      	lsls	r7, r3, #24
 8008a4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a52:	600e      	str	r6, [r1, #0]
 8008a54:	d514      	bpl.n	8008a80 <_printf_i+0x1ac>
 8008a56:	07d9      	lsls	r1, r3, #31
 8008a58:	bf44      	itt	mi
 8008a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a5e:	6023      	strmi	r3, [r4, #0]
 8008a60:	b91d      	cbnz	r5, 8008a6a <_printf_i+0x196>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	f023 0320 	bic.w	r3, r3, #32
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	2310      	movs	r3, #16
 8008a6c:	e7b0      	b.n	80089d0 <_printf_i+0xfc>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	f043 0320 	orr.w	r3, r3, #32
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	2378      	movs	r3, #120	; 0x78
 8008a78:	4828      	ldr	r0, [pc, #160]	; (8008b1c <_printf_i+0x248>)
 8008a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a7e:	e7e3      	b.n	8008a48 <_printf_i+0x174>
 8008a80:	065e      	lsls	r6, r3, #25
 8008a82:	bf48      	it	mi
 8008a84:	b2ad      	uxthmi	r5, r5
 8008a86:	e7e6      	b.n	8008a56 <_printf_i+0x182>
 8008a88:	4616      	mov	r6, r2
 8008a8a:	e7bb      	b.n	8008a04 <_printf_i+0x130>
 8008a8c:	680b      	ldr	r3, [r1, #0]
 8008a8e:	6826      	ldr	r6, [r4, #0]
 8008a90:	6960      	ldr	r0, [r4, #20]
 8008a92:	1d1d      	adds	r5, r3, #4
 8008a94:	600d      	str	r5, [r1, #0]
 8008a96:	0635      	lsls	r5, r6, #24
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	d501      	bpl.n	8008aa0 <_printf_i+0x1cc>
 8008a9c:	6018      	str	r0, [r3, #0]
 8008a9e:	e002      	b.n	8008aa6 <_printf_i+0x1d2>
 8008aa0:	0671      	lsls	r1, r6, #25
 8008aa2:	d5fb      	bpl.n	8008a9c <_printf_i+0x1c8>
 8008aa4:	8018      	strh	r0, [r3, #0]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	4616      	mov	r6, r2
 8008aac:	e7ba      	b.n	8008a24 <_printf_i+0x150>
 8008aae:	680b      	ldr	r3, [r1, #0]
 8008ab0:	1d1a      	adds	r2, r3, #4
 8008ab2:	600a      	str	r2, [r1, #0]
 8008ab4:	681e      	ldr	r6, [r3, #0]
 8008ab6:	6862      	ldr	r2, [r4, #4]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7f7 fbb8 	bl	8000230 <memchr>
 8008ac0:	b108      	cbz	r0, 8008ac6 <_printf_i+0x1f2>
 8008ac2:	1b80      	subs	r0, r0, r6
 8008ac4:	6060      	str	r0, [r4, #4]
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	6123      	str	r3, [r4, #16]
 8008aca:	2300      	movs	r3, #0
 8008acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ad0:	e7a8      	b.n	8008a24 <_printf_i+0x150>
 8008ad2:	6923      	ldr	r3, [r4, #16]
 8008ad4:	4632      	mov	r2, r6
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	4640      	mov	r0, r8
 8008ada:	47d0      	blx	sl
 8008adc:	3001      	adds	r0, #1
 8008ade:	d0ab      	beq.n	8008a38 <_printf_i+0x164>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	079b      	lsls	r3, r3, #30
 8008ae4:	d413      	bmi.n	8008b0e <_printf_i+0x23a>
 8008ae6:	68e0      	ldr	r0, [r4, #12]
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	4298      	cmp	r0, r3
 8008aec:	bfb8      	it	lt
 8008aee:	4618      	movlt	r0, r3
 8008af0:	e7a4      	b.n	8008a3c <_printf_i+0x168>
 8008af2:	2301      	movs	r3, #1
 8008af4:	4632      	mov	r2, r6
 8008af6:	4649      	mov	r1, r9
 8008af8:	4640      	mov	r0, r8
 8008afa:	47d0      	blx	sl
 8008afc:	3001      	adds	r0, #1
 8008afe:	d09b      	beq.n	8008a38 <_printf_i+0x164>
 8008b00:	3501      	adds	r5, #1
 8008b02:	68e3      	ldr	r3, [r4, #12]
 8008b04:	9903      	ldr	r1, [sp, #12]
 8008b06:	1a5b      	subs	r3, r3, r1
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	dcf2      	bgt.n	8008af2 <_printf_i+0x21e>
 8008b0c:	e7eb      	b.n	8008ae6 <_printf_i+0x212>
 8008b0e:	2500      	movs	r5, #0
 8008b10:	f104 0619 	add.w	r6, r4, #25
 8008b14:	e7f5      	b.n	8008b02 <_printf_i+0x22e>
 8008b16:	bf00      	nop
 8008b18:	0800de72 	.word	0x0800de72
 8008b1c:	0800de83 	.word	0x0800de83

08008b20 <siprintf>:
 8008b20:	b40e      	push	{r1, r2, r3}
 8008b22:	b500      	push	{lr}
 8008b24:	b09c      	sub	sp, #112	; 0x70
 8008b26:	ab1d      	add	r3, sp, #116	; 0x74
 8008b28:	9002      	str	r0, [sp, #8]
 8008b2a:	9006      	str	r0, [sp, #24]
 8008b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b30:	4809      	ldr	r0, [pc, #36]	; (8008b58 <siprintf+0x38>)
 8008b32:	9107      	str	r1, [sp, #28]
 8008b34:	9104      	str	r1, [sp, #16]
 8008b36:	4909      	ldr	r1, [pc, #36]	; (8008b5c <siprintf+0x3c>)
 8008b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b3c:	9105      	str	r1, [sp, #20]
 8008b3e:	6800      	ldr	r0, [r0, #0]
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	a902      	add	r1, sp, #8
 8008b44:	f001 fb32 	bl	800a1ac <_svfiprintf_r>
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	b01c      	add	sp, #112	; 0x70
 8008b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b54:	b003      	add	sp, #12
 8008b56:	4770      	bx	lr
 8008b58:	20000014 	.word	0x20000014
 8008b5c:	ffff0208 	.word	0xffff0208

08008b60 <quorem>:
 8008b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	6903      	ldr	r3, [r0, #16]
 8008b66:	690c      	ldr	r4, [r1, #16]
 8008b68:	42a3      	cmp	r3, r4
 8008b6a:	4607      	mov	r7, r0
 8008b6c:	f2c0 8081 	blt.w	8008c72 <quorem+0x112>
 8008b70:	3c01      	subs	r4, #1
 8008b72:	f101 0814 	add.w	r8, r1, #20
 8008b76:	f100 0514 	add.w	r5, r0, #20
 8008b7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b7e:	9301      	str	r3, [sp, #4]
 8008b80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b94:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b98:	d331      	bcc.n	8008bfe <quorem+0x9e>
 8008b9a:	f04f 0e00 	mov.w	lr, #0
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	46ac      	mov	ip, r5
 8008ba2:	46f2      	mov	sl, lr
 8008ba4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ba8:	b293      	uxth	r3, r2
 8008baa:	fb06 e303 	mla	r3, r6, r3, lr
 8008bae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	ebaa 0303 	sub.w	r3, sl, r3
 8008bb8:	0c12      	lsrs	r2, r2, #16
 8008bba:	f8dc a000 	ldr.w	sl, [ip]
 8008bbe:	fb06 e202 	mla	r2, r6, r2, lr
 8008bc2:	fa13 f38a 	uxtah	r3, r3, sl
 8008bc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008bca:	fa1f fa82 	uxth.w	sl, r2
 8008bce:	f8dc 2000 	ldr.w	r2, [ip]
 8008bd2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008bd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008be0:	4581      	cmp	r9, r0
 8008be2:	f84c 3b04 	str.w	r3, [ip], #4
 8008be6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bea:	d2db      	bcs.n	8008ba4 <quorem+0x44>
 8008bec:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bf0:	b92b      	cbnz	r3, 8008bfe <quorem+0x9e>
 8008bf2:	9b01      	ldr	r3, [sp, #4]
 8008bf4:	3b04      	subs	r3, #4
 8008bf6:	429d      	cmp	r5, r3
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	d32e      	bcc.n	8008c5a <quorem+0xfa>
 8008bfc:	613c      	str	r4, [r7, #16]
 8008bfe:	4638      	mov	r0, r7
 8008c00:	f001 f8be 	bl	8009d80 <__mcmp>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	db24      	blt.n	8008c52 <quorem+0xf2>
 8008c08:	3601      	adds	r6, #1
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f04f 0c00 	mov.w	ip, #0
 8008c10:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c14:	f8d0 e000 	ldr.w	lr, [r0]
 8008c18:	b293      	uxth	r3, r2
 8008c1a:	ebac 0303 	sub.w	r3, ip, r3
 8008c1e:	0c12      	lsrs	r2, r2, #16
 8008c20:	fa13 f38e 	uxtah	r3, r3, lr
 8008c24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c32:	45c1      	cmp	r9, r8
 8008c34:	f840 3b04 	str.w	r3, [r0], #4
 8008c38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c3c:	d2e8      	bcs.n	8008c10 <quorem+0xb0>
 8008c3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c46:	b922      	cbnz	r2, 8008c52 <quorem+0xf2>
 8008c48:	3b04      	subs	r3, #4
 8008c4a:	429d      	cmp	r5, r3
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	d30a      	bcc.n	8008c66 <quorem+0x106>
 8008c50:	613c      	str	r4, [r7, #16]
 8008c52:	4630      	mov	r0, r6
 8008c54:	b003      	add	sp, #12
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5a:	6812      	ldr	r2, [r2, #0]
 8008c5c:	3b04      	subs	r3, #4
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	d1cc      	bne.n	8008bfc <quorem+0x9c>
 8008c62:	3c01      	subs	r4, #1
 8008c64:	e7c7      	b.n	8008bf6 <quorem+0x96>
 8008c66:	6812      	ldr	r2, [r2, #0]
 8008c68:	3b04      	subs	r3, #4
 8008c6a:	2a00      	cmp	r2, #0
 8008c6c:	d1f0      	bne.n	8008c50 <quorem+0xf0>
 8008c6e:	3c01      	subs	r4, #1
 8008c70:	e7eb      	b.n	8008c4a <quorem+0xea>
 8008c72:	2000      	movs	r0, #0
 8008c74:	e7ee      	b.n	8008c54 <quorem+0xf4>
	...

08008c78 <_dtoa_r>:
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	ed2d 8b02 	vpush	{d8}
 8008c80:	ec57 6b10 	vmov	r6, r7, d0
 8008c84:	b095      	sub	sp, #84	; 0x54
 8008c86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c8c:	9105      	str	r1, [sp, #20]
 8008c8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008c92:	4604      	mov	r4, r0
 8008c94:	9209      	str	r2, [sp, #36]	; 0x24
 8008c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c98:	b975      	cbnz	r5, 8008cb8 <_dtoa_r+0x40>
 8008c9a:	2010      	movs	r0, #16
 8008c9c:	f000 fddc 	bl	8009858 <malloc>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	6260      	str	r0, [r4, #36]	; 0x24
 8008ca4:	b920      	cbnz	r0, 8008cb0 <_dtoa_r+0x38>
 8008ca6:	4bb2      	ldr	r3, [pc, #712]	; (8008f70 <_dtoa_r+0x2f8>)
 8008ca8:	21ea      	movs	r1, #234	; 0xea
 8008caa:	48b2      	ldr	r0, [pc, #712]	; (8008f74 <_dtoa_r+0x2fc>)
 8008cac:	f001 fb8e 	bl	800a3cc <__assert_func>
 8008cb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cb4:	6005      	str	r5, [r0, #0]
 8008cb6:	60c5      	str	r5, [r0, #12]
 8008cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cba:	6819      	ldr	r1, [r3, #0]
 8008cbc:	b151      	cbz	r1, 8008cd4 <_dtoa_r+0x5c>
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	604a      	str	r2, [r1, #4]
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4093      	lsls	r3, r2
 8008cc6:	608b      	str	r3, [r1, #8]
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 fe1b 	bl	8009904 <_Bfree>
 8008cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	1e3b      	subs	r3, r7, #0
 8008cd6:	bfb9      	ittee	lt
 8008cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cdc:	9303      	strlt	r3, [sp, #12]
 8008cde:	2300      	movge	r3, #0
 8008ce0:	f8c8 3000 	strge.w	r3, [r8]
 8008ce4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008ce8:	4ba3      	ldr	r3, [pc, #652]	; (8008f78 <_dtoa_r+0x300>)
 8008cea:	bfbc      	itt	lt
 8008cec:	2201      	movlt	r2, #1
 8008cee:	f8c8 2000 	strlt.w	r2, [r8]
 8008cf2:	ea33 0309 	bics.w	r3, r3, r9
 8008cf6:	d11b      	bne.n	8008d30 <_dtoa_r+0xb8>
 8008cf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d04:	4333      	orrs	r3, r6
 8008d06:	f000 857a 	beq.w	80097fe <_dtoa_r+0xb86>
 8008d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d0c:	b963      	cbnz	r3, 8008d28 <_dtoa_r+0xb0>
 8008d0e:	4b9b      	ldr	r3, [pc, #620]	; (8008f7c <_dtoa_r+0x304>)
 8008d10:	e024      	b.n	8008d5c <_dtoa_r+0xe4>
 8008d12:	4b9b      	ldr	r3, [pc, #620]	; (8008f80 <_dtoa_r+0x308>)
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	3308      	adds	r3, #8
 8008d18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	9800      	ldr	r0, [sp, #0]
 8008d1e:	b015      	add	sp, #84	; 0x54
 8008d20:	ecbd 8b02 	vpop	{d8}
 8008d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d28:	4b94      	ldr	r3, [pc, #592]	; (8008f7c <_dtoa_r+0x304>)
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	3303      	adds	r3, #3
 8008d2e:	e7f3      	b.n	8008d18 <_dtoa_r+0xa0>
 8008d30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d34:	2200      	movs	r2, #0
 8008d36:	ec51 0b17 	vmov	r0, r1, d7
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008d40:	f7f7 feea 	bl	8000b18 <__aeabi_dcmpeq>
 8008d44:	4680      	mov	r8, r0
 8008d46:	b158      	cbz	r0, 8008d60 <_dtoa_r+0xe8>
 8008d48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8551 	beq.w	80097f8 <_dtoa_r+0xb80>
 8008d56:	488b      	ldr	r0, [pc, #556]	; (8008f84 <_dtoa_r+0x30c>)
 8008d58:	6018      	str	r0, [r3, #0]
 8008d5a:	1e43      	subs	r3, r0, #1
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	e7dd      	b.n	8008d1c <_dtoa_r+0xa4>
 8008d60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008d64:	aa12      	add	r2, sp, #72	; 0x48
 8008d66:	a913      	add	r1, sp, #76	; 0x4c
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f001 f8ad 	bl	8009ec8 <__d2b>
 8008d6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d72:	4683      	mov	fp, r0
 8008d74:	2d00      	cmp	r5, #0
 8008d76:	d07c      	beq.n	8008e72 <_dtoa_r+0x1fa>
 8008d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008d86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d92:	4b7d      	ldr	r3, [pc, #500]	; (8008f88 <_dtoa_r+0x310>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	4630      	mov	r0, r6
 8008d98:	4639      	mov	r1, r7
 8008d9a:	f7f7 fa9d 	bl	80002d8 <__aeabi_dsub>
 8008d9e:	a36e      	add	r3, pc, #440	; (adr r3, 8008f58 <_dtoa_r+0x2e0>)
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f7f7 fc50 	bl	8000648 <__aeabi_dmul>
 8008da8:	a36d      	add	r3, pc, #436	; (adr r3, 8008f60 <_dtoa_r+0x2e8>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fa95 	bl	80002dc <__adddf3>
 8008db2:	4606      	mov	r6, r0
 8008db4:	4628      	mov	r0, r5
 8008db6:	460f      	mov	r7, r1
 8008db8:	f7f7 fbdc 	bl	8000574 <__aeabi_i2d>
 8008dbc:	a36a      	add	r3, pc, #424	; (adr r3, 8008f68 <_dtoa_r+0x2f0>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f7f7 fc41 	bl	8000648 <__aeabi_dmul>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4630      	mov	r0, r6
 8008dcc:	4639      	mov	r1, r7
 8008dce:	f7f7 fa85 	bl	80002dc <__adddf3>
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	460f      	mov	r7, r1
 8008dd6:	f7f7 fee7 	bl	8000ba8 <__aeabi_d2iz>
 8008dda:	2200      	movs	r2, #0
 8008ddc:	4682      	mov	sl, r0
 8008dde:	2300      	movs	r3, #0
 8008de0:	4630      	mov	r0, r6
 8008de2:	4639      	mov	r1, r7
 8008de4:	f7f7 fea2 	bl	8000b2c <__aeabi_dcmplt>
 8008de8:	b148      	cbz	r0, 8008dfe <_dtoa_r+0x186>
 8008dea:	4650      	mov	r0, sl
 8008dec:	f7f7 fbc2 	bl	8000574 <__aeabi_i2d>
 8008df0:	4632      	mov	r2, r6
 8008df2:	463b      	mov	r3, r7
 8008df4:	f7f7 fe90 	bl	8000b18 <__aeabi_dcmpeq>
 8008df8:	b908      	cbnz	r0, 8008dfe <_dtoa_r+0x186>
 8008dfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008dfe:	f1ba 0f16 	cmp.w	sl, #22
 8008e02:	d854      	bhi.n	8008eae <_dtoa_r+0x236>
 8008e04:	4b61      	ldr	r3, [pc, #388]	; (8008f8c <_dtoa_r+0x314>)
 8008e06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e12:	f7f7 fe8b 	bl	8000b2c <__aeabi_dcmplt>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d04b      	beq.n	8008eb2 <_dtoa_r+0x23a>
 8008e1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008e1e:	2300      	movs	r3, #0
 8008e20:	930e      	str	r3, [sp, #56]	; 0x38
 8008e22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e24:	1b5d      	subs	r5, r3, r5
 8008e26:	1e6b      	subs	r3, r5, #1
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	bf43      	ittte	mi
 8008e2c:	2300      	movmi	r3, #0
 8008e2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008e32:	9304      	strmi	r3, [sp, #16]
 8008e34:	f04f 0800 	movpl.w	r8, #0
 8008e38:	f1ba 0f00 	cmp.w	sl, #0
 8008e3c:	db3b      	blt.n	8008eb6 <_dtoa_r+0x23e>
 8008e3e:	9b04      	ldr	r3, [sp, #16]
 8008e40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008e44:	4453      	add	r3, sl
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9306      	str	r3, [sp, #24]
 8008e4c:	9b05      	ldr	r3, [sp, #20]
 8008e4e:	2b09      	cmp	r3, #9
 8008e50:	d869      	bhi.n	8008f26 <_dtoa_r+0x2ae>
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	bfc4      	itt	gt
 8008e56:	3b04      	subgt	r3, #4
 8008e58:	9305      	strgt	r3, [sp, #20]
 8008e5a:	9b05      	ldr	r3, [sp, #20]
 8008e5c:	f1a3 0302 	sub.w	r3, r3, #2
 8008e60:	bfcc      	ite	gt
 8008e62:	2500      	movgt	r5, #0
 8008e64:	2501      	movle	r5, #1
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d869      	bhi.n	8008f3e <_dtoa_r+0x2c6>
 8008e6a:	e8df f003 	tbb	[pc, r3]
 8008e6e:	4e2c      	.short	0x4e2c
 8008e70:	5a4c      	.short	0x5a4c
 8008e72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008e76:	441d      	add	r5, r3
 8008e78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e7c:	2b20      	cmp	r3, #32
 8008e7e:	bfc1      	itttt	gt
 8008e80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e88:	fa09 f303 	lslgt.w	r3, r9, r3
 8008e8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e90:	bfda      	itte	le
 8008e92:	f1c3 0320 	rsble	r3, r3, #32
 8008e96:	fa06 f003 	lslle.w	r0, r6, r3
 8008e9a:	4318      	orrgt	r0, r3
 8008e9c:	f7f7 fb5a 	bl	8000554 <__aeabi_ui2d>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ea8:	3d01      	subs	r5, #1
 8008eaa:	9310      	str	r3, [sp, #64]	; 0x40
 8008eac:	e771      	b.n	8008d92 <_dtoa_r+0x11a>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e7b6      	b.n	8008e20 <_dtoa_r+0x1a8>
 8008eb2:	900e      	str	r0, [sp, #56]	; 0x38
 8008eb4:	e7b5      	b.n	8008e22 <_dtoa_r+0x1aa>
 8008eb6:	f1ca 0300 	rsb	r3, sl, #0
 8008eba:	9306      	str	r3, [sp, #24]
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	eba8 080a 	sub.w	r8, r8, sl
 8008ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ec4:	e7c2      	b.n	8008e4c <_dtoa_r+0x1d4>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9308      	str	r3, [sp, #32]
 8008eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dc39      	bgt.n	8008f44 <_dtoa_r+0x2cc>
 8008ed0:	f04f 0901 	mov.w	r9, #1
 8008ed4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ed8:	464b      	mov	r3, r9
 8008eda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008ede:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	6042      	str	r2, [r0, #4]
 8008ee4:	2204      	movs	r2, #4
 8008ee6:	f102 0614 	add.w	r6, r2, #20
 8008eea:	429e      	cmp	r6, r3
 8008eec:	6841      	ldr	r1, [r0, #4]
 8008eee:	d92f      	bls.n	8008f50 <_dtoa_r+0x2d8>
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fcc7 	bl	8009884 <_Balloc>
 8008ef6:	9000      	str	r0, [sp, #0]
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d14b      	bne.n	8008f94 <_dtoa_r+0x31c>
 8008efc:	4b24      	ldr	r3, [pc, #144]	; (8008f90 <_dtoa_r+0x318>)
 8008efe:	4602      	mov	r2, r0
 8008f00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f04:	e6d1      	b.n	8008caa <_dtoa_r+0x32>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e7de      	b.n	8008ec8 <_dtoa_r+0x250>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	9308      	str	r3, [sp, #32]
 8008f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f10:	eb0a 0903 	add.w	r9, sl, r3
 8008f14:	f109 0301 	add.w	r3, r9, #1
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	bfb8      	it	lt
 8008f1e:	2301      	movlt	r3, #1
 8008f20:	e7dd      	b.n	8008ede <_dtoa_r+0x266>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e7f2      	b.n	8008f0c <_dtoa_r+0x294>
 8008f26:	2501      	movs	r5, #1
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9305      	str	r3, [sp, #20]
 8008f2c:	9508      	str	r5, [sp, #32]
 8008f2e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008f32:	2200      	movs	r2, #0
 8008f34:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f38:	2312      	movs	r3, #18
 8008f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f3c:	e7cf      	b.n	8008ede <_dtoa_r+0x266>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	9308      	str	r3, [sp, #32]
 8008f42:	e7f4      	b.n	8008f2e <_dtoa_r+0x2b6>
 8008f44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008f48:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f4c:	464b      	mov	r3, r9
 8008f4e:	e7c6      	b.n	8008ede <_dtoa_r+0x266>
 8008f50:	3101      	adds	r1, #1
 8008f52:	6041      	str	r1, [r0, #4]
 8008f54:	0052      	lsls	r2, r2, #1
 8008f56:	e7c6      	b.n	8008ee6 <_dtoa_r+0x26e>
 8008f58:	636f4361 	.word	0x636f4361
 8008f5c:	3fd287a7 	.word	0x3fd287a7
 8008f60:	8b60c8b3 	.word	0x8b60c8b3
 8008f64:	3fc68a28 	.word	0x3fc68a28
 8008f68:	509f79fb 	.word	0x509f79fb
 8008f6c:	3fd34413 	.word	0x3fd34413
 8008f70:	0800dea1 	.word	0x0800dea1
 8008f74:	0800deb8 	.word	0x0800deb8
 8008f78:	7ff00000 	.word	0x7ff00000
 8008f7c:	0800de9d 	.word	0x0800de9d
 8008f80:	0800de94 	.word	0x0800de94
 8008f84:	0800de71 	.word	0x0800de71
 8008f88:	3ff80000 	.word	0x3ff80000
 8008f8c:	0800dfb0 	.word	0x0800dfb0
 8008f90:	0800df17 	.word	0x0800df17
 8008f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f96:	9a00      	ldr	r2, [sp, #0]
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	9b01      	ldr	r3, [sp, #4]
 8008f9c:	2b0e      	cmp	r3, #14
 8008f9e:	f200 80ad 	bhi.w	80090fc <_dtoa_r+0x484>
 8008fa2:	2d00      	cmp	r5, #0
 8008fa4:	f000 80aa 	beq.w	80090fc <_dtoa_r+0x484>
 8008fa8:	f1ba 0f00 	cmp.w	sl, #0
 8008fac:	dd36      	ble.n	800901c <_dtoa_r+0x3a4>
 8008fae:	4ac3      	ldr	r2, [pc, #780]	; (80092bc <_dtoa_r+0x644>)
 8008fb0:	f00a 030f 	and.w	r3, sl, #15
 8008fb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008fb8:	ed93 7b00 	vldr	d7, [r3]
 8008fbc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008fc0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008fc4:	eeb0 8a47 	vmov.f32	s16, s14
 8008fc8:	eef0 8a67 	vmov.f32	s17, s15
 8008fcc:	d016      	beq.n	8008ffc <_dtoa_r+0x384>
 8008fce:	4bbc      	ldr	r3, [pc, #752]	; (80092c0 <_dtoa_r+0x648>)
 8008fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fd8:	f7f7 fc60 	bl	800089c <__aeabi_ddiv>
 8008fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe0:	f007 070f 	and.w	r7, r7, #15
 8008fe4:	2503      	movs	r5, #3
 8008fe6:	4eb6      	ldr	r6, [pc, #728]	; (80092c0 <_dtoa_r+0x648>)
 8008fe8:	b957      	cbnz	r7, 8009000 <_dtoa_r+0x388>
 8008fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fee:	ec53 2b18 	vmov	r2, r3, d8
 8008ff2:	f7f7 fc53 	bl	800089c <__aeabi_ddiv>
 8008ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ffa:	e029      	b.n	8009050 <_dtoa_r+0x3d8>
 8008ffc:	2502      	movs	r5, #2
 8008ffe:	e7f2      	b.n	8008fe6 <_dtoa_r+0x36e>
 8009000:	07f9      	lsls	r1, r7, #31
 8009002:	d508      	bpl.n	8009016 <_dtoa_r+0x39e>
 8009004:	ec51 0b18 	vmov	r0, r1, d8
 8009008:	e9d6 2300 	ldrd	r2, r3, [r6]
 800900c:	f7f7 fb1c 	bl	8000648 <__aeabi_dmul>
 8009010:	ec41 0b18 	vmov	d8, r0, r1
 8009014:	3501      	adds	r5, #1
 8009016:	107f      	asrs	r7, r7, #1
 8009018:	3608      	adds	r6, #8
 800901a:	e7e5      	b.n	8008fe8 <_dtoa_r+0x370>
 800901c:	f000 80a6 	beq.w	800916c <_dtoa_r+0x4f4>
 8009020:	f1ca 0600 	rsb	r6, sl, #0
 8009024:	4ba5      	ldr	r3, [pc, #660]	; (80092bc <_dtoa_r+0x644>)
 8009026:	4fa6      	ldr	r7, [pc, #664]	; (80092c0 <_dtoa_r+0x648>)
 8009028:	f006 020f 	and.w	r2, r6, #15
 800902c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009038:	f7f7 fb06 	bl	8000648 <__aeabi_dmul>
 800903c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009040:	1136      	asrs	r6, r6, #4
 8009042:	2300      	movs	r3, #0
 8009044:	2502      	movs	r5, #2
 8009046:	2e00      	cmp	r6, #0
 8009048:	f040 8085 	bne.w	8009156 <_dtoa_r+0x4de>
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1d2      	bne.n	8008ff6 <_dtoa_r+0x37e>
 8009050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 808c 	beq.w	8009170 <_dtoa_r+0x4f8>
 8009058:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800905c:	4b99      	ldr	r3, [pc, #612]	; (80092c4 <_dtoa_r+0x64c>)
 800905e:	2200      	movs	r2, #0
 8009060:	4630      	mov	r0, r6
 8009062:	4639      	mov	r1, r7
 8009064:	f7f7 fd62 	bl	8000b2c <__aeabi_dcmplt>
 8009068:	2800      	cmp	r0, #0
 800906a:	f000 8081 	beq.w	8009170 <_dtoa_r+0x4f8>
 800906e:	9b01      	ldr	r3, [sp, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d07d      	beq.n	8009170 <_dtoa_r+0x4f8>
 8009074:	f1b9 0f00 	cmp.w	r9, #0
 8009078:	dd3c      	ble.n	80090f4 <_dtoa_r+0x47c>
 800907a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800907e:	9307      	str	r3, [sp, #28]
 8009080:	2200      	movs	r2, #0
 8009082:	4b91      	ldr	r3, [pc, #580]	; (80092c8 <_dtoa_r+0x650>)
 8009084:	4630      	mov	r0, r6
 8009086:	4639      	mov	r1, r7
 8009088:	f7f7 fade 	bl	8000648 <__aeabi_dmul>
 800908c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009090:	3501      	adds	r5, #1
 8009092:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009096:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800909a:	4628      	mov	r0, r5
 800909c:	f7f7 fa6a 	bl	8000574 <__aeabi_i2d>
 80090a0:	4632      	mov	r2, r6
 80090a2:	463b      	mov	r3, r7
 80090a4:	f7f7 fad0 	bl	8000648 <__aeabi_dmul>
 80090a8:	4b88      	ldr	r3, [pc, #544]	; (80092cc <_dtoa_r+0x654>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	f7f7 f916 	bl	80002dc <__adddf3>
 80090b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80090b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090b8:	9303      	str	r3, [sp, #12]
 80090ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d15c      	bne.n	800917a <_dtoa_r+0x502>
 80090c0:	4b83      	ldr	r3, [pc, #524]	; (80092d0 <_dtoa_r+0x658>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	4630      	mov	r0, r6
 80090c6:	4639      	mov	r1, r7
 80090c8:	f7f7 f906 	bl	80002d8 <__aeabi_dsub>
 80090cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090d0:	4606      	mov	r6, r0
 80090d2:	460f      	mov	r7, r1
 80090d4:	f7f7 fd48 	bl	8000b68 <__aeabi_dcmpgt>
 80090d8:	2800      	cmp	r0, #0
 80090da:	f040 8296 	bne.w	800960a <_dtoa_r+0x992>
 80090de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80090e2:	4630      	mov	r0, r6
 80090e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 fd1f 	bl	8000b2c <__aeabi_dcmplt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	f040 8288 	bne.w	8009604 <_dtoa_r+0x98c>
 80090f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f2c0 8158 	blt.w	80093b4 <_dtoa_r+0x73c>
 8009104:	f1ba 0f0e 	cmp.w	sl, #14
 8009108:	f300 8154 	bgt.w	80093b4 <_dtoa_r+0x73c>
 800910c:	4b6b      	ldr	r3, [pc, #428]	; (80092bc <_dtoa_r+0x644>)
 800910e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009112:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009118:	2b00      	cmp	r3, #0
 800911a:	f280 80e3 	bge.w	80092e4 <_dtoa_r+0x66c>
 800911e:	9b01      	ldr	r3, [sp, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	f300 80df 	bgt.w	80092e4 <_dtoa_r+0x66c>
 8009126:	f040 826d 	bne.w	8009604 <_dtoa_r+0x98c>
 800912a:	4b69      	ldr	r3, [pc, #420]	; (80092d0 <_dtoa_r+0x658>)
 800912c:	2200      	movs	r2, #0
 800912e:	4640      	mov	r0, r8
 8009130:	4649      	mov	r1, r9
 8009132:	f7f7 fa89 	bl	8000648 <__aeabi_dmul>
 8009136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800913a:	f7f7 fd0b 	bl	8000b54 <__aeabi_dcmpge>
 800913e:	9e01      	ldr	r6, [sp, #4]
 8009140:	4637      	mov	r7, r6
 8009142:	2800      	cmp	r0, #0
 8009144:	f040 8243 	bne.w	80095ce <_dtoa_r+0x956>
 8009148:	9d00      	ldr	r5, [sp, #0]
 800914a:	2331      	movs	r3, #49	; 0x31
 800914c:	f805 3b01 	strb.w	r3, [r5], #1
 8009150:	f10a 0a01 	add.w	sl, sl, #1
 8009154:	e23f      	b.n	80095d6 <_dtoa_r+0x95e>
 8009156:	07f2      	lsls	r2, r6, #31
 8009158:	d505      	bpl.n	8009166 <_dtoa_r+0x4ee>
 800915a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800915e:	f7f7 fa73 	bl	8000648 <__aeabi_dmul>
 8009162:	3501      	adds	r5, #1
 8009164:	2301      	movs	r3, #1
 8009166:	1076      	asrs	r6, r6, #1
 8009168:	3708      	adds	r7, #8
 800916a:	e76c      	b.n	8009046 <_dtoa_r+0x3ce>
 800916c:	2502      	movs	r5, #2
 800916e:	e76f      	b.n	8009050 <_dtoa_r+0x3d8>
 8009170:	9b01      	ldr	r3, [sp, #4]
 8009172:	f8cd a01c 	str.w	sl, [sp, #28]
 8009176:	930c      	str	r3, [sp, #48]	; 0x30
 8009178:	e78d      	b.n	8009096 <_dtoa_r+0x41e>
 800917a:	9900      	ldr	r1, [sp, #0]
 800917c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800917e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009180:	4b4e      	ldr	r3, [pc, #312]	; (80092bc <_dtoa_r+0x644>)
 8009182:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009186:	4401      	add	r1, r0
 8009188:	9102      	str	r1, [sp, #8]
 800918a:	9908      	ldr	r1, [sp, #32]
 800918c:	eeb0 8a47 	vmov.f32	s16, s14
 8009190:	eef0 8a67 	vmov.f32	s17, s15
 8009194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009198:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800919c:	2900      	cmp	r1, #0
 800919e:	d045      	beq.n	800922c <_dtoa_r+0x5b4>
 80091a0:	494c      	ldr	r1, [pc, #304]	; (80092d4 <_dtoa_r+0x65c>)
 80091a2:	2000      	movs	r0, #0
 80091a4:	f7f7 fb7a 	bl	800089c <__aeabi_ddiv>
 80091a8:	ec53 2b18 	vmov	r2, r3, d8
 80091ac:	f7f7 f894 	bl	80002d8 <__aeabi_dsub>
 80091b0:	9d00      	ldr	r5, [sp, #0]
 80091b2:	ec41 0b18 	vmov	d8, r0, r1
 80091b6:	4639      	mov	r1, r7
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7f7 fcf5 	bl	8000ba8 <__aeabi_d2iz>
 80091be:	900c      	str	r0, [sp, #48]	; 0x30
 80091c0:	f7f7 f9d8 	bl	8000574 <__aeabi_i2d>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4630      	mov	r0, r6
 80091ca:	4639      	mov	r1, r7
 80091cc:	f7f7 f884 	bl	80002d8 <__aeabi_dsub>
 80091d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091d2:	3330      	adds	r3, #48	; 0x30
 80091d4:	f805 3b01 	strb.w	r3, [r5], #1
 80091d8:	ec53 2b18 	vmov	r2, r3, d8
 80091dc:	4606      	mov	r6, r0
 80091de:	460f      	mov	r7, r1
 80091e0:	f7f7 fca4 	bl	8000b2c <__aeabi_dcmplt>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d165      	bne.n	80092b4 <_dtoa_r+0x63c>
 80091e8:	4632      	mov	r2, r6
 80091ea:	463b      	mov	r3, r7
 80091ec:	4935      	ldr	r1, [pc, #212]	; (80092c4 <_dtoa_r+0x64c>)
 80091ee:	2000      	movs	r0, #0
 80091f0:	f7f7 f872 	bl	80002d8 <__aeabi_dsub>
 80091f4:	ec53 2b18 	vmov	r2, r3, d8
 80091f8:	f7f7 fc98 	bl	8000b2c <__aeabi_dcmplt>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f040 80b9 	bne.w	8009374 <_dtoa_r+0x6fc>
 8009202:	9b02      	ldr	r3, [sp, #8]
 8009204:	429d      	cmp	r5, r3
 8009206:	f43f af75 	beq.w	80090f4 <_dtoa_r+0x47c>
 800920a:	4b2f      	ldr	r3, [pc, #188]	; (80092c8 <_dtoa_r+0x650>)
 800920c:	ec51 0b18 	vmov	r0, r1, d8
 8009210:	2200      	movs	r2, #0
 8009212:	f7f7 fa19 	bl	8000648 <__aeabi_dmul>
 8009216:	4b2c      	ldr	r3, [pc, #176]	; (80092c8 <_dtoa_r+0x650>)
 8009218:	ec41 0b18 	vmov	d8, r0, r1
 800921c:	2200      	movs	r2, #0
 800921e:	4630      	mov	r0, r6
 8009220:	4639      	mov	r1, r7
 8009222:	f7f7 fa11 	bl	8000648 <__aeabi_dmul>
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	e7c4      	b.n	80091b6 <_dtoa_r+0x53e>
 800922c:	ec51 0b17 	vmov	r0, r1, d7
 8009230:	f7f7 fa0a 	bl	8000648 <__aeabi_dmul>
 8009234:	9b02      	ldr	r3, [sp, #8]
 8009236:	9d00      	ldr	r5, [sp, #0]
 8009238:	930c      	str	r3, [sp, #48]	; 0x30
 800923a:	ec41 0b18 	vmov	d8, r0, r1
 800923e:	4639      	mov	r1, r7
 8009240:	4630      	mov	r0, r6
 8009242:	f7f7 fcb1 	bl	8000ba8 <__aeabi_d2iz>
 8009246:	9011      	str	r0, [sp, #68]	; 0x44
 8009248:	f7f7 f994 	bl	8000574 <__aeabi_i2d>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 f840 	bl	80002d8 <__aeabi_dsub>
 8009258:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800925a:	3330      	adds	r3, #48	; 0x30
 800925c:	f805 3b01 	strb.w	r3, [r5], #1
 8009260:	9b02      	ldr	r3, [sp, #8]
 8009262:	429d      	cmp	r5, r3
 8009264:	4606      	mov	r6, r0
 8009266:	460f      	mov	r7, r1
 8009268:	f04f 0200 	mov.w	r2, #0
 800926c:	d134      	bne.n	80092d8 <_dtoa_r+0x660>
 800926e:	4b19      	ldr	r3, [pc, #100]	; (80092d4 <_dtoa_r+0x65c>)
 8009270:	ec51 0b18 	vmov	r0, r1, d8
 8009274:	f7f7 f832 	bl	80002dc <__adddf3>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4630      	mov	r0, r6
 800927e:	4639      	mov	r1, r7
 8009280:	f7f7 fc72 	bl	8000b68 <__aeabi_dcmpgt>
 8009284:	2800      	cmp	r0, #0
 8009286:	d175      	bne.n	8009374 <_dtoa_r+0x6fc>
 8009288:	ec53 2b18 	vmov	r2, r3, d8
 800928c:	4911      	ldr	r1, [pc, #68]	; (80092d4 <_dtoa_r+0x65c>)
 800928e:	2000      	movs	r0, #0
 8009290:	f7f7 f822 	bl	80002d8 <__aeabi_dsub>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4630      	mov	r0, r6
 800929a:	4639      	mov	r1, r7
 800929c:	f7f7 fc46 	bl	8000b2c <__aeabi_dcmplt>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	f43f af27 	beq.w	80090f4 <_dtoa_r+0x47c>
 80092a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092a8:	1e6b      	subs	r3, r5, #1
 80092aa:	930c      	str	r3, [sp, #48]	; 0x30
 80092ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092b0:	2b30      	cmp	r3, #48	; 0x30
 80092b2:	d0f8      	beq.n	80092a6 <_dtoa_r+0x62e>
 80092b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80092b8:	e04a      	b.n	8009350 <_dtoa_r+0x6d8>
 80092ba:	bf00      	nop
 80092bc:	0800dfb0 	.word	0x0800dfb0
 80092c0:	0800df88 	.word	0x0800df88
 80092c4:	3ff00000 	.word	0x3ff00000
 80092c8:	40240000 	.word	0x40240000
 80092cc:	401c0000 	.word	0x401c0000
 80092d0:	40140000 	.word	0x40140000
 80092d4:	3fe00000 	.word	0x3fe00000
 80092d8:	4baf      	ldr	r3, [pc, #700]	; (8009598 <_dtoa_r+0x920>)
 80092da:	f7f7 f9b5 	bl	8000648 <__aeabi_dmul>
 80092de:	4606      	mov	r6, r0
 80092e0:	460f      	mov	r7, r1
 80092e2:	e7ac      	b.n	800923e <_dtoa_r+0x5c6>
 80092e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80092e8:	9d00      	ldr	r5, [sp, #0]
 80092ea:	4642      	mov	r2, r8
 80092ec:	464b      	mov	r3, r9
 80092ee:	4630      	mov	r0, r6
 80092f0:	4639      	mov	r1, r7
 80092f2:	f7f7 fad3 	bl	800089c <__aeabi_ddiv>
 80092f6:	f7f7 fc57 	bl	8000ba8 <__aeabi_d2iz>
 80092fa:	9002      	str	r0, [sp, #8]
 80092fc:	f7f7 f93a 	bl	8000574 <__aeabi_i2d>
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	f7f7 f9a0 	bl	8000648 <__aeabi_dmul>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4630      	mov	r0, r6
 800930e:	4639      	mov	r1, r7
 8009310:	f7f6 ffe2 	bl	80002d8 <__aeabi_dsub>
 8009314:	9e02      	ldr	r6, [sp, #8]
 8009316:	9f01      	ldr	r7, [sp, #4]
 8009318:	3630      	adds	r6, #48	; 0x30
 800931a:	f805 6b01 	strb.w	r6, [r5], #1
 800931e:	9e00      	ldr	r6, [sp, #0]
 8009320:	1bae      	subs	r6, r5, r6
 8009322:	42b7      	cmp	r7, r6
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	d137      	bne.n	800939a <_dtoa_r+0x722>
 800932a:	f7f6 ffd7 	bl	80002dc <__adddf3>
 800932e:	4642      	mov	r2, r8
 8009330:	464b      	mov	r3, r9
 8009332:	4606      	mov	r6, r0
 8009334:	460f      	mov	r7, r1
 8009336:	f7f7 fc17 	bl	8000b68 <__aeabi_dcmpgt>
 800933a:	b9c8      	cbnz	r0, 8009370 <_dtoa_r+0x6f8>
 800933c:	4642      	mov	r2, r8
 800933e:	464b      	mov	r3, r9
 8009340:	4630      	mov	r0, r6
 8009342:	4639      	mov	r1, r7
 8009344:	f7f7 fbe8 	bl	8000b18 <__aeabi_dcmpeq>
 8009348:	b110      	cbz	r0, 8009350 <_dtoa_r+0x6d8>
 800934a:	9b02      	ldr	r3, [sp, #8]
 800934c:	07d9      	lsls	r1, r3, #31
 800934e:	d40f      	bmi.n	8009370 <_dtoa_r+0x6f8>
 8009350:	4620      	mov	r0, r4
 8009352:	4659      	mov	r1, fp
 8009354:	f000 fad6 	bl	8009904 <_Bfree>
 8009358:	2300      	movs	r3, #0
 800935a:	702b      	strb	r3, [r5, #0]
 800935c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800935e:	f10a 0001 	add.w	r0, sl, #1
 8009362:	6018      	str	r0, [r3, #0]
 8009364:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009366:	2b00      	cmp	r3, #0
 8009368:	f43f acd8 	beq.w	8008d1c <_dtoa_r+0xa4>
 800936c:	601d      	str	r5, [r3, #0]
 800936e:	e4d5      	b.n	8008d1c <_dtoa_r+0xa4>
 8009370:	f8cd a01c 	str.w	sl, [sp, #28]
 8009374:	462b      	mov	r3, r5
 8009376:	461d      	mov	r5, r3
 8009378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800937c:	2a39      	cmp	r2, #57	; 0x39
 800937e:	d108      	bne.n	8009392 <_dtoa_r+0x71a>
 8009380:	9a00      	ldr	r2, [sp, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d1f7      	bne.n	8009376 <_dtoa_r+0x6fe>
 8009386:	9a07      	ldr	r2, [sp, #28]
 8009388:	9900      	ldr	r1, [sp, #0]
 800938a:	3201      	adds	r2, #1
 800938c:	9207      	str	r2, [sp, #28]
 800938e:	2230      	movs	r2, #48	; 0x30
 8009390:	700a      	strb	r2, [r1, #0]
 8009392:	781a      	ldrb	r2, [r3, #0]
 8009394:	3201      	adds	r2, #1
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	e78c      	b.n	80092b4 <_dtoa_r+0x63c>
 800939a:	4b7f      	ldr	r3, [pc, #508]	; (8009598 <_dtoa_r+0x920>)
 800939c:	2200      	movs	r2, #0
 800939e:	f7f7 f953 	bl	8000648 <__aeabi_dmul>
 80093a2:	2200      	movs	r2, #0
 80093a4:	2300      	movs	r3, #0
 80093a6:	4606      	mov	r6, r0
 80093a8:	460f      	mov	r7, r1
 80093aa:	f7f7 fbb5 	bl	8000b18 <__aeabi_dcmpeq>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d09b      	beq.n	80092ea <_dtoa_r+0x672>
 80093b2:	e7cd      	b.n	8009350 <_dtoa_r+0x6d8>
 80093b4:	9a08      	ldr	r2, [sp, #32]
 80093b6:	2a00      	cmp	r2, #0
 80093b8:	f000 80c4 	beq.w	8009544 <_dtoa_r+0x8cc>
 80093bc:	9a05      	ldr	r2, [sp, #20]
 80093be:	2a01      	cmp	r2, #1
 80093c0:	f300 80a8 	bgt.w	8009514 <_dtoa_r+0x89c>
 80093c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093c6:	2a00      	cmp	r2, #0
 80093c8:	f000 80a0 	beq.w	800950c <_dtoa_r+0x894>
 80093cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093d0:	9e06      	ldr	r6, [sp, #24]
 80093d2:	4645      	mov	r5, r8
 80093d4:	9a04      	ldr	r2, [sp, #16]
 80093d6:	2101      	movs	r1, #1
 80093d8:	441a      	add	r2, r3
 80093da:	4620      	mov	r0, r4
 80093dc:	4498      	add	r8, r3
 80093de:	9204      	str	r2, [sp, #16]
 80093e0:	f000 fb4c 	bl	8009a7c <__i2b>
 80093e4:	4607      	mov	r7, r0
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	dd0b      	ble.n	8009402 <_dtoa_r+0x78a>
 80093ea:	9b04      	ldr	r3, [sp, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dd08      	ble.n	8009402 <_dtoa_r+0x78a>
 80093f0:	42ab      	cmp	r3, r5
 80093f2:	9a04      	ldr	r2, [sp, #16]
 80093f4:	bfa8      	it	ge
 80093f6:	462b      	movge	r3, r5
 80093f8:	eba8 0803 	sub.w	r8, r8, r3
 80093fc:	1aed      	subs	r5, r5, r3
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	9b06      	ldr	r3, [sp, #24]
 8009404:	b1fb      	cbz	r3, 8009446 <_dtoa_r+0x7ce>
 8009406:	9b08      	ldr	r3, [sp, #32]
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 809f 	beq.w	800954c <_dtoa_r+0x8d4>
 800940e:	2e00      	cmp	r6, #0
 8009410:	dd11      	ble.n	8009436 <_dtoa_r+0x7be>
 8009412:	4639      	mov	r1, r7
 8009414:	4632      	mov	r2, r6
 8009416:	4620      	mov	r0, r4
 8009418:	f000 fbec 	bl	8009bf4 <__pow5mult>
 800941c:	465a      	mov	r2, fp
 800941e:	4601      	mov	r1, r0
 8009420:	4607      	mov	r7, r0
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fb40 	bl	8009aa8 <__multiply>
 8009428:	4659      	mov	r1, fp
 800942a:	9007      	str	r0, [sp, #28]
 800942c:	4620      	mov	r0, r4
 800942e:	f000 fa69 	bl	8009904 <_Bfree>
 8009432:	9b07      	ldr	r3, [sp, #28]
 8009434:	469b      	mov	fp, r3
 8009436:	9b06      	ldr	r3, [sp, #24]
 8009438:	1b9a      	subs	r2, r3, r6
 800943a:	d004      	beq.n	8009446 <_dtoa_r+0x7ce>
 800943c:	4659      	mov	r1, fp
 800943e:	4620      	mov	r0, r4
 8009440:	f000 fbd8 	bl	8009bf4 <__pow5mult>
 8009444:	4683      	mov	fp, r0
 8009446:	2101      	movs	r1, #1
 8009448:	4620      	mov	r0, r4
 800944a:	f000 fb17 	bl	8009a7c <__i2b>
 800944e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009450:	2b00      	cmp	r3, #0
 8009452:	4606      	mov	r6, r0
 8009454:	dd7c      	ble.n	8009550 <_dtoa_r+0x8d8>
 8009456:	461a      	mov	r2, r3
 8009458:	4601      	mov	r1, r0
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fbca 	bl	8009bf4 <__pow5mult>
 8009460:	9b05      	ldr	r3, [sp, #20]
 8009462:	2b01      	cmp	r3, #1
 8009464:	4606      	mov	r6, r0
 8009466:	dd76      	ble.n	8009556 <_dtoa_r+0x8de>
 8009468:	2300      	movs	r3, #0
 800946a:	9306      	str	r3, [sp, #24]
 800946c:	6933      	ldr	r3, [r6, #16]
 800946e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009472:	6918      	ldr	r0, [r3, #16]
 8009474:	f000 fab2 	bl	80099dc <__hi0bits>
 8009478:	f1c0 0020 	rsb	r0, r0, #32
 800947c:	9b04      	ldr	r3, [sp, #16]
 800947e:	4418      	add	r0, r3
 8009480:	f010 001f 	ands.w	r0, r0, #31
 8009484:	f000 8086 	beq.w	8009594 <_dtoa_r+0x91c>
 8009488:	f1c0 0320 	rsb	r3, r0, #32
 800948c:	2b04      	cmp	r3, #4
 800948e:	dd7f      	ble.n	8009590 <_dtoa_r+0x918>
 8009490:	f1c0 001c 	rsb	r0, r0, #28
 8009494:	9b04      	ldr	r3, [sp, #16]
 8009496:	4403      	add	r3, r0
 8009498:	4480      	add	r8, r0
 800949a:	4405      	add	r5, r0
 800949c:	9304      	str	r3, [sp, #16]
 800949e:	f1b8 0f00 	cmp.w	r8, #0
 80094a2:	dd05      	ble.n	80094b0 <_dtoa_r+0x838>
 80094a4:	4659      	mov	r1, fp
 80094a6:	4642      	mov	r2, r8
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 fbfd 	bl	8009ca8 <__lshift>
 80094ae:	4683      	mov	fp, r0
 80094b0:	9b04      	ldr	r3, [sp, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	dd05      	ble.n	80094c2 <_dtoa_r+0x84a>
 80094b6:	4631      	mov	r1, r6
 80094b8:	461a      	mov	r2, r3
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fbf4 	bl	8009ca8 <__lshift>
 80094c0:	4606      	mov	r6, r0
 80094c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d069      	beq.n	800959c <_dtoa_r+0x924>
 80094c8:	4631      	mov	r1, r6
 80094ca:	4658      	mov	r0, fp
 80094cc:	f000 fc58 	bl	8009d80 <__mcmp>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	da63      	bge.n	800959c <_dtoa_r+0x924>
 80094d4:	2300      	movs	r3, #0
 80094d6:	4659      	mov	r1, fp
 80094d8:	220a      	movs	r2, #10
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fa34 	bl	8009948 <__multadd>
 80094e0:	9b08      	ldr	r3, [sp, #32]
 80094e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80094e6:	4683      	mov	fp, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 818f 	beq.w	800980c <_dtoa_r+0xb94>
 80094ee:	4639      	mov	r1, r7
 80094f0:	2300      	movs	r3, #0
 80094f2:	220a      	movs	r2, #10
 80094f4:	4620      	mov	r0, r4
 80094f6:	f000 fa27 	bl	8009948 <__multadd>
 80094fa:	f1b9 0f00 	cmp.w	r9, #0
 80094fe:	4607      	mov	r7, r0
 8009500:	f300 808e 	bgt.w	8009620 <_dtoa_r+0x9a8>
 8009504:	9b05      	ldr	r3, [sp, #20]
 8009506:	2b02      	cmp	r3, #2
 8009508:	dc50      	bgt.n	80095ac <_dtoa_r+0x934>
 800950a:	e089      	b.n	8009620 <_dtoa_r+0x9a8>
 800950c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800950e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009512:	e75d      	b.n	80093d0 <_dtoa_r+0x758>
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	1e5e      	subs	r6, r3, #1
 8009518:	9b06      	ldr	r3, [sp, #24]
 800951a:	42b3      	cmp	r3, r6
 800951c:	bfbf      	itttt	lt
 800951e:	9b06      	ldrlt	r3, [sp, #24]
 8009520:	9606      	strlt	r6, [sp, #24]
 8009522:	1af2      	sublt	r2, r6, r3
 8009524:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009526:	bfb6      	itet	lt
 8009528:	189b      	addlt	r3, r3, r2
 800952a:	1b9e      	subge	r6, r3, r6
 800952c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800952e:	9b01      	ldr	r3, [sp, #4]
 8009530:	bfb8      	it	lt
 8009532:	2600      	movlt	r6, #0
 8009534:	2b00      	cmp	r3, #0
 8009536:	bfb5      	itete	lt
 8009538:	eba8 0503 	sublt.w	r5, r8, r3
 800953c:	9b01      	ldrge	r3, [sp, #4]
 800953e:	2300      	movlt	r3, #0
 8009540:	4645      	movge	r5, r8
 8009542:	e747      	b.n	80093d4 <_dtoa_r+0x75c>
 8009544:	9e06      	ldr	r6, [sp, #24]
 8009546:	9f08      	ldr	r7, [sp, #32]
 8009548:	4645      	mov	r5, r8
 800954a:	e74c      	b.n	80093e6 <_dtoa_r+0x76e>
 800954c:	9a06      	ldr	r2, [sp, #24]
 800954e:	e775      	b.n	800943c <_dtoa_r+0x7c4>
 8009550:	9b05      	ldr	r3, [sp, #20]
 8009552:	2b01      	cmp	r3, #1
 8009554:	dc18      	bgt.n	8009588 <_dtoa_r+0x910>
 8009556:	9b02      	ldr	r3, [sp, #8]
 8009558:	b9b3      	cbnz	r3, 8009588 <_dtoa_r+0x910>
 800955a:	9b03      	ldr	r3, [sp, #12]
 800955c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009560:	b9a3      	cbnz	r3, 800958c <_dtoa_r+0x914>
 8009562:	9b03      	ldr	r3, [sp, #12]
 8009564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009568:	0d1b      	lsrs	r3, r3, #20
 800956a:	051b      	lsls	r3, r3, #20
 800956c:	b12b      	cbz	r3, 800957a <_dtoa_r+0x902>
 800956e:	9b04      	ldr	r3, [sp, #16]
 8009570:	3301      	adds	r3, #1
 8009572:	9304      	str	r3, [sp, #16]
 8009574:	f108 0801 	add.w	r8, r8, #1
 8009578:	2301      	movs	r3, #1
 800957a:	9306      	str	r3, [sp, #24]
 800957c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800957e:	2b00      	cmp	r3, #0
 8009580:	f47f af74 	bne.w	800946c <_dtoa_r+0x7f4>
 8009584:	2001      	movs	r0, #1
 8009586:	e779      	b.n	800947c <_dtoa_r+0x804>
 8009588:	2300      	movs	r3, #0
 800958a:	e7f6      	b.n	800957a <_dtoa_r+0x902>
 800958c:	9b02      	ldr	r3, [sp, #8]
 800958e:	e7f4      	b.n	800957a <_dtoa_r+0x902>
 8009590:	d085      	beq.n	800949e <_dtoa_r+0x826>
 8009592:	4618      	mov	r0, r3
 8009594:	301c      	adds	r0, #28
 8009596:	e77d      	b.n	8009494 <_dtoa_r+0x81c>
 8009598:	40240000 	.word	0x40240000
 800959c:	9b01      	ldr	r3, [sp, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	dc38      	bgt.n	8009614 <_dtoa_r+0x99c>
 80095a2:	9b05      	ldr	r3, [sp, #20]
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	dd35      	ble.n	8009614 <_dtoa_r+0x99c>
 80095a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80095ac:	f1b9 0f00 	cmp.w	r9, #0
 80095b0:	d10d      	bne.n	80095ce <_dtoa_r+0x956>
 80095b2:	4631      	mov	r1, r6
 80095b4:	464b      	mov	r3, r9
 80095b6:	2205      	movs	r2, #5
 80095b8:	4620      	mov	r0, r4
 80095ba:	f000 f9c5 	bl	8009948 <__multadd>
 80095be:	4601      	mov	r1, r0
 80095c0:	4606      	mov	r6, r0
 80095c2:	4658      	mov	r0, fp
 80095c4:	f000 fbdc 	bl	8009d80 <__mcmp>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	f73f adbd 	bgt.w	8009148 <_dtoa_r+0x4d0>
 80095ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d0:	9d00      	ldr	r5, [sp, #0]
 80095d2:	ea6f 0a03 	mvn.w	sl, r3
 80095d6:	f04f 0800 	mov.w	r8, #0
 80095da:	4631      	mov	r1, r6
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 f991 	bl	8009904 <_Bfree>
 80095e2:	2f00      	cmp	r7, #0
 80095e4:	f43f aeb4 	beq.w	8009350 <_dtoa_r+0x6d8>
 80095e8:	f1b8 0f00 	cmp.w	r8, #0
 80095ec:	d005      	beq.n	80095fa <_dtoa_r+0x982>
 80095ee:	45b8      	cmp	r8, r7
 80095f0:	d003      	beq.n	80095fa <_dtoa_r+0x982>
 80095f2:	4641      	mov	r1, r8
 80095f4:	4620      	mov	r0, r4
 80095f6:	f000 f985 	bl	8009904 <_Bfree>
 80095fa:	4639      	mov	r1, r7
 80095fc:	4620      	mov	r0, r4
 80095fe:	f000 f981 	bl	8009904 <_Bfree>
 8009602:	e6a5      	b.n	8009350 <_dtoa_r+0x6d8>
 8009604:	2600      	movs	r6, #0
 8009606:	4637      	mov	r7, r6
 8009608:	e7e1      	b.n	80095ce <_dtoa_r+0x956>
 800960a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800960c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009610:	4637      	mov	r7, r6
 8009612:	e599      	b.n	8009148 <_dtoa_r+0x4d0>
 8009614:	9b08      	ldr	r3, [sp, #32]
 8009616:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 80fd 	beq.w	800981a <_dtoa_r+0xba2>
 8009620:	2d00      	cmp	r5, #0
 8009622:	dd05      	ble.n	8009630 <_dtoa_r+0x9b8>
 8009624:	4639      	mov	r1, r7
 8009626:	462a      	mov	r2, r5
 8009628:	4620      	mov	r0, r4
 800962a:	f000 fb3d 	bl	8009ca8 <__lshift>
 800962e:	4607      	mov	r7, r0
 8009630:	9b06      	ldr	r3, [sp, #24]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d05c      	beq.n	80096f0 <_dtoa_r+0xa78>
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	4620      	mov	r0, r4
 800963a:	f000 f923 	bl	8009884 <_Balloc>
 800963e:	4605      	mov	r5, r0
 8009640:	b928      	cbnz	r0, 800964e <_dtoa_r+0x9d6>
 8009642:	4b80      	ldr	r3, [pc, #512]	; (8009844 <_dtoa_r+0xbcc>)
 8009644:	4602      	mov	r2, r0
 8009646:	f240 21ea 	movw	r1, #746	; 0x2ea
 800964a:	f7ff bb2e 	b.w	8008caa <_dtoa_r+0x32>
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	3202      	adds	r2, #2
 8009652:	0092      	lsls	r2, r2, #2
 8009654:	f107 010c 	add.w	r1, r7, #12
 8009658:	300c      	adds	r0, #12
 800965a:	f000 f905 	bl	8009868 <memcpy>
 800965e:	2201      	movs	r2, #1
 8009660:	4629      	mov	r1, r5
 8009662:	4620      	mov	r0, r4
 8009664:	f000 fb20 	bl	8009ca8 <__lshift>
 8009668:	9b00      	ldr	r3, [sp, #0]
 800966a:	3301      	adds	r3, #1
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	9b00      	ldr	r3, [sp, #0]
 8009670:	444b      	add	r3, r9
 8009672:	9307      	str	r3, [sp, #28]
 8009674:	9b02      	ldr	r3, [sp, #8]
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	46b8      	mov	r8, r7
 800967c:	9306      	str	r3, [sp, #24]
 800967e:	4607      	mov	r7, r0
 8009680:	9b01      	ldr	r3, [sp, #4]
 8009682:	4631      	mov	r1, r6
 8009684:	3b01      	subs	r3, #1
 8009686:	4658      	mov	r0, fp
 8009688:	9302      	str	r3, [sp, #8]
 800968a:	f7ff fa69 	bl	8008b60 <quorem>
 800968e:	4603      	mov	r3, r0
 8009690:	3330      	adds	r3, #48	; 0x30
 8009692:	9004      	str	r0, [sp, #16]
 8009694:	4641      	mov	r1, r8
 8009696:	4658      	mov	r0, fp
 8009698:	9308      	str	r3, [sp, #32]
 800969a:	f000 fb71 	bl	8009d80 <__mcmp>
 800969e:	463a      	mov	r2, r7
 80096a0:	4681      	mov	r9, r0
 80096a2:	4631      	mov	r1, r6
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fb87 	bl	8009db8 <__mdiff>
 80096aa:	68c2      	ldr	r2, [r0, #12]
 80096ac:	9b08      	ldr	r3, [sp, #32]
 80096ae:	4605      	mov	r5, r0
 80096b0:	bb02      	cbnz	r2, 80096f4 <_dtoa_r+0xa7c>
 80096b2:	4601      	mov	r1, r0
 80096b4:	4658      	mov	r0, fp
 80096b6:	f000 fb63 	bl	8009d80 <__mcmp>
 80096ba:	9b08      	ldr	r3, [sp, #32]
 80096bc:	4602      	mov	r2, r0
 80096be:	4629      	mov	r1, r5
 80096c0:	4620      	mov	r0, r4
 80096c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80096c6:	f000 f91d 	bl	8009904 <_Bfree>
 80096ca:	9b05      	ldr	r3, [sp, #20]
 80096cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ce:	9d01      	ldr	r5, [sp, #4]
 80096d0:	ea43 0102 	orr.w	r1, r3, r2
 80096d4:	9b06      	ldr	r3, [sp, #24]
 80096d6:	430b      	orrs	r3, r1
 80096d8:	9b08      	ldr	r3, [sp, #32]
 80096da:	d10d      	bne.n	80096f8 <_dtoa_r+0xa80>
 80096dc:	2b39      	cmp	r3, #57	; 0x39
 80096de:	d029      	beq.n	8009734 <_dtoa_r+0xabc>
 80096e0:	f1b9 0f00 	cmp.w	r9, #0
 80096e4:	dd01      	ble.n	80096ea <_dtoa_r+0xa72>
 80096e6:	9b04      	ldr	r3, [sp, #16]
 80096e8:	3331      	adds	r3, #49	; 0x31
 80096ea:	9a02      	ldr	r2, [sp, #8]
 80096ec:	7013      	strb	r3, [r2, #0]
 80096ee:	e774      	b.n	80095da <_dtoa_r+0x962>
 80096f0:	4638      	mov	r0, r7
 80096f2:	e7b9      	b.n	8009668 <_dtoa_r+0x9f0>
 80096f4:	2201      	movs	r2, #1
 80096f6:	e7e2      	b.n	80096be <_dtoa_r+0xa46>
 80096f8:	f1b9 0f00 	cmp.w	r9, #0
 80096fc:	db06      	blt.n	800970c <_dtoa_r+0xa94>
 80096fe:	9905      	ldr	r1, [sp, #20]
 8009700:	ea41 0909 	orr.w	r9, r1, r9
 8009704:	9906      	ldr	r1, [sp, #24]
 8009706:	ea59 0101 	orrs.w	r1, r9, r1
 800970a:	d120      	bne.n	800974e <_dtoa_r+0xad6>
 800970c:	2a00      	cmp	r2, #0
 800970e:	ddec      	ble.n	80096ea <_dtoa_r+0xa72>
 8009710:	4659      	mov	r1, fp
 8009712:	2201      	movs	r2, #1
 8009714:	4620      	mov	r0, r4
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	f000 fac6 	bl	8009ca8 <__lshift>
 800971c:	4631      	mov	r1, r6
 800971e:	4683      	mov	fp, r0
 8009720:	f000 fb2e 	bl	8009d80 <__mcmp>
 8009724:	2800      	cmp	r0, #0
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	dc02      	bgt.n	8009730 <_dtoa_r+0xab8>
 800972a:	d1de      	bne.n	80096ea <_dtoa_r+0xa72>
 800972c:	07da      	lsls	r2, r3, #31
 800972e:	d5dc      	bpl.n	80096ea <_dtoa_r+0xa72>
 8009730:	2b39      	cmp	r3, #57	; 0x39
 8009732:	d1d8      	bne.n	80096e6 <_dtoa_r+0xa6e>
 8009734:	9a02      	ldr	r2, [sp, #8]
 8009736:	2339      	movs	r3, #57	; 0x39
 8009738:	7013      	strb	r3, [r2, #0]
 800973a:	462b      	mov	r3, r5
 800973c:	461d      	mov	r5, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009744:	2a39      	cmp	r2, #57	; 0x39
 8009746:	d050      	beq.n	80097ea <_dtoa_r+0xb72>
 8009748:	3201      	adds	r2, #1
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	e745      	b.n	80095da <_dtoa_r+0x962>
 800974e:	2a00      	cmp	r2, #0
 8009750:	dd03      	ble.n	800975a <_dtoa_r+0xae2>
 8009752:	2b39      	cmp	r3, #57	; 0x39
 8009754:	d0ee      	beq.n	8009734 <_dtoa_r+0xabc>
 8009756:	3301      	adds	r3, #1
 8009758:	e7c7      	b.n	80096ea <_dtoa_r+0xa72>
 800975a:	9a01      	ldr	r2, [sp, #4]
 800975c:	9907      	ldr	r1, [sp, #28]
 800975e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009762:	428a      	cmp	r2, r1
 8009764:	d02a      	beq.n	80097bc <_dtoa_r+0xb44>
 8009766:	4659      	mov	r1, fp
 8009768:	2300      	movs	r3, #0
 800976a:	220a      	movs	r2, #10
 800976c:	4620      	mov	r0, r4
 800976e:	f000 f8eb 	bl	8009948 <__multadd>
 8009772:	45b8      	cmp	r8, r7
 8009774:	4683      	mov	fp, r0
 8009776:	f04f 0300 	mov.w	r3, #0
 800977a:	f04f 020a 	mov.w	r2, #10
 800977e:	4641      	mov	r1, r8
 8009780:	4620      	mov	r0, r4
 8009782:	d107      	bne.n	8009794 <_dtoa_r+0xb1c>
 8009784:	f000 f8e0 	bl	8009948 <__multadd>
 8009788:	4680      	mov	r8, r0
 800978a:	4607      	mov	r7, r0
 800978c:	9b01      	ldr	r3, [sp, #4]
 800978e:	3301      	adds	r3, #1
 8009790:	9301      	str	r3, [sp, #4]
 8009792:	e775      	b.n	8009680 <_dtoa_r+0xa08>
 8009794:	f000 f8d8 	bl	8009948 <__multadd>
 8009798:	4639      	mov	r1, r7
 800979a:	4680      	mov	r8, r0
 800979c:	2300      	movs	r3, #0
 800979e:	220a      	movs	r2, #10
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 f8d1 	bl	8009948 <__multadd>
 80097a6:	4607      	mov	r7, r0
 80097a8:	e7f0      	b.n	800978c <_dtoa_r+0xb14>
 80097aa:	f1b9 0f00 	cmp.w	r9, #0
 80097ae:	9a00      	ldr	r2, [sp, #0]
 80097b0:	bfcc      	ite	gt
 80097b2:	464d      	movgt	r5, r9
 80097b4:	2501      	movle	r5, #1
 80097b6:	4415      	add	r5, r2
 80097b8:	f04f 0800 	mov.w	r8, #0
 80097bc:	4659      	mov	r1, fp
 80097be:	2201      	movs	r2, #1
 80097c0:	4620      	mov	r0, r4
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	f000 fa70 	bl	8009ca8 <__lshift>
 80097c8:	4631      	mov	r1, r6
 80097ca:	4683      	mov	fp, r0
 80097cc:	f000 fad8 	bl	8009d80 <__mcmp>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	dcb2      	bgt.n	800973a <_dtoa_r+0xac2>
 80097d4:	d102      	bne.n	80097dc <_dtoa_r+0xb64>
 80097d6:	9b01      	ldr	r3, [sp, #4]
 80097d8:	07db      	lsls	r3, r3, #31
 80097da:	d4ae      	bmi.n	800973a <_dtoa_r+0xac2>
 80097dc:	462b      	mov	r3, r5
 80097de:	461d      	mov	r5, r3
 80097e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097e4:	2a30      	cmp	r2, #48	; 0x30
 80097e6:	d0fa      	beq.n	80097de <_dtoa_r+0xb66>
 80097e8:	e6f7      	b.n	80095da <_dtoa_r+0x962>
 80097ea:	9a00      	ldr	r2, [sp, #0]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d1a5      	bne.n	800973c <_dtoa_r+0xac4>
 80097f0:	f10a 0a01 	add.w	sl, sl, #1
 80097f4:	2331      	movs	r3, #49	; 0x31
 80097f6:	e779      	b.n	80096ec <_dtoa_r+0xa74>
 80097f8:	4b13      	ldr	r3, [pc, #76]	; (8009848 <_dtoa_r+0xbd0>)
 80097fa:	f7ff baaf 	b.w	8008d5c <_dtoa_r+0xe4>
 80097fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009800:	2b00      	cmp	r3, #0
 8009802:	f47f aa86 	bne.w	8008d12 <_dtoa_r+0x9a>
 8009806:	4b11      	ldr	r3, [pc, #68]	; (800984c <_dtoa_r+0xbd4>)
 8009808:	f7ff baa8 	b.w	8008d5c <_dtoa_r+0xe4>
 800980c:	f1b9 0f00 	cmp.w	r9, #0
 8009810:	dc03      	bgt.n	800981a <_dtoa_r+0xba2>
 8009812:	9b05      	ldr	r3, [sp, #20]
 8009814:	2b02      	cmp	r3, #2
 8009816:	f73f aec9 	bgt.w	80095ac <_dtoa_r+0x934>
 800981a:	9d00      	ldr	r5, [sp, #0]
 800981c:	4631      	mov	r1, r6
 800981e:	4658      	mov	r0, fp
 8009820:	f7ff f99e 	bl	8008b60 <quorem>
 8009824:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009828:	f805 3b01 	strb.w	r3, [r5], #1
 800982c:	9a00      	ldr	r2, [sp, #0]
 800982e:	1aaa      	subs	r2, r5, r2
 8009830:	4591      	cmp	r9, r2
 8009832:	ddba      	ble.n	80097aa <_dtoa_r+0xb32>
 8009834:	4659      	mov	r1, fp
 8009836:	2300      	movs	r3, #0
 8009838:	220a      	movs	r2, #10
 800983a:	4620      	mov	r0, r4
 800983c:	f000 f884 	bl	8009948 <__multadd>
 8009840:	4683      	mov	fp, r0
 8009842:	e7eb      	b.n	800981c <_dtoa_r+0xba4>
 8009844:	0800df17 	.word	0x0800df17
 8009848:	0800de70 	.word	0x0800de70
 800984c:	0800de94 	.word	0x0800de94

08009850 <_localeconv_r>:
 8009850:	4800      	ldr	r0, [pc, #0]	; (8009854 <_localeconv_r+0x4>)
 8009852:	4770      	bx	lr
 8009854:	20000168 	.word	0x20000168

08009858 <malloc>:
 8009858:	4b02      	ldr	r3, [pc, #8]	; (8009864 <malloc+0xc>)
 800985a:	4601      	mov	r1, r0
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	f000 bbef 	b.w	800a040 <_malloc_r>
 8009862:	bf00      	nop
 8009864:	20000014 	.word	0x20000014

08009868 <memcpy>:
 8009868:	440a      	add	r2, r1
 800986a:	4291      	cmp	r1, r2
 800986c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009870:	d100      	bne.n	8009874 <memcpy+0xc>
 8009872:	4770      	bx	lr
 8009874:	b510      	push	{r4, lr}
 8009876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800987a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800987e:	4291      	cmp	r1, r2
 8009880:	d1f9      	bne.n	8009876 <memcpy+0xe>
 8009882:	bd10      	pop	{r4, pc}

08009884 <_Balloc>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009888:	4604      	mov	r4, r0
 800988a:	460d      	mov	r5, r1
 800988c:	b976      	cbnz	r6, 80098ac <_Balloc+0x28>
 800988e:	2010      	movs	r0, #16
 8009890:	f7ff ffe2 	bl	8009858 <malloc>
 8009894:	4602      	mov	r2, r0
 8009896:	6260      	str	r0, [r4, #36]	; 0x24
 8009898:	b920      	cbnz	r0, 80098a4 <_Balloc+0x20>
 800989a:	4b18      	ldr	r3, [pc, #96]	; (80098fc <_Balloc+0x78>)
 800989c:	4818      	ldr	r0, [pc, #96]	; (8009900 <_Balloc+0x7c>)
 800989e:	2166      	movs	r1, #102	; 0x66
 80098a0:	f000 fd94 	bl	800a3cc <__assert_func>
 80098a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098a8:	6006      	str	r6, [r0, #0]
 80098aa:	60c6      	str	r6, [r0, #12]
 80098ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098ae:	68f3      	ldr	r3, [r6, #12]
 80098b0:	b183      	cbz	r3, 80098d4 <_Balloc+0x50>
 80098b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098ba:	b9b8      	cbnz	r0, 80098ec <_Balloc+0x68>
 80098bc:	2101      	movs	r1, #1
 80098be:	fa01 f605 	lsl.w	r6, r1, r5
 80098c2:	1d72      	adds	r2, r6, #5
 80098c4:	0092      	lsls	r2, r2, #2
 80098c6:	4620      	mov	r0, r4
 80098c8:	f000 fb5a 	bl	8009f80 <_calloc_r>
 80098cc:	b160      	cbz	r0, 80098e8 <_Balloc+0x64>
 80098ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098d2:	e00e      	b.n	80098f2 <_Balloc+0x6e>
 80098d4:	2221      	movs	r2, #33	; 0x21
 80098d6:	2104      	movs	r1, #4
 80098d8:	4620      	mov	r0, r4
 80098da:	f000 fb51 	bl	8009f80 <_calloc_r>
 80098de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098e0:	60f0      	str	r0, [r6, #12]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1e4      	bne.n	80098b2 <_Balloc+0x2e>
 80098e8:	2000      	movs	r0, #0
 80098ea:	bd70      	pop	{r4, r5, r6, pc}
 80098ec:	6802      	ldr	r2, [r0, #0]
 80098ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098f2:	2300      	movs	r3, #0
 80098f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098f8:	e7f7      	b.n	80098ea <_Balloc+0x66>
 80098fa:	bf00      	nop
 80098fc:	0800dea1 	.word	0x0800dea1
 8009900:	0800df28 	.word	0x0800df28

08009904 <_Bfree>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009908:	4605      	mov	r5, r0
 800990a:	460c      	mov	r4, r1
 800990c:	b976      	cbnz	r6, 800992c <_Bfree+0x28>
 800990e:	2010      	movs	r0, #16
 8009910:	f7ff ffa2 	bl	8009858 <malloc>
 8009914:	4602      	mov	r2, r0
 8009916:	6268      	str	r0, [r5, #36]	; 0x24
 8009918:	b920      	cbnz	r0, 8009924 <_Bfree+0x20>
 800991a:	4b09      	ldr	r3, [pc, #36]	; (8009940 <_Bfree+0x3c>)
 800991c:	4809      	ldr	r0, [pc, #36]	; (8009944 <_Bfree+0x40>)
 800991e:	218a      	movs	r1, #138	; 0x8a
 8009920:	f000 fd54 	bl	800a3cc <__assert_func>
 8009924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009928:	6006      	str	r6, [r0, #0]
 800992a:	60c6      	str	r6, [r0, #12]
 800992c:	b13c      	cbz	r4, 800993e <_Bfree+0x3a>
 800992e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009930:	6862      	ldr	r2, [r4, #4]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009938:	6021      	str	r1, [r4, #0]
 800993a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800993e:	bd70      	pop	{r4, r5, r6, pc}
 8009940:	0800dea1 	.word	0x0800dea1
 8009944:	0800df28 	.word	0x0800df28

08009948 <__multadd>:
 8009948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800994c:	690e      	ldr	r6, [r1, #16]
 800994e:	4607      	mov	r7, r0
 8009950:	4698      	mov	r8, r3
 8009952:	460c      	mov	r4, r1
 8009954:	f101 0014 	add.w	r0, r1, #20
 8009958:	2300      	movs	r3, #0
 800995a:	6805      	ldr	r5, [r0, #0]
 800995c:	b2a9      	uxth	r1, r5
 800995e:	fb02 8101 	mla	r1, r2, r1, r8
 8009962:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009966:	0c2d      	lsrs	r5, r5, #16
 8009968:	fb02 c505 	mla	r5, r2, r5, ip
 800996c:	b289      	uxth	r1, r1
 800996e:	3301      	adds	r3, #1
 8009970:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009974:	429e      	cmp	r6, r3
 8009976:	f840 1b04 	str.w	r1, [r0], #4
 800997a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800997e:	dcec      	bgt.n	800995a <__multadd+0x12>
 8009980:	f1b8 0f00 	cmp.w	r8, #0
 8009984:	d022      	beq.n	80099cc <__multadd+0x84>
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	42b3      	cmp	r3, r6
 800998a:	dc19      	bgt.n	80099c0 <__multadd+0x78>
 800998c:	6861      	ldr	r1, [r4, #4]
 800998e:	4638      	mov	r0, r7
 8009990:	3101      	adds	r1, #1
 8009992:	f7ff ff77 	bl	8009884 <_Balloc>
 8009996:	4605      	mov	r5, r0
 8009998:	b928      	cbnz	r0, 80099a6 <__multadd+0x5e>
 800999a:	4602      	mov	r2, r0
 800999c:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <__multadd+0x8c>)
 800999e:	480e      	ldr	r0, [pc, #56]	; (80099d8 <__multadd+0x90>)
 80099a0:	21b5      	movs	r1, #181	; 0xb5
 80099a2:	f000 fd13 	bl	800a3cc <__assert_func>
 80099a6:	6922      	ldr	r2, [r4, #16]
 80099a8:	3202      	adds	r2, #2
 80099aa:	f104 010c 	add.w	r1, r4, #12
 80099ae:	0092      	lsls	r2, r2, #2
 80099b0:	300c      	adds	r0, #12
 80099b2:	f7ff ff59 	bl	8009868 <memcpy>
 80099b6:	4621      	mov	r1, r4
 80099b8:	4638      	mov	r0, r7
 80099ba:	f7ff ffa3 	bl	8009904 <_Bfree>
 80099be:	462c      	mov	r4, r5
 80099c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80099c4:	3601      	adds	r6, #1
 80099c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80099ca:	6126      	str	r6, [r4, #16]
 80099cc:	4620      	mov	r0, r4
 80099ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d2:	bf00      	nop
 80099d4:	0800df17 	.word	0x0800df17
 80099d8:	0800df28 	.word	0x0800df28

080099dc <__hi0bits>:
 80099dc:	0c03      	lsrs	r3, r0, #16
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	b9d3      	cbnz	r3, 8009a18 <__hi0bits+0x3c>
 80099e2:	0400      	lsls	r0, r0, #16
 80099e4:	2310      	movs	r3, #16
 80099e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099ea:	bf04      	itt	eq
 80099ec:	0200      	lsleq	r0, r0, #8
 80099ee:	3308      	addeq	r3, #8
 80099f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099f4:	bf04      	itt	eq
 80099f6:	0100      	lsleq	r0, r0, #4
 80099f8:	3304      	addeq	r3, #4
 80099fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099fe:	bf04      	itt	eq
 8009a00:	0080      	lsleq	r0, r0, #2
 8009a02:	3302      	addeq	r3, #2
 8009a04:	2800      	cmp	r0, #0
 8009a06:	db05      	blt.n	8009a14 <__hi0bits+0x38>
 8009a08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a0c:	f103 0301 	add.w	r3, r3, #1
 8009a10:	bf08      	it	eq
 8009a12:	2320      	moveq	r3, #32
 8009a14:	4618      	mov	r0, r3
 8009a16:	4770      	bx	lr
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e7e4      	b.n	80099e6 <__hi0bits+0xa>

08009a1c <__lo0bits>:
 8009a1c:	6803      	ldr	r3, [r0, #0]
 8009a1e:	f013 0207 	ands.w	r2, r3, #7
 8009a22:	4601      	mov	r1, r0
 8009a24:	d00b      	beq.n	8009a3e <__lo0bits+0x22>
 8009a26:	07da      	lsls	r2, r3, #31
 8009a28:	d424      	bmi.n	8009a74 <__lo0bits+0x58>
 8009a2a:	0798      	lsls	r0, r3, #30
 8009a2c:	bf49      	itett	mi
 8009a2e:	085b      	lsrmi	r3, r3, #1
 8009a30:	089b      	lsrpl	r3, r3, #2
 8009a32:	2001      	movmi	r0, #1
 8009a34:	600b      	strmi	r3, [r1, #0]
 8009a36:	bf5c      	itt	pl
 8009a38:	600b      	strpl	r3, [r1, #0]
 8009a3a:	2002      	movpl	r0, #2
 8009a3c:	4770      	bx	lr
 8009a3e:	b298      	uxth	r0, r3
 8009a40:	b9b0      	cbnz	r0, 8009a70 <__lo0bits+0x54>
 8009a42:	0c1b      	lsrs	r3, r3, #16
 8009a44:	2010      	movs	r0, #16
 8009a46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a4a:	bf04      	itt	eq
 8009a4c:	0a1b      	lsreq	r3, r3, #8
 8009a4e:	3008      	addeq	r0, #8
 8009a50:	071a      	lsls	r2, r3, #28
 8009a52:	bf04      	itt	eq
 8009a54:	091b      	lsreq	r3, r3, #4
 8009a56:	3004      	addeq	r0, #4
 8009a58:	079a      	lsls	r2, r3, #30
 8009a5a:	bf04      	itt	eq
 8009a5c:	089b      	lsreq	r3, r3, #2
 8009a5e:	3002      	addeq	r0, #2
 8009a60:	07da      	lsls	r2, r3, #31
 8009a62:	d403      	bmi.n	8009a6c <__lo0bits+0x50>
 8009a64:	085b      	lsrs	r3, r3, #1
 8009a66:	f100 0001 	add.w	r0, r0, #1
 8009a6a:	d005      	beq.n	8009a78 <__lo0bits+0x5c>
 8009a6c:	600b      	str	r3, [r1, #0]
 8009a6e:	4770      	bx	lr
 8009a70:	4610      	mov	r0, r2
 8009a72:	e7e8      	b.n	8009a46 <__lo0bits+0x2a>
 8009a74:	2000      	movs	r0, #0
 8009a76:	4770      	bx	lr
 8009a78:	2020      	movs	r0, #32
 8009a7a:	4770      	bx	lr

08009a7c <__i2b>:
 8009a7c:	b510      	push	{r4, lr}
 8009a7e:	460c      	mov	r4, r1
 8009a80:	2101      	movs	r1, #1
 8009a82:	f7ff feff 	bl	8009884 <_Balloc>
 8009a86:	4602      	mov	r2, r0
 8009a88:	b928      	cbnz	r0, 8009a96 <__i2b+0x1a>
 8009a8a:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <__i2b+0x24>)
 8009a8c:	4805      	ldr	r0, [pc, #20]	; (8009aa4 <__i2b+0x28>)
 8009a8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a92:	f000 fc9b 	bl	800a3cc <__assert_func>
 8009a96:	2301      	movs	r3, #1
 8009a98:	6144      	str	r4, [r0, #20]
 8009a9a:	6103      	str	r3, [r0, #16]
 8009a9c:	bd10      	pop	{r4, pc}
 8009a9e:	bf00      	nop
 8009aa0:	0800df17 	.word	0x0800df17
 8009aa4:	0800df28 	.word	0x0800df28

08009aa8 <__multiply>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	4614      	mov	r4, r2
 8009aae:	690a      	ldr	r2, [r1, #16]
 8009ab0:	6923      	ldr	r3, [r4, #16]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	bfb8      	it	lt
 8009ab6:	460b      	movlt	r3, r1
 8009ab8:	460d      	mov	r5, r1
 8009aba:	bfbc      	itt	lt
 8009abc:	4625      	movlt	r5, r4
 8009abe:	461c      	movlt	r4, r3
 8009ac0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009ac4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ac8:	68ab      	ldr	r3, [r5, #8]
 8009aca:	6869      	ldr	r1, [r5, #4]
 8009acc:	eb0a 0709 	add.w	r7, sl, r9
 8009ad0:	42bb      	cmp	r3, r7
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	bfb8      	it	lt
 8009ad6:	3101      	addlt	r1, #1
 8009ad8:	f7ff fed4 	bl	8009884 <_Balloc>
 8009adc:	b930      	cbnz	r0, 8009aec <__multiply+0x44>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	4b42      	ldr	r3, [pc, #264]	; (8009bec <__multiply+0x144>)
 8009ae2:	4843      	ldr	r0, [pc, #268]	; (8009bf0 <__multiply+0x148>)
 8009ae4:	f240 115d 	movw	r1, #349	; 0x15d
 8009ae8:	f000 fc70 	bl	800a3cc <__assert_func>
 8009aec:	f100 0614 	add.w	r6, r0, #20
 8009af0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009af4:	4633      	mov	r3, r6
 8009af6:	2200      	movs	r2, #0
 8009af8:	4543      	cmp	r3, r8
 8009afa:	d31e      	bcc.n	8009b3a <__multiply+0x92>
 8009afc:	f105 0c14 	add.w	ip, r5, #20
 8009b00:	f104 0314 	add.w	r3, r4, #20
 8009b04:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009b08:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009b0c:	9202      	str	r2, [sp, #8]
 8009b0e:	ebac 0205 	sub.w	r2, ip, r5
 8009b12:	3a15      	subs	r2, #21
 8009b14:	f022 0203 	bic.w	r2, r2, #3
 8009b18:	3204      	adds	r2, #4
 8009b1a:	f105 0115 	add.w	r1, r5, #21
 8009b1e:	458c      	cmp	ip, r1
 8009b20:	bf38      	it	cc
 8009b22:	2204      	movcc	r2, #4
 8009b24:	9201      	str	r2, [sp, #4]
 8009b26:	9a02      	ldr	r2, [sp, #8]
 8009b28:	9303      	str	r3, [sp, #12]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d808      	bhi.n	8009b40 <__multiply+0x98>
 8009b2e:	2f00      	cmp	r7, #0
 8009b30:	dc55      	bgt.n	8009bde <__multiply+0x136>
 8009b32:	6107      	str	r7, [r0, #16]
 8009b34:	b005      	add	sp, #20
 8009b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3a:	f843 2b04 	str.w	r2, [r3], #4
 8009b3e:	e7db      	b.n	8009af8 <__multiply+0x50>
 8009b40:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b44:	f1ba 0f00 	cmp.w	sl, #0
 8009b48:	d020      	beq.n	8009b8c <__multiply+0xe4>
 8009b4a:	f105 0e14 	add.w	lr, r5, #20
 8009b4e:	46b1      	mov	r9, r6
 8009b50:	2200      	movs	r2, #0
 8009b52:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009b56:	f8d9 b000 	ldr.w	fp, [r9]
 8009b5a:	b2a1      	uxth	r1, r4
 8009b5c:	fa1f fb8b 	uxth.w	fp, fp
 8009b60:	fb0a b101 	mla	r1, sl, r1, fp
 8009b64:	4411      	add	r1, r2
 8009b66:	f8d9 2000 	ldr.w	r2, [r9]
 8009b6a:	0c24      	lsrs	r4, r4, #16
 8009b6c:	0c12      	lsrs	r2, r2, #16
 8009b6e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009b72:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009b76:	b289      	uxth	r1, r1
 8009b78:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009b7c:	45f4      	cmp	ip, lr
 8009b7e:	f849 1b04 	str.w	r1, [r9], #4
 8009b82:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009b86:	d8e4      	bhi.n	8009b52 <__multiply+0xaa>
 8009b88:	9901      	ldr	r1, [sp, #4]
 8009b8a:	5072      	str	r2, [r6, r1]
 8009b8c:	9a03      	ldr	r2, [sp, #12]
 8009b8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b92:	3304      	adds	r3, #4
 8009b94:	f1b9 0f00 	cmp.w	r9, #0
 8009b98:	d01f      	beq.n	8009bda <__multiply+0x132>
 8009b9a:	6834      	ldr	r4, [r6, #0]
 8009b9c:	f105 0114 	add.w	r1, r5, #20
 8009ba0:	46b6      	mov	lr, r6
 8009ba2:	f04f 0a00 	mov.w	sl, #0
 8009ba6:	880a      	ldrh	r2, [r1, #0]
 8009ba8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009bac:	fb09 b202 	mla	r2, r9, r2, fp
 8009bb0:	4492      	add	sl, r2
 8009bb2:	b2a4      	uxth	r4, r4
 8009bb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009bb8:	f84e 4b04 	str.w	r4, [lr], #4
 8009bbc:	f851 4b04 	ldr.w	r4, [r1], #4
 8009bc0:	f8be 2000 	ldrh.w	r2, [lr]
 8009bc4:	0c24      	lsrs	r4, r4, #16
 8009bc6:	fb09 2404 	mla	r4, r9, r4, r2
 8009bca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009bce:	458c      	cmp	ip, r1
 8009bd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009bd4:	d8e7      	bhi.n	8009ba6 <__multiply+0xfe>
 8009bd6:	9a01      	ldr	r2, [sp, #4]
 8009bd8:	50b4      	str	r4, [r6, r2]
 8009bda:	3604      	adds	r6, #4
 8009bdc:	e7a3      	b.n	8009b26 <__multiply+0x7e>
 8009bde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1a5      	bne.n	8009b32 <__multiply+0x8a>
 8009be6:	3f01      	subs	r7, #1
 8009be8:	e7a1      	b.n	8009b2e <__multiply+0x86>
 8009bea:	bf00      	nop
 8009bec:	0800df17 	.word	0x0800df17
 8009bf0:	0800df28 	.word	0x0800df28

08009bf4 <__pow5mult>:
 8009bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf8:	4615      	mov	r5, r2
 8009bfa:	f012 0203 	ands.w	r2, r2, #3
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460f      	mov	r7, r1
 8009c02:	d007      	beq.n	8009c14 <__pow5mult+0x20>
 8009c04:	4c25      	ldr	r4, [pc, #148]	; (8009c9c <__pow5mult+0xa8>)
 8009c06:	3a01      	subs	r2, #1
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c0e:	f7ff fe9b 	bl	8009948 <__multadd>
 8009c12:	4607      	mov	r7, r0
 8009c14:	10ad      	asrs	r5, r5, #2
 8009c16:	d03d      	beq.n	8009c94 <__pow5mult+0xa0>
 8009c18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c1a:	b97c      	cbnz	r4, 8009c3c <__pow5mult+0x48>
 8009c1c:	2010      	movs	r0, #16
 8009c1e:	f7ff fe1b 	bl	8009858 <malloc>
 8009c22:	4602      	mov	r2, r0
 8009c24:	6270      	str	r0, [r6, #36]	; 0x24
 8009c26:	b928      	cbnz	r0, 8009c34 <__pow5mult+0x40>
 8009c28:	4b1d      	ldr	r3, [pc, #116]	; (8009ca0 <__pow5mult+0xac>)
 8009c2a:	481e      	ldr	r0, [pc, #120]	; (8009ca4 <__pow5mult+0xb0>)
 8009c2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c30:	f000 fbcc 	bl	800a3cc <__assert_func>
 8009c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c38:	6004      	str	r4, [r0, #0]
 8009c3a:	60c4      	str	r4, [r0, #12]
 8009c3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c44:	b94c      	cbnz	r4, 8009c5a <__pow5mult+0x66>
 8009c46:	f240 2171 	movw	r1, #625	; 0x271
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7ff ff16 	bl	8009a7c <__i2b>
 8009c50:	2300      	movs	r3, #0
 8009c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c56:	4604      	mov	r4, r0
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	f04f 0900 	mov.w	r9, #0
 8009c5e:	07eb      	lsls	r3, r5, #31
 8009c60:	d50a      	bpl.n	8009c78 <__pow5mult+0x84>
 8009c62:	4639      	mov	r1, r7
 8009c64:	4622      	mov	r2, r4
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff ff1e 	bl	8009aa8 <__multiply>
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	4680      	mov	r8, r0
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7ff fe47 	bl	8009904 <_Bfree>
 8009c76:	4647      	mov	r7, r8
 8009c78:	106d      	asrs	r5, r5, #1
 8009c7a:	d00b      	beq.n	8009c94 <__pow5mult+0xa0>
 8009c7c:	6820      	ldr	r0, [r4, #0]
 8009c7e:	b938      	cbnz	r0, 8009c90 <__pow5mult+0x9c>
 8009c80:	4622      	mov	r2, r4
 8009c82:	4621      	mov	r1, r4
 8009c84:	4630      	mov	r0, r6
 8009c86:	f7ff ff0f 	bl	8009aa8 <__multiply>
 8009c8a:	6020      	str	r0, [r4, #0]
 8009c8c:	f8c0 9000 	str.w	r9, [r0]
 8009c90:	4604      	mov	r4, r0
 8009c92:	e7e4      	b.n	8009c5e <__pow5mult+0x6a>
 8009c94:	4638      	mov	r0, r7
 8009c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9a:	bf00      	nop
 8009c9c:	0800e078 	.word	0x0800e078
 8009ca0:	0800dea1 	.word	0x0800dea1
 8009ca4:	0800df28 	.word	0x0800df28

08009ca8 <__lshift>:
 8009ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cac:	460c      	mov	r4, r1
 8009cae:	6849      	ldr	r1, [r1, #4]
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cb6:	68a3      	ldr	r3, [r4, #8]
 8009cb8:	4607      	mov	r7, r0
 8009cba:	4691      	mov	r9, r2
 8009cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cc0:	f108 0601 	add.w	r6, r8, #1
 8009cc4:	42b3      	cmp	r3, r6
 8009cc6:	db0b      	blt.n	8009ce0 <__lshift+0x38>
 8009cc8:	4638      	mov	r0, r7
 8009cca:	f7ff fddb 	bl	8009884 <_Balloc>
 8009cce:	4605      	mov	r5, r0
 8009cd0:	b948      	cbnz	r0, 8009ce6 <__lshift+0x3e>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	4b28      	ldr	r3, [pc, #160]	; (8009d78 <__lshift+0xd0>)
 8009cd6:	4829      	ldr	r0, [pc, #164]	; (8009d7c <__lshift+0xd4>)
 8009cd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009cdc:	f000 fb76 	bl	800a3cc <__assert_func>
 8009ce0:	3101      	adds	r1, #1
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	e7ee      	b.n	8009cc4 <__lshift+0x1c>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f100 0114 	add.w	r1, r0, #20
 8009cec:	f100 0210 	add.w	r2, r0, #16
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	4553      	cmp	r3, sl
 8009cf4:	db33      	blt.n	8009d5e <__lshift+0xb6>
 8009cf6:	6920      	ldr	r0, [r4, #16]
 8009cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cfc:	f104 0314 	add.w	r3, r4, #20
 8009d00:	f019 091f 	ands.w	r9, r9, #31
 8009d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d0c:	d02b      	beq.n	8009d66 <__lshift+0xbe>
 8009d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8009d12:	468a      	mov	sl, r1
 8009d14:	2200      	movs	r2, #0
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	fa00 f009 	lsl.w	r0, r0, r9
 8009d1c:	4302      	orrs	r2, r0
 8009d1e:	f84a 2b04 	str.w	r2, [sl], #4
 8009d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d26:	459c      	cmp	ip, r3
 8009d28:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d2c:	d8f3      	bhi.n	8009d16 <__lshift+0x6e>
 8009d2e:	ebac 0304 	sub.w	r3, ip, r4
 8009d32:	3b15      	subs	r3, #21
 8009d34:	f023 0303 	bic.w	r3, r3, #3
 8009d38:	3304      	adds	r3, #4
 8009d3a:	f104 0015 	add.w	r0, r4, #21
 8009d3e:	4584      	cmp	ip, r0
 8009d40:	bf38      	it	cc
 8009d42:	2304      	movcc	r3, #4
 8009d44:	50ca      	str	r2, [r1, r3]
 8009d46:	b10a      	cbz	r2, 8009d4c <__lshift+0xa4>
 8009d48:	f108 0602 	add.w	r6, r8, #2
 8009d4c:	3e01      	subs	r6, #1
 8009d4e:	4638      	mov	r0, r7
 8009d50:	612e      	str	r6, [r5, #16]
 8009d52:	4621      	mov	r1, r4
 8009d54:	f7ff fdd6 	bl	8009904 <_Bfree>
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d62:	3301      	adds	r3, #1
 8009d64:	e7c5      	b.n	8009cf2 <__lshift+0x4a>
 8009d66:	3904      	subs	r1, #4
 8009d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d70:	459c      	cmp	ip, r3
 8009d72:	d8f9      	bhi.n	8009d68 <__lshift+0xc0>
 8009d74:	e7ea      	b.n	8009d4c <__lshift+0xa4>
 8009d76:	bf00      	nop
 8009d78:	0800df17 	.word	0x0800df17
 8009d7c:	0800df28 	.word	0x0800df28

08009d80 <__mcmp>:
 8009d80:	b530      	push	{r4, r5, lr}
 8009d82:	6902      	ldr	r2, [r0, #16]
 8009d84:	690c      	ldr	r4, [r1, #16]
 8009d86:	1b12      	subs	r2, r2, r4
 8009d88:	d10e      	bne.n	8009da8 <__mcmp+0x28>
 8009d8a:	f100 0314 	add.w	r3, r0, #20
 8009d8e:	3114      	adds	r1, #20
 8009d90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009da0:	42a5      	cmp	r5, r4
 8009da2:	d003      	beq.n	8009dac <__mcmp+0x2c>
 8009da4:	d305      	bcc.n	8009db2 <__mcmp+0x32>
 8009da6:	2201      	movs	r2, #1
 8009da8:	4610      	mov	r0, r2
 8009daa:	bd30      	pop	{r4, r5, pc}
 8009dac:	4283      	cmp	r3, r0
 8009dae:	d3f3      	bcc.n	8009d98 <__mcmp+0x18>
 8009db0:	e7fa      	b.n	8009da8 <__mcmp+0x28>
 8009db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009db6:	e7f7      	b.n	8009da8 <__mcmp+0x28>

08009db8 <__mdiff>:
 8009db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	4617      	mov	r7, r2
 8009dc6:	f7ff ffdb 	bl	8009d80 <__mcmp>
 8009dca:	1e05      	subs	r5, r0, #0
 8009dcc:	d110      	bne.n	8009df0 <__mdiff+0x38>
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f7ff fd57 	bl	8009884 <_Balloc>
 8009dd6:	b930      	cbnz	r0, 8009de6 <__mdiff+0x2e>
 8009dd8:	4b39      	ldr	r3, [pc, #228]	; (8009ec0 <__mdiff+0x108>)
 8009dda:	4602      	mov	r2, r0
 8009ddc:	f240 2132 	movw	r1, #562	; 0x232
 8009de0:	4838      	ldr	r0, [pc, #224]	; (8009ec4 <__mdiff+0x10c>)
 8009de2:	f000 faf3 	bl	800a3cc <__assert_func>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df0:	bfa4      	itt	ge
 8009df2:	463b      	movge	r3, r7
 8009df4:	4627      	movge	r7, r4
 8009df6:	4630      	mov	r0, r6
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	bfa6      	itte	ge
 8009dfc:	461c      	movge	r4, r3
 8009dfe:	2500      	movge	r5, #0
 8009e00:	2501      	movlt	r5, #1
 8009e02:	f7ff fd3f 	bl	8009884 <_Balloc>
 8009e06:	b920      	cbnz	r0, 8009e12 <__mdiff+0x5a>
 8009e08:	4b2d      	ldr	r3, [pc, #180]	; (8009ec0 <__mdiff+0x108>)
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e10:	e7e6      	b.n	8009de0 <__mdiff+0x28>
 8009e12:	693e      	ldr	r6, [r7, #16]
 8009e14:	60c5      	str	r5, [r0, #12]
 8009e16:	6925      	ldr	r5, [r4, #16]
 8009e18:	f107 0114 	add.w	r1, r7, #20
 8009e1c:	f104 0914 	add.w	r9, r4, #20
 8009e20:	f100 0e14 	add.w	lr, r0, #20
 8009e24:	f107 0210 	add.w	r2, r7, #16
 8009e28:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009e2c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009e30:	46f2      	mov	sl, lr
 8009e32:	2700      	movs	r7, #0
 8009e34:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e3c:	fa1f f883 	uxth.w	r8, r3
 8009e40:	fa17 f78b 	uxtah	r7, r7, fp
 8009e44:	0c1b      	lsrs	r3, r3, #16
 8009e46:	eba7 0808 	sub.w	r8, r7, r8
 8009e4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e52:	fa1f f888 	uxth.w	r8, r8
 8009e56:	141f      	asrs	r7, r3, #16
 8009e58:	454d      	cmp	r5, r9
 8009e5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e5e:	f84a 3b04 	str.w	r3, [sl], #4
 8009e62:	d8e7      	bhi.n	8009e34 <__mdiff+0x7c>
 8009e64:	1b2b      	subs	r3, r5, r4
 8009e66:	3b15      	subs	r3, #21
 8009e68:	f023 0303 	bic.w	r3, r3, #3
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	3415      	adds	r4, #21
 8009e70:	42a5      	cmp	r5, r4
 8009e72:	bf38      	it	cc
 8009e74:	2304      	movcc	r3, #4
 8009e76:	4419      	add	r1, r3
 8009e78:	4473      	add	r3, lr
 8009e7a:	469e      	mov	lr, r3
 8009e7c:	460d      	mov	r5, r1
 8009e7e:	4565      	cmp	r5, ip
 8009e80:	d30e      	bcc.n	8009ea0 <__mdiff+0xe8>
 8009e82:	f10c 0203 	add.w	r2, ip, #3
 8009e86:	1a52      	subs	r2, r2, r1
 8009e88:	f022 0203 	bic.w	r2, r2, #3
 8009e8c:	3903      	subs	r1, #3
 8009e8e:	458c      	cmp	ip, r1
 8009e90:	bf38      	it	cc
 8009e92:	2200      	movcc	r2, #0
 8009e94:	441a      	add	r2, r3
 8009e96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e9a:	b17b      	cbz	r3, 8009ebc <__mdiff+0x104>
 8009e9c:	6106      	str	r6, [r0, #16]
 8009e9e:	e7a5      	b.n	8009dec <__mdiff+0x34>
 8009ea0:	f855 8b04 	ldr.w	r8, [r5], #4
 8009ea4:	fa17 f488 	uxtah	r4, r7, r8
 8009ea8:	1422      	asrs	r2, r4, #16
 8009eaa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009eae:	b2a4      	uxth	r4, r4
 8009eb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009eb4:	f84e 4b04 	str.w	r4, [lr], #4
 8009eb8:	1417      	asrs	r7, r2, #16
 8009eba:	e7e0      	b.n	8009e7e <__mdiff+0xc6>
 8009ebc:	3e01      	subs	r6, #1
 8009ebe:	e7ea      	b.n	8009e96 <__mdiff+0xde>
 8009ec0:	0800df17 	.word	0x0800df17
 8009ec4:	0800df28 	.word	0x0800df28

08009ec8 <__d2b>:
 8009ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ecc:	4689      	mov	r9, r1
 8009ece:	2101      	movs	r1, #1
 8009ed0:	ec57 6b10 	vmov	r6, r7, d0
 8009ed4:	4690      	mov	r8, r2
 8009ed6:	f7ff fcd5 	bl	8009884 <_Balloc>
 8009eda:	4604      	mov	r4, r0
 8009edc:	b930      	cbnz	r0, 8009eec <__d2b+0x24>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	4b25      	ldr	r3, [pc, #148]	; (8009f78 <__d2b+0xb0>)
 8009ee2:	4826      	ldr	r0, [pc, #152]	; (8009f7c <__d2b+0xb4>)
 8009ee4:	f240 310a 	movw	r1, #778	; 0x30a
 8009ee8:	f000 fa70 	bl	800a3cc <__assert_func>
 8009eec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ef4:	bb35      	cbnz	r5, 8009f44 <__d2b+0x7c>
 8009ef6:	2e00      	cmp	r6, #0
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	d028      	beq.n	8009f4e <__d2b+0x86>
 8009efc:	4668      	mov	r0, sp
 8009efe:	9600      	str	r6, [sp, #0]
 8009f00:	f7ff fd8c 	bl	8009a1c <__lo0bits>
 8009f04:	9900      	ldr	r1, [sp, #0]
 8009f06:	b300      	cbz	r0, 8009f4a <__d2b+0x82>
 8009f08:	9a01      	ldr	r2, [sp, #4]
 8009f0a:	f1c0 0320 	rsb	r3, r0, #32
 8009f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f12:	430b      	orrs	r3, r1
 8009f14:	40c2      	lsrs	r2, r0
 8009f16:	6163      	str	r3, [r4, #20]
 8009f18:	9201      	str	r2, [sp, #4]
 8009f1a:	9b01      	ldr	r3, [sp, #4]
 8009f1c:	61a3      	str	r3, [r4, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	bf14      	ite	ne
 8009f22:	2202      	movne	r2, #2
 8009f24:	2201      	moveq	r2, #1
 8009f26:	6122      	str	r2, [r4, #16]
 8009f28:	b1d5      	cbz	r5, 8009f60 <__d2b+0x98>
 8009f2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f2e:	4405      	add	r5, r0
 8009f30:	f8c9 5000 	str.w	r5, [r9]
 8009f34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f38:	f8c8 0000 	str.w	r0, [r8]
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	b003      	add	sp, #12
 8009f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f48:	e7d5      	b.n	8009ef6 <__d2b+0x2e>
 8009f4a:	6161      	str	r1, [r4, #20]
 8009f4c:	e7e5      	b.n	8009f1a <__d2b+0x52>
 8009f4e:	a801      	add	r0, sp, #4
 8009f50:	f7ff fd64 	bl	8009a1c <__lo0bits>
 8009f54:	9b01      	ldr	r3, [sp, #4]
 8009f56:	6163      	str	r3, [r4, #20]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	6122      	str	r2, [r4, #16]
 8009f5c:	3020      	adds	r0, #32
 8009f5e:	e7e3      	b.n	8009f28 <__d2b+0x60>
 8009f60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f68:	f8c9 0000 	str.w	r0, [r9]
 8009f6c:	6918      	ldr	r0, [r3, #16]
 8009f6e:	f7ff fd35 	bl	80099dc <__hi0bits>
 8009f72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f76:	e7df      	b.n	8009f38 <__d2b+0x70>
 8009f78:	0800df17 	.word	0x0800df17
 8009f7c:	0800df28 	.word	0x0800df28

08009f80 <_calloc_r>:
 8009f80:	b513      	push	{r0, r1, r4, lr}
 8009f82:	434a      	muls	r2, r1
 8009f84:	4611      	mov	r1, r2
 8009f86:	9201      	str	r2, [sp, #4]
 8009f88:	f000 f85a 	bl	800a040 <_malloc_r>
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	b118      	cbz	r0, 8009f98 <_calloc_r+0x18>
 8009f90:	9a01      	ldr	r2, [sp, #4]
 8009f92:	2100      	movs	r1, #0
 8009f94:	f7fe f952 	bl	800823c <memset>
 8009f98:	4620      	mov	r0, r4
 8009f9a:	b002      	add	sp, #8
 8009f9c:	bd10      	pop	{r4, pc}
	...

08009fa0 <_free_r>:
 8009fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fa2:	2900      	cmp	r1, #0
 8009fa4:	d048      	beq.n	800a038 <_free_r+0x98>
 8009fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009faa:	9001      	str	r0, [sp, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f1a1 0404 	sub.w	r4, r1, #4
 8009fb2:	bfb8      	it	lt
 8009fb4:	18e4      	addlt	r4, r4, r3
 8009fb6:	f000 fa65 	bl	800a484 <__malloc_lock>
 8009fba:	4a20      	ldr	r2, [pc, #128]	; (800a03c <_free_r+0x9c>)
 8009fbc:	9801      	ldr	r0, [sp, #4]
 8009fbe:	6813      	ldr	r3, [r2, #0]
 8009fc0:	4615      	mov	r5, r2
 8009fc2:	b933      	cbnz	r3, 8009fd2 <_free_r+0x32>
 8009fc4:	6063      	str	r3, [r4, #4]
 8009fc6:	6014      	str	r4, [r2, #0]
 8009fc8:	b003      	add	sp, #12
 8009fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fce:	f000 ba5f 	b.w	800a490 <__malloc_unlock>
 8009fd2:	42a3      	cmp	r3, r4
 8009fd4:	d90b      	bls.n	8009fee <_free_r+0x4e>
 8009fd6:	6821      	ldr	r1, [r4, #0]
 8009fd8:	1862      	adds	r2, r4, r1
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	bf04      	itt	eq
 8009fde:	681a      	ldreq	r2, [r3, #0]
 8009fe0:	685b      	ldreq	r3, [r3, #4]
 8009fe2:	6063      	str	r3, [r4, #4]
 8009fe4:	bf04      	itt	eq
 8009fe6:	1852      	addeq	r2, r2, r1
 8009fe8:	6022      	streq	r2, [r4, #0]
 8009fea:	602c      	str	r4, [r5, #0]
 8009fec:	e7ec      	b.n	8009fc8 <_free_r+0x28>
 8009fee:	461a      	mov	r2, r3
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	b10b      	cbz	r3, 8009ff8 <_free_r+0x58>
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	d9fa      	bls.n	8009fee <_free_r+0x4e>
 8009ff8:	6811      	ldr	r1, [r2, #0]
 8009ffa:	1855      	adds	r5, r2, r1
 8009ffc:	42a5      	cmp	r5, r4
 8009ffe:	d10b      	bne.n	800a018 <_free_r+0x78>
 800a000:	6824      	ldr	r4, [r4, #0]
 800a002:	4421      	add	r1, r4
 800a004:	1854      	adds	r4, r2, r1
 800a006:	42a3      	cmp	r3, r4
 800a008:	6011      	str	r1, [r2, #0]
 800a00a:	d1dd      	bne.n	8009fc8 <_free_r+0x28>
 800a00c:	681c      	ldr	r4, [r3, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	6053      	str	r3, [r2, #4]
 800a012:	4421      	add	r1, r4
 800a014:	6011      	str	r1, [r2, #0]
 800a016:	e7d7      	b.n	8009fc8 <_free_r+0x28>
 800a018:	d902      	bls.n	800a020 <_free_r+0x80>
 800a01a:	230c      	movs	r3, #12
 800a01c:	6003      	str	r3, [r0, #0]
 800a01e:	e7d3      	b.n	8009fc8 <_free_r+0x28>
 800a020:	6825      	ldr	r5, [r4, #0]
 800a022:	1961      	adds	r1, r4, r5
 800a024:	428b      	cmp	r3, r1
 800a026:	bf04      	itt	eq
 800a028:	6819      	ldreq	r1, [r3, #0]
 800a02a:	685b      	ldreq	r3, [r3, #4]
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	bf04      	itt	eq
 800a030:	1949      	addeq	r1, r1, r5
 800a032:	6021      	streq	r1, [r4, #0]
 800a034:	6054      	str	r4, [r2, #4]
 800a036:	e7c7      	b.n	8009fc8 <_free_r+0x28>
 800a038:	b003      	add	sp, #12
 800a03a:	bd30      	pop	{r4, r5, pc}
 800a03c:	20000274 	.word	0x20000274

0800a040 <_malloc_r>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	1ccd      	adds	r5, r1, #3
 800a044:	f025 0503 	bic.w	r5, r5, #3
 800a048:	3508      	adds	r5, #8
 800a04a:	2d0c      	cmp	r5, #12
 800a04c:	bf38      	it	cc
 800a04e:	250c      	movcc	r5, #12
 800a050:	2d00      	cmp	r5, #0
 800a052:	4606      	mov	r6, r0
 800a054:	db01      	blt.n	800a05a <_malloc_r+0x1a>
 800a056:	42a9      	cmp	r1, r5
 800a058:	d903      	bls.n	800a062 <_malloc_r+0x22>
 800a05a:	230c      	movs	r3, #12
 800a05c:	6033      	str	r3, [r6, #0]
 800a05e:	2000      	movs	r0, #0
 800a060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a062:	f000 fa0f 	bl	800a484 <__malloc_lock>
 800a066:	4921      	ldr	r1, [pc, #132]	; (800a0ec <_malloc_r+0xac>)
 800a068:	680a      	ldr	r2, [r1, #0]
 800a06a:	4614      	mov	r4, r2
 800a06c:	b99c      	cbnz	r4, 800a096 <_malloc_r+0x56>
 800a06e:	4f20      	ldr	r7, [pc, #128]	; (800a0f0 <_malloc_r+0xb0>)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	b923      	cbnz	r3, 800a07e <_malloc_r+0x3e>
 800a074:	4621      	mov	r1, r4
 800a076:	4630      	mov	r0, r6
 800a078:	f000 f998 	bl	800a3ac <_sbrk_r>
 800a07c:	6038      	str	r0, [r7, #0]
 800a07e:	4629      	mov	r1, r5
 800a080:	4630      	mov	r0, r6
 800a082:	f000 f993 	bl	800a3ac <_sbrk_r>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	d123      	bne.n	800a0d2 <_malloc_r+0x92>
 800a08a:	230c      	movs	r3, #12
 800a08c:	6033      	str	r3, [r6, #0]
 800a08e:	4630      	mov	r0, r6
 800a090:	f000 f9fe 	bl	800a490 <__malloc_unlock>
 800a094:	e7e3      	b.n	800a05e <_malloc_r+0x1e>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	1b5b      	subs	r3, r3, r5
 800a09a:	d417      	bmi.n	800a0cc <_malloc_r+0x8c>
 800a09c:	2b0b      	cmp	r3, #11
 800a09e:	d903      	bls.n	800a0a8 <_malloc_r+0x68>
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	441c      	add	r4, r3
 800a0a4:	6025      	str	r5, [r4, #0]
 800a0a6:	e004      	b.n	800a0b2 <_malloc_r+0x72>
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	42a2      	cmp	r2, r4
 800a0ac:	bf0c      	ite	eq
 800a0ae:	600b      	streq	r3, [r1, #0]
 800a0b0:	6053      	strne	r3, [r2, #4]
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f000 f9ec 	bl	800a490 <__malloc_unlock>
 800a0b8:	f104 000b 	add.w	r0, r4, #11
 800a0bc:	1d23      	adds	r3, r4, #4
 800a0be:	f020 0007 	bic.w	r0, r0, #7
 800a0c2:	1ac2      	subs	r2, r0, r3
 800a0c4:	d0cc      	beq.n	800a060 <_malloc_r+0x20>
 800a0c6:	1a1b      	subs	r3, r3, r0
 800a0c8:	50a3      	str	r3, [r4, r2]
 800a0ca:	e7c9      	b.n	800a060 <_malloc_r+0x20>
 800a0cc:	4622      	mov	r2, r4
 800a0ce:	6864      	ldr	r4, [r4, #4]
 800a0d0:	e7cc      	b.n	800a06c <_malloc_r+0x2c>
 800a0d2:	1cc4      	adds	r4, r0, #3
 800a0d4:	f024 0403 	bic.w	r4, r4, #3
 800a0d8:	42a0      	cmp	r0, r4
 800a0da:	d0e3      	beq.n	800a0a4 <_malloc_r+0x64>
 800a0dc:	1a21      	subs	r1, r4, r0
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f000 f964 	bl	800a3ac <_sbrk_r>
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d1dd      	bne.n	800a0a4 <_malloc_r+0x64>
 800a0e8:	e7cf      	b.n	800a08a <_malloc_r+0x4a>
 800a0ea:	bf00      	nop
 800a0ec:	20000274 	.word	0x20000274
 800a0f0:	20000278 	.word	0x20000278

0800a0f4 <__ssputs_r>:
 800a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f8:	688e      	ldr	r6, [r1, #8]
 800a0fa:	429e      	cmp	r6, r3
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	4690      	mov	r8, r2
 800a102:	461f      	mov	r7, r3
 800a104:	d838      	bhi.n	800a178 <__ssputs_r+0x84>
 800a106:	898a      	ldrh	r2, [r1, #12]
 800a108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a10c:	d032      	beq.n	800a174 <__ssputs_r+0x80>
 800a10e:	6825      	ldr	r5, [r4, #0]
 800a110:	6909      	ldr	r1, [r1, #16]
 800a112:	eba5 0901 	sub.w	r9, r5, r1
 800a116:	6965      	ldr	r5, [r4, #20]
 800a118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a11c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a120:	3301      	adds	r3, #1
 800a122:	444b      	add	r3, r9
 800a124:	106d      	asrs	r5, r5, #1
 800a126:	429d      	cmp	r5, r3
 800a128:	bf38      	it	cc
 800a12a:	461d      	movcc	r5, r3
 800a12c:	0553      	lsls	r3, r2, #21
 800a12e:	d531      	bpl.n	800a194 <__ssputs_r+0xa0>
 800a130:	4629      	mov	r1, r5
 800a132:	f7ff ff85 	bl	800a040 <_malloc_r>
 800a136:	4606      	mov	r6, r0
 800a138:	b950      	cbnz	r0, 800a150 <__ssputs_r+0x5c>
 800a13a:	230c      	movs	r3, #12
 800a13c:	f8ca 3000 	str.w	r3, [sl]
 800a140:	89a3      	ldrh	r3, [r4, #12]
 800a142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a146:	81a3      	strh	r3, [r4, #12]
 800a148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a150:	6921      	ldr	r1, [r4, #16]
 800a152:	464a      	mov	r2, r9
 800a154:	f7ff fb88 	bl	8009868 <memcpy>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a162:	81a3      	strh	r3, [r4, #12]
 800a164:	6126      	str	r6, [r4, #16]
 800a166:	6165      	str	r5, [r4, #20]
 800a168:	444e      	add	r6, r9
 800a16a:	eba5 0509 	sub.w	r5, r5, r9
 800a16e:	6026      	str	r6, [r4, #0]
 800a170:	60a5      	str	r5, [r4, #8]
 800a172:	463e      	mov	r6, r7
 800a174:	42be      	cmp	r6, r7
 800a176:	d900      	bls.n	800a17a <__ssputs_r+0x86>
 800a178:	463e      	mov	r6, r7
 800a17a:	4632      	mov	r2, r6
 800a17c:	6820      	ldr	r0, [r4, #0]
 800a17e:	4641      	mov	r1, r8
 800a180:	f000 f966 	bl	800a450 <memmove>
 800a184:	68a3      	ldr	r3, [r4, #8]
 800a186:	6822      	ldr	r2, [r4, #0]
 800a188:	1b9b      	subs	r3, r3, r6
 800a18a:	4432      	add	r2, r6
 800a18c:	60a3      	str	r3, [r4, #8]
 800a18e:	6022      	str	r2, [r4, #0]
 800a190:	2000      	movs	r0, #0
 800a192:	e7db      	b.n	800a14c <__ssputs_r+0x58>
 800a194:	462a      	mov	r2, r5
 800a196:	f000 f981 	bl	800a49c <_realloc_r>
 800a19a:	4606      	mov	r6, r0
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d1e1      	bne.n	800a164 <__ssputs_r+0x70>
 800a1a0:	6921      	ldr	r1, [r4, #16]
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	f7ff fefc 	bl	8009fa0 <_free_r>
 800a1a8:	e7c7      	b.n	800a13a <__ssputs_r+0x46>
	...

0800a1ac <_svfiprintf_r>:
 800a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b0:	4698      	mov	r8, r3
 800a1b2:	898b      	ldrh	r3, [r1, #12]
 800a1b4:	061b      	lsls	r3, r3, #24
 800a1b6:	b09d      	sub	sp, #116	; 0x74
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	4614      	mov	r4, r2
 800a1be:	d50e      	bpl.n	800a1de <_svfiprintf_r+0x32>
 800a1c0:	690b      	ldr	r3, [r1, #16]
 800a1c2:	b963      	cbnz	r3, 800a1de <_svfiprintf_r+0x32>
 800a1c4:	2140      	movs	r1, #64	; 0x40
 800a1c6:	f7ff ff3b 	bl	800a040 <_malloc_r>
 800a1ca:	6028      	str	r0, [r5, #0]
 800a1cc:	6128      	str	r0, [r5, #16]
 800a1ce:	b920      	cbnz	r0, 800a1da <_svfiprintf_r+0x2e>
 800a1d0:	230c      	movs	r3, #12
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1d8:	e0d1      	b.n	800a37e <_svfiprintf_r+0x1d2>
 800a1da:	2340      	movs	r3, #64	; 0x40
 800a1dc:	616b      	str	r3, [r5, #20]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e2:	2320      	movs	r3, #32
 800a1e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ec:	2330      	movs	r3, #48	; 0x30
 800a1ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a398 <_svfiprintf_r+0x1ec>
 800a1f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1f6:	f04f 0901 	mov.w	r9, #1
 800a1fa:	4623      	mov	r3, r4
 800a1fc:	469a      	mov	sl, r3
 800a1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a202:	b10a      	cbz	r2, 800a208 <_svfiprintf_r+0x5c>
 800a204:	2a25      	cmp	r2, #37	; 0x25
 800a206:	d1f9      	bne.n	800a1fc <_svfiprintf_r+0x50>
 800a208:	ebba 0b04 	subs.w	fp, sl, r4
 800a20c:	d00b      	beq.n	800a226 <_svfiprintf_r+0x7a>
 800a20e:	465b      	mov	r3, fp
 800a210:	4622      	mov	r2, r4
 800a212:	4629      	mov	r1, r5
 800a214:	4638      	mov	r0, r7
 800a216:	f7ff ff6d 	bl	800a0f4 <__ssputs_r>
 800a21a:	3001      	adds	r0, #1
 800a21c:	f000 80aa 	beq.w	800a374 <_svfiprintf_r+0x1c8>
 800a220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a222:	445a      	add	r2, fp
 800a224:	9209      	str	r2, [sp, #36]	; 0x24
 800a226:	f89a 3000 	ldrb.w	r3, [sl]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 80a2 	beq.w	800a374 <_svfiprintf_r+0x1c8>
 800a230:	2300      	movs	r3, #0
 800a232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a23a:	f10a 0a01 	add.w	sl, sl, #1
 800a23e:	9304      	str	r3, [sp, #16]
 800a240:	9307      	str	r3, [sp, #28]
 800a242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a246:	931a      	str	r3, [sp, #104]	; 0x68
 800a248:	4654      	mov	r4, sl
 800a24a:	2205      	movs	r2, #5
 800a24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a250:	4851      	ldr	r0, [pc, #324]	; (800a398 <_svfiprintf_r+0x1ec>)
 800a252:	f7f5 ffed 	bl	8000230 <memchr>
 800a256:	9a04      	ldr	r2, [sp, #16]
 800a258:	b9d8      	cbnz	r0, 800a292 <_svfiprintf_r+0xe6>
 800a25a:	06d0      	lsls	r0, r2, #27
 800a25c:	bf44      	itt	mi
 800a25e:	2320      	movmi	r3, #32
 800a260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a264:	0711      	lsls	r1, r2, #28
 800a266:	bf44      	itt	mi
 800a268:	232b      	movmi	r3, #43	; 0x2b
 800a26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a26e:	f89a 3000 	ldrb.w	r3, [sl]
 800a272:	2b2a      	cmp	r3, #42	; 0x2a
 800a274:	d015      	beq.n	800a2a2 <_svfiprintf_r+0xf6>
 800a276:	9a07      	ldr	r2, [sp, #28]
 800a278:	4654      	mov	r4, sl
 800a27a:	2000      	movs	r0, #0
 800a27c:	f04f 0c0a 	mov.w	ip, #10
 800a280:	4621      	mov	r1, r4
 800a282:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a286:	3b30      	subs	r3, #48	; 0x30
 800a288:	2b09      	cmp	r3, #9
 800a28a:	d94e      	bls.n	800a32a <_svfiprintf_r+0x17e>
 800a28c:	b1b0      	cbz	r0, 800a2bc <_svfiprintf_r+0x110>
 800a28e:	9207      	str	r2, [sp, #28]
 800a290:	e014      	b.n	800a2bc <_svfiprintf_r+0x110>
 800a292:	eba0 0308 	sub.w	r3, r0, r8
 800a296:	fa09 f303 	lsl.w	r3, r9, r3
 800a29a:	4313      	orrs	r3, r2
 800a29c:	9304      	str	r3, [sp, #16]
 800a29e:	46a2      	mov	sl, r4
 800a2a0:	e7d2      	b.n	800a248 <_svfiprintf_r+0x9c>
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	1d19      	adds	r1, r3, #4
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	9103      	str	r1, [sp, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	bfbb      	ittet	lt
 800a2ae:	425b      	neglt	r3, r3
 800a2b0:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b4:	9307      	strge	r3, [sp, #28]
 800a2b6:	9307      	strlt	r3, [sp, #28]
 800a2b8:	bfb8      	it	lt
 800a2ba:	9204      	strlt	r2, [sp, #16]
 800a2bc:	7823      	ldrb	r3, [r4, #0]
 800a2be:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c0:	d10c      	bne.n	800a2dc <_svfiprintf_r+0x130>
 800a2c2:	7863      	ldrb	r3, [r4, #1]
 800a2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c6:	d135      	bne.n	800a334 <_svfiprintf_r+0x188>
 800a2c8:	9b03      	ldr	r3, [sp, #12]
 800a2ca:	1d1a      	adds	r2, r3, #4
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	9203      	str	r2, [sp, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	bfb8      	it	lt
 800a2d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2d8:	3402      	adds	r4, #2
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3a8 <_svfiprintf_r+0x1fc>
 800a2e0:	7821      	ldrb	r1, [r4, #0]
 800a2e2:	2203      	movs	r2, #3
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	f7f5 ffa3 	bl	8000230 <memchr>
 800a2ea:	b140      	cbz	r0, 800a2fe <_svfiprintf_r+0x152>
 800a2ec:	2340      	movs	r3, #64	; 0x40
 800a2ee:	eba0 000a 	sub.w	r0, r0, sl
 800a2f2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	4303      	orrs	r3, r0
 800a2fa:	3401      	adds	r4, #1
 800a2fc:	9304      	str	r3, [sp, #16]
 800a2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a302:	4826      	ldr	r0, [pc, #152]	; (800a39c <_svfiprintf_r+0x1f0>)
 800a304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a308:	2206      	movs	r2, #6
 800a30a:	f7f5 ff91 	bl	8000230 <memchr>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d038      	beq.n	800a384 <_svfiprintf_r+0x1d8>
 800a312:	4b23      	ldr	r3, [pc, #140]	; (800a3a0 <_svfiprintf_r+0x1f4>)
 800a314:	bb1b      	cbnz	r3, 800a35e <_svfiprintf_r+0x1b2>
 800a316:	9b03      	ldr	r3, [sp, #12]
 800a318:	3307      	adds	r3, #7
 800a31a:	f023 0307 	bic.w	r3, r3, #7
 800a31e:	3308      	adds	r3, #8
 800a320:	9303      	str	r3, [sp, #12]
 800a322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a324:	4433      	add	r3, r6
 800a326:	9309      	str	r3, [sp, #36]	; 0x24
 800a328:	e767      	b.n	800a1fa <_svfiprintf_r+0x4e>
 800a32a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a32e:	460c      	mov	r4, r1
 800a330:	2001      	movs	r0, #1
 800a332:	e7a5      	b.n	800a280 <_svfiprintf_r+0xd4>
 800a334:	2300      	movs	r3, #0
 800a336:	3401      	adds	r4, #1
 800a338:	9305      	str	r3, [sp, #20]
 800a33a:	4619      	mov	r1, r3
 800a33c:	f04f 0c0a 	mov.w	ip, #10
 800a340:	4620      	mov	r0, r4
 800a342:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a346:	3a30      	subs	r2, #48	; 0x30
 800a348:	2a09      	cmp	r2, #9
 800a34a:	d903      	bls.n	800a354 <_svfiprintf_r+0x1a8>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0c5      	beq.n	800a2dc <_svfiprintf_r+0x130>
 800a350:	9105      	str	r1, [sp, #20]
 800a352:	e7c3      	b.n	800a2dc <_svfiprintf_r+0x130>
 800a354:	fb0c 2101 	mla	r1, ip, r1, r2
 800a358:	4604      	mov	r4, r0
 800a35a:	2301      	movs	r3, #1
 800a35c:	e7f0      	b.n	800a340 <_svfiprintf_r+0x194>
 800a35e:	ab03      	add	r3, sp, #12
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	462a      	mov	r2, r5
 800a364:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <_svfiprintf_r+0x1f8>)
 800a366:	a904      	add	r1, sp, #16
 800a368:	4638      	mov	r0, r7
 800a36a:	f7fe f80f 	bl	800838c <_printf_float>
 800a36e:	1c42      	adds	r2, r0, #1
 800a370:	4606      	mov	r6, r0
 800a372:	d1d6      	bne.n	800a322 <_svfiprintf_r+0x176>
 800a374:	89ab      	ldrh	r3, [r5, #12]
 800a376:	065b      	lsls	r3, r3, #25
 800a378:	f53f af2c 	bmi.w	800a1d4 <_svfiprintf_r+0x28>
 800a37c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a37e:	b01d      	add	sp, #116	; 0x74
 800a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a384:	ab03      	add	r3, sp, #12
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	462a      	mov	r2, r5
 800a38a:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <_svfiprintf_r+0x1f8>)
 800a38c:	a904      	add	r1, sp, #16
 800a38e:	4638      	mov	r0, r7
 800a390:	f7fe faa0 	bl	80088d4 <_printf_i>
 800a394:	e7eb      	b.n	800a36e <_svfiprintf_r+0x1c2>
 800a396:	bf00      	nop
 800a398:	0800e084 	.word	0x0800e084
 800a39c:	0800e08e 	.word	0x0800e08e
 800a3a0:	0800838d 	.word	0x0800838d
 800a3a4:	0800a0f5 	.word	0x0800a0f5
 800a3a8:	0800e08a 	.word	0x0800e08a

0800a3ac <_sbrk_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d06      	ldr	r5, [pc, #24]	; (800a3c8 <_sbrk_r+0x1c>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	602b      	str	r3, [r5, #0]
 800a3b8:	f7f8 fa1c 	bl	80027f4 <_sbrk>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_sbrk_r+0x1a>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_sbrk_r+0x1a>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	20001ba4 	.word	0x20001ba4

0800a3cc <__assert_func>:
 800a3cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3ce:	4614      	mov	r4, r2
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4b09      	ldr	r3, [pc, #36]	; (800a3f8 <__assert_func+0x2c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	68d8      	ldr	r0, [r3, #12]
 800a3da:	b14c      	cbz	r4, 800a3f0 <__assert_func+0x24>
 800a3dc:	4b07      	ldr	r3, [pc, #28]	; (800a3fc <__assert_func+0x30>)
 800a3de:	9100      	str	r1, [sp, #0]
 800a3e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3e4:	4906      	ldr	r1, [pc, #24]	; (800a400 <__assert_func+0x34>)
 800a3e6:	462b      	mov	r3, r5
 800a3e8:	f000 f80e 	bl	800a408 <fiprintf>
 800a3ec:	f000 faa4 	bl	800a938 <abort>
 800a3f0:	4b04      	ldr	r3, [pc, #16]	; (800a404 <__assert_func+0x38>)
 800a3f2:	461c      	mov	r4, r3
 800a3f4:	e7f3      	b.n	800a3de <__assert_func+0x12>
 800a3f6:	bf00      	nop
 800a3f8:	20000014 	.word	0x20000014
 800a3fc:	0800e095 	.word	0x0800e095
 800a400:	0800e0a2 	.word	0x0800e0a2
 800a404:	0800e0d0 	.word	0x0800e0d0

0800a408 <fiprintf>:
 800a408:	b40e      	push	{r1, r2, r3}
 800a40a:	b503      	push	{r0, r1, lr}
 800a40c:	4601      	mov	r1, r0
 800a40e:	ab03      	add	r3, sp, #12
 800a410:	4805      	ldr	r0, [pc, #20]	; (800a428 <fiprintf+0x20>)
 800a412:	f853 2b04 	ldr.w	r2, [r3], #4
 800a416:	6800      	ldr	r0, [r0, #0]
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	f000 f88f 	bl	800a53c <_vfiprintf_r>
 800a41e:	b002      	add	sp, #8
 800a420:	f85d eb04 	ldr.w	lr, [sp], #4
 800a424:	b003      	add	sp, #12
 800a426:	4770      	bx	lr
 800a428:	20000014 	.word	0x20000014

0800a42c <__ascii_mbtowc>:
 800a42c:	b082      	sub	sp, #8
 800a42e:	b901      	cbnz	r1, 800a432 <__ascii_mbtowc+0x6>
 800a430:	a901      	add	r1, sp, #4
 800a432:	b142      	cbz	r2, 800a446 <__ascii_mbtowc+0x1a>
 800a434:	b14b      	cbz	r3, 800a44a <__ascii_mbtowc+0x1e>
 800a436:	7813      	ldrb	r3, [r2, #0]
 800a438:	600b      	str	r3, [r1, #0]
 800a43a:	7812      	ldrb	r2, [r2, #0]
 800a43c:	1e10      	subs	r0, r2, #0
 800a43e:	bf18      	it	ne
 800a440:	2001      	movne	r0, #1
 800a442:	b002      	add	sp, #8
 800a444:	4770      	bx	lr
 800a446:	4610      	mov	r0, r2
 800a448:	e7fb      	b.n	800a442 <__ascii_mbtowc+0x16>
 800a44a:	f06f 0001 	mvn.w	r0, #1
 800a44e:	e7f8      	b.n	800a442 <__ascii_mbtowc+0x16>

0800a450 <memmove>:
 800a450:	4288      	cmp	r0, r1
 800a452:	b510      	push	{r4, lr}
 800a454:	eb01 0402 	add.w	r4, r1, r2
 800a458:	d902      	bls.n	800a460 <memmove+0x10>
 800a45a:	4284      	cmp	r4, r0
 800a45c:	4623      	mov	r3, r4
 800a45e:	d807      	bhi.n	800a470 <memmove+0x20>
 800a460:	1e43      	subs	r3, r0, #1
 800a462:	42a1      	cmp	r1, r4
 800a464:	d008      	beq.n	800a478 <memmove+0x28>
 800a466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a46a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a46e:	e7f8      	b.n	800a462 <memmove+0x12>
 800a470:	4402      	add	r2, r0
 800a472:	4601      	mov	r1, r0
 800a474:	428a      	cmp	r2, r1
 800a476:	d100      	bne.n	800a47a <memmove+0x2a>
 800a478:	bd10      	pop	{r4, pc}
 800a47a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a47e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a482:	e7f7      	b.n	800a474 <memmove+0x24>

0800a484 <__malloc_lock>:
 800a484:	4801      	ldr	r0, [pc, #4]	; (800a48c <__malloc_lock+0x8>)
 800a486:	f000 bc17 	b.w	800acb8 <__retarget_lock_acquire_recursive>
 800a48a:	bf00      	nop
 800a48c:	20001bac 	.word	0x20001bac

0800a490 <__malloc_unlock>:
 800a490:	4801      	ldr	r0, [pc, #4]	; (800a498 <__malloc_unlock+0x8>)
 800a492:	f000 bc12 	b.w	800acba <__retarget_lock_release_recursive>
 800a496:	bf00      	nop
 800a498:	20001bac 	.word	0x20001bac

0800a49c <_realloc_r>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	4607      	mov	r7, r0
 800a4a0:	4614      	mov	r4, r2
 800a4a2:	460e      	mov	r6, r1
 800a4a4:	b921      	cbnz	r1, 800a4b0 <_realloc_r+0x14>
 800a4a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	f7ff bdc8 	b.w	800a040 <_malloc_r>
 800a4b0:	b922      	cbnz	r2, 800a4bc <_realloc_r+0x20>
 800a4b2:	f7ff fd75 	bl	8009fa0 <_free_r>
 800a4b6:	4625      	mov	r5, r4
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4bc:	f000 fc62 	bl	800ad84 <_malloc_usable_size_r>
 800a4c0:	42a0      	cmp	r0, r4
 800a4c2:	d20f      	bcs.n	800a4e4 <_realloc_r+0x48>
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	f7ff fdba 	bl	800a040 <_malloc_r>
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d0f2      	beq.n	800a4b8 <_realloc_r+0x1c>
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	f7ff f9c7 	bl	8009868 <memcpy>
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4638      	mov	r0, r7
 800a4de:	f7ff fd5f 	bl	8009fa0 <_free_r>
 800a4e2:	e7e9      	b.n	800a4b8 <_realloc_r+0x1c>
 800a4e4:	4635      	mov	r5, r6
 800a4e6:	e7e7      	b.n	800a4b8 <_realloc_r+0x1c>

0800a4e8 <__sfputc_r>:
 800a4e8:	6893      	ldr	r3, [r2, #8]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	b410      	push	{r4}
 800a4f0:	6093      	str	r3, [r2, #8]
 800a4f2:	da08      	bge.n	800a506 <__sfputc_r+0x1e>
 800a4f4:	6994      	ldr	r4, [r2, #24]
 800a4f6:	42a3      	cmp	r3, r4
 800a4f8:	db01      	blt.n	800a4fe <__sfputc_r+0x16>
 800a4fa:	290a      	cmp	r1, #10
 800a4fc:	d103      	bne.n	800a506 <__sfputc_r+0x1e>
 800a4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a502:	f000 b94b 	b.w	800a79c <__swbuf_r>
 800a506:	6813      	ldr	r3, [r2, #0]
 800a508:	1c58      	adds	r0, r3, #1
 800a50a:	6010      	str	r0, [r2, #0]
 800a50c:	7019      	strb	r1, [r3, #0]
 800a50e:	4608      	mov	r0, r1
 800a510:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <__sfputs_r>:
 800a516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a518:	4606      	mov	r6, r0
 800a51a:	460f      	mov	r7, r1
 800a51c:	4614      	mov	r4, r2
 800a51e:	18d5      	adds	r5, r2, r3
 800a520:	42ac      	cmp	r4, r5
 800a522:	d101      	bne.n	800a528 <__sfputs_r+0x12>
 800a524:	2000      	movs	r0, #0
 800a526:	e007      	b.n	800a538 <__sfputs_r+0x22>
 800a528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a52c:	463a      	mov	r2, r7
 800a52e:	4630      	mov	r0, r6
 800a530:	f7ff ffda 	bl	800a4e8 <__sfputc_r>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d1f3      	bne.n	800a520 <__sfputs_r+0xa>
 800a538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a53c <_vfiprintf_r>:
 800a53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a540:	460d      	mov	r5, r1
 800a542:	b09d      	sub	sp, #116	; 0x74
 800a544:	4614      	mov	r4, r2
 800a546:	4698      	mov	r8, r3
 800a548:	4606      	mov	r6, r0
 800a54a:	b118      	cbz	r0, 800a554 <_vfiprintf_r+0x18>
 800a54c:	6983      	ldr	r3, [r0, #24]
 800a54e:	b90b      	cbnz	r3, 800a554 <_vfiprintf_r+0x18>
 800a550:	f000 fb14 	bl	800ab7c <__sinit>
 800a554:	4b89      	ldr	r3, [pc, #548]	; (800a77c <_vfiprintf_r+0x240>)
 800a556:	429d      	cmp	r5, r3
 800a558:	d11b      	bne.n	800a592 <_vfiprintf_r+0x56>
 800a55a:	6875      	ldr	r5, [r6, #4]
 800a55c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a55e:	07d9      	lsls	r1, r3, #31
 800a560:	d405      	bmi.n	800a56e <_vfiprintf_r+0x32>
 800a562:	89ab      	ldrh	r3, [r5, #12]
 800a564:	059a      	lsls	r2, r3, #22
 800a566:	d402      	bmi.n	800a56e <_vfiprintf_r+0x32>
 800a568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a56a:	f000 fba5 	bl	800acb8 <__retarget_lock_acquire_recursive>
 800a56e:	89ab      	ldrh	r3, [r5, #12]
 800a570:	071b      	lsls	r3, r3, #28
 800a572:	d501      	bpl.n	800a578 <_vfiprintf_r+0x3c>
 800a574:	692b      	ldr	r3, [r5, #16]
 800a576:	b9eb      	cbnz	r3, 800a5b4 <_vfiprintf_r+0x78>
 800a578:	4629      	mov	r1, r5
 800a57a:	4630      	mov	r0, r6
 800a57c:	f000 f96e 	bl	800a85c <__swsetup_r>
 800a580:	b1c0      	cbz	r0, 800a5b4 <_vfiprintf_r+0x78>
 800a582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a584:	07dc      	lsls	r4, r3, #31
 800a586:	d50e      	bpl.n	800a5a6 <_vfiprintf_r+0x6a>
 800a588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a58c:	b01d      	add	sp, #116	; 0x74
 800a58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a592:	4b7b      	ldr	r3, [pc, #492]	; (800a780 <_vfiprintf_r+0x244>)
 800a594:	429d      	cmp	r5, r3
 800a596:	d101      	bne.n	800a59c <_vfiprintf_r+0x60>
 800a598:	68b5      	ldr	r5, [r6, #8]
 800a59a:	e7df      	b.n	800a55c <_vfiprintf_r+0x20>
 800a59c:	4b79      	ldr	r3, [pc, #484]	; (800a784 <_vfiprintf_r+0x248>)
 800a59e:	429d      	cmp	r5, r3
 800a5a0:	bf08      	it	eq
 800a5a2:	68f5      	ldreq	r5, [r6, #12]
 800a5a4:	e7da      	b.n	800a55c <_vfiprintf_r+0x20>
 800a5a6:	89ab      	ldrh	r3, [r5, #12]
 800a5a8:	0598      	lsls	r0, r3, #22
 800a5aa:	d4ed      	bmi.n	800a588 <_vfiprintf_r+0x4c>
 800a5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5ae:	f000 fb84 	bl	800acba <__retarget_lock_release_recursive>
 800a5b2:	e7e9      	b.n	800a588 <_vfiprintf_r+0x4c>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b8:	2320      	movs	r3, #32
 800a5ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5be:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5c2:	2330      	movs	r3, #48	; 0x30
 800a5c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a788 <_vfiprintf_r+0x24c>
 800a5c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5cc:	f04f 0901 	mov.w	r9, #1
 800a5d0:	4623      	mov	r3, r4
 800a5d2:	469a      	mov	sl, r3
 800a5d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5d8:	b10a      	cbz	r2, 800a5de <_vfiprintf_r+0xa2>
 800a5da:	2a25      	cmp	r2, #37	; 0x25
 800a5dc:	d1f9      	bne.n	800a5d2 <_vfiprintf_r+0x96>
 800a5de:	ebba 0b04 	subs.w	fp, sl, r4
 800a5e2:	d00b      	beq.n	800a5fc <_vfiprintf_r+0xc0>
 800a5e4:	465b      	mov	r3, fp
 800a5e6:	4622      	mov	r2, r4
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f7ff ff93 	bl	800a516 <__sfputs_r>
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	f000 80aa 	beq.w	800a74a <_vfiprintf_r+0x20e>
 800a5f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5f8:	445a      	add	r2, fp
 800a5fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a5fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 80a2 	beq.w	800a74a <_vfiprintf_r+0x20e>
 800a606:	2300      	movs	r3, #0
 800a608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a60c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a610:	f10a 0a01 	add.w	sl, sl, #1
 800a614:	9304      	str	r3, [sp, #16]
 800a616:	9307      	str	r3, [sp, #28]
 800a618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a61c:	931a      	str	r3, [sp, #104]	; 0x68
 800a61e:	4654      	mov	r4, sl
 800a620:	2205      	movs	r2, #5
 800a622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a626:	4858      	ldr	r0, [pc, #352]	; (800a788 <_vfiprintf_r+0x24c>)
 800a628:	f7f5 fe02 	bl	8000230 <memchr>
 800a62c:	9a04      	ldr	r2, [sp, #16]
 800a62e:	b9d8      	cbnz	r0, 800a668 <_vfiprintf_r+0x12c>
 800a630:	06d1      	lsls	r1, r2, #27
 800a632:	bf44      	itt	mi
 800a634:	2320      	movmi	r3, #32
 800a636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a63a:	0713      	lsls	r3, r2, #28
 800a63c:	bf44      	itt	mi
 800a63e:	232b      	movmi	r3, #43	; 0x2b
 800a640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a644:	f89a 3000 	ldrb.w	r3, [sl]
 800a648:	2b2a      	cmp	r3, #42	; 0x2a
 800a64a:	d015      	beq.n	800a678 <_vfiprintf_r+0x13c>
 800a64c:	9a07      	ldr	r2, [sp, #28]
 800a64e:	4654      	mov	r4, sl
 800a650:	2000      	movs	r0, #0
 800a652:	f04f 0c0a 	mov.w	ip, #10
 800a656:	4621      	mov	r1, r4
 800a658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a65c:	3b30      	subs	r3, #48	; 0x30
 800a65e:	2b09      	cmp	r3, #9
 800a660:	d94e      	bls.n	800a700 <_vfiprintf_r+0x1c4>
 800a662:	b1b0      	cbz	r0, 800a692 <_vfiprintf_r+0x156>
 800a664:	9207      	str	r2, [sp, #28]
 800a666:	e014      	b.n	800a692 <_vfiprintf_r+0x156>
 800a668:	eba0 0308 	sub.w	r3, r0, r8
 800a66c:	fa09 f303 	lsl.w	r3, r9, r3
 800a670:	4313      	orrs	r3, r2
 800a672:	9304      	str	r3, [sp, #16]
 800a674:	46a2      	mov	sl, r4
 800a676:	e7d2      	b.n	800a61e <_vfiprintf_r+0xe2>
 800a678:	9b03      	ldr	r3, [sp, #12]
 800a67a:	1d19      	adds	r1, r3, #4
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	9103      	str	r1, [sp, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	bfbb      	ittet	lt
 800a684:	425b      	neglt	r3, r3
 800a686:	f042 0202 	orrlt.w	r2, r2, #2
 800a68a:	9307      	strge	r3, [sp, #28]
 800a68c:	9307      	strlt	r3, [sp, #28]
 800a68e:	bfb8      	it	lt
 800a690:	9204      	strlt	r2, [sp, #16]
 800a692:	7823      	ldrb	r3, [r4, #0]
 800a694:	2b2e      	cmp	r3, #46	; 0x2e
 800a696:	d10c      	bne.n	800a6b2 <_vfiprintf_r+0x176>
 800a698:	7863      	ldrb	r3, [r4, #1]
 800a69a:	2b2a      	cmp	r3, #42	; 0x2a
 800a69c:	d135      	bne.n	800a70a <_vfiprintf_r+0x1ce>
 800a69e:	9b03      	ldr	r3, [sp, #12]
 800a6a0:	1d1a      	adds	r2, r3, #4
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	9203      	str	r2, [sp, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	bfb8      	it	lt
 800a6aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a6ae:	3402      	adds	r4, #2
 800a6b0:	9305      	str	r3, [sp, #20]
 800a6b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a798 <_vfiprintf_r+0x25c>
 800a6b6:	7821      	ldrb	r1, [r4, #0]
 800a6b8:	2203      	movs	r2, #3
 800a6ba:	4650      	mov	r0, sl
 800a6bc:	f7f5 fdb8 	bl	8000230 <memchr>
 800a6c0:	b140      	cbz	r0, 800a6d4 <_vfiprintf_r+0x198>
 800a6c2:	2340      	movs	r3, #64	; 0x40
 800a6c4:	eba0 000a 	sub.w	r0, r0, sl
 800a6c8:	fa03 f000 	lsl.w	r0, r3, r0
 800a6cc:	9b04      	ldr	r3, [sp, #16]
 800a6ce:	4303      	orrs	r3, r0
 800a6d0:	3401      	adds	r4, #1
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d8:	482c      	ldr	r0, [pc, #176]	; (800a78c <_vfiprintf_r+0x250>)
 800a6da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6de:	2206      	movs	r2, #6
 800a6e0:	f7f5 fda6 	bl	8000230 <memchr>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d03f      	beq.n	800a768 <_vfiprintf_r+0x22c>
 800a6e8:	4b29      	ldr	r3, [pc, #164]	; (800a790 <_vfiprintf_r+0x254>)
 800a6ea:	bb1b      	cbnz	r3, 800a734 <_vfiprintf_r+0x1f8>
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	3307      	adds	r3, #7
 800a6f0:	f023 0307 	bic.w	r3, r3, #7
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	9303      	str	r3, [sp, #12]
 800a6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fa:	443b      	add	r3, r7
 800a6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6fe:	e767      	b.n	800a5d0 <_vfiprintf_r+0x94>
 800a700:	fb0c 3202 	mla	r2, ip, r2, r3
 800a704:	460c      	mov	r4, r1
 800a706:	2001      	movs	r0, #1
 800a708:	e7a5      	b.n	800a656 <_vfiprintf_r+0x11a>
 800a70a:	2300      	movs	r3, #0
 800a70c:	3401      	adds	r4, #1
 800a70e:	9305      	str	r3, [sp, #20]
 800a710:	4619      	mov	r1, r3
 800a712:	f04f 0c0a 	mov.w	ip, #10
 800a716:	4620      	mov	r0, r4
 800a718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a71c:	3a30      	subs	r2, #48	; 0x30
 800a71e:	2a09      	cmp	r2, #9
 800a720:	d903      	bls.n	800a72a <_vfiprintf_r+0x1ee>
 800a722:	2b00      	cmp	r3, #0
 800a724:	d0c5      	beq.n	800a6b2 <_vfiprintf_r+0x176>
 800a726:	9105      	str	r1, [sp, #20]
 800a728:	e7c3      	b.n	800a6b2 <_vfiprintf_r+0x176>
 800a72a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a72e:	4604      	mov	r4, r0
 800a730:	2301      	movs	r3, #1
 800a732:	e7f0      	b.n	800a716 <_vfiprintf_r+0x1da>
 800a734:	ab03      	add	r3, sp, #12
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	462a      	mov	r2, r5
 800a73a:	4b16      	ldr	r3, [pc, #88]	; (800a794 <_vfiprintf_r+0x258>)
 800a73c:	a904      	add	r1, sp, #16
 800a73e:	4630      	mov	r0, r6
 800a740:	f7fd fe24 	bl	800838c <_printf_float>
 800a744:	4607      	mov	r7, r0
 800a746:	1c78      	adds	r0, r7, #1
 800a748:	d1d6      	bne.n	800a6f8 <_vfiprintf_r+0x1bc>
 800a74a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a74c:	07d9      	lsls	r1, r3, #31
 800a74e:	d405      	bmi.n	800a75c <_vfiprintf_r+0x220>
 800a750:	89ab      	ldrh	r3, [r5, #12]
 800a752:	059a      	lsls	r2, r3, #22
 800a754:	d402      	bmi.n	800a75c <_vfiprintf_r+0x220>
 800a756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a758:	f000 faaf 	bl	800acba <__retarget_lock_release_recursive>
 800a75c:	89ab      	ldrh	r3, [r5, #12]
 800a75e:	065b      	lsls	r3, r3, #25
 800a760:	f53f af12 	bmi.w	800a588 <_vfiprintf_r+0x4c>
 800a764:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a766:	e711      	b.n	800a58c <_vfiprintf_r+0x50>
 800a768:	ab03      	add	r3, sp, #12
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	462a      	mov	r2, r5
 800a76e:	4b09      	ldr	r3, [pc, #36]	; (800a794 <_vfiprintf_r+0x258>)
 800a770:	a904      	add	r1, sp, #16
 800a772:	4630      	mov	r0, r6
 800a774:	f7fe f8ae 	bl	80088d4 <_printf_i>
 800a778:	e7e4      	b.n	800a744 <_vfiprintf_r+0x208>
 800a77a:	bf00      	nop
 800a77c:	0800e1fc 	.word	0x0800e1fc
 800a780:	0800e21c 	.word	0x0800e21c
 800a784:	0800e1dc 	.word	0x0800e1dc
 800a788:	0800e084 	.word	0x0800e084
 800a78c:	0800e08e 	.word	0x0800e08e
 800a790:	0800838d 	.word	0x0800838d
 800a794:	0800a517 	.word	0x0800a517
 800a798:	0800e08a 	.word	0x0800e08a

0800a79c <__swbuf_r>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	460e      	mov	r6, r1
 800a7a0:	4614      	mov	r4, r2
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	b118      	cbz	r0, 800a7ae <__swbuf_r+0x12>
 800a7a6:	6983      	ldr	r3, [r0, #24]
 800a7a8:	b90b      	cbnz	r3, 800a7ae <__swbuf_r+0x12>
 800a7aa:	f000 f9e7 	bl	800ab7c <__sinit>
 800a7ae:	4b21      	ldr	r3, [pc, #132]	; (800a834 <__swbuf_r+0x98>)
 800a7b0:	429c      	cmp	r4, r3
 800a7b2:	d12b      	bne.n	800a80c <__swbuf_r+0x70>
 800a7b4:	686c      	ldr	r4, [r5, #4]
 800a7b6:	69a3      	ldr	r3, [r4, #24]
 800a7b8:	60a3      	str	r3, [r4, #8]
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	071a      	lsls	r2, r3, #28
 800a7be:	d52f      	bpl.n	800a820 <__swbuf_r+0x84>
 800a7c0:	6923      	ldr	r3, [r4, #16]
 800a7c2:	b36b      	cbz	r3, 800a820 <__swbuf_r+0x84>
 800a7c4:	6923      	ldr	r3, [r4, #16]
 800a7c6:	6820      	ldr	r0, [r4, #0]
 800a7c8:	1ac0      	subs	r0, r0, r3
 800a7ca:	6963      	ldr	r3, [r4, #20]
 800a7cc:	b2f6      	uxtb	r6, r6
 800a7ce:	4283      	cmp	r3, r0
 800a7d0:	4637      	mov	r7, r6
 800a7d2:	dc04      	bgt.n	800a7de <__swbuf_r+0x42>
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f000 f93c 	bl	800aa54 <_fflush_r>
 800a7dc:	bb30      	cbnz	r0, 800a82c <__swbuf_r+0x90>
 800a7de:	68a3      	ldr	r3, [r4, #8]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	60a3      	str	r3, [r4, #8]
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	1c5a      	adds	r2, r3, #1
 800a7e8:	6022      	str	r2, [r4, #0]
 800a7ea:	701e      	strb	r6, [r3, #0]
 800a7ec:	6963      	ldr	r3, [r4, #20]
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	4283      	cmp	r3, r0
 800a7f2:	d004      	beq.n	800a7fe <__swbuf_r+0x62>
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	07db      	lsls	r3, r3, #31
 800a7f8:	d506      	bpl.n	800a808 <__swbuf_r+0x6c>
 800a7fa:	2e0a      	cmp	r6, #10
 800a7fc:	d104      	bne.n	800a808 <__swbuf_r+0x6c>
 800a7fe:	4621      	mov	r1, r4
 800a800:	4628      	mov	r0, r5
 800a802:	f000 f927 	bl	800aa54 <_fflush_r>
 800a806:	b988      	cbnz	r0, 800a82c <__swbuf_r+0x90>
 800a808:	4638      	mov	r0, r7
 800a80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a80c:	4b0a      	ldr	r3, [pc, #40]	; (800a838 <__swbuf_r+0x9c>)
 800a80e:	429c      	cmp	r4, r3
 800a810:	d101      	bne.n	800a816 <__swbuf_r+0x7a>
 800a812:	68ac      	ldr	r4, [r5, #8]
 800a814:	e7cf      	b.n	800a7b6 <__swbuf_r+0x1a>
 800a816:	4b09      	ldr	r3, [pc, #36]	; (800a83c <__swbuf_r+0xa0>)
 800a818:	429c      	cmp	r4, r3
 800a81a:	bf08      	it	eq
 800a81c:	68ec      	ldreq	r4, [r5, #12]
 800a81e:	e7ca      	b.n	800a7b6 <__swbuf_r+0x1a>
 800a820:	4621      	mov	r1, r4
 800a822:	4628      	mov	r0, r5
 800a824:	f000 f81a 	bl	800a85c <__swsetup_r>
 800a828:	2800      	cmp	r0, #0
 800a82a:	d0cb      	beq.n	800a7c4 <__swbuf_r+0x28>
 800a82c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a830:	e7ea      	b.n	800a808 <__swbuf_r+0x6c>
 800a832:	bf00      	nop
 800a834:	0800e1fc 	.word	0x0800e1fc
 800a838:	0800e21c 	.word	0x0800e21c
 800a83c:	0800e1dc 	.word	0x0800e1dc

0800a840 <__ascii_wctomb>:
 800a840:	b149      	cbz	r1, 800a856 <__ascii_wctomb+0x16>
 800a842:	2aff      	cmp	r2, #255	; 0xff
 800a844:	bf85      	ittet	hi
 800a846:	238a      	movhi	r3, #138	; 0x8a
 800a848:	6003      	strhi	r3, [r0, #0]
 800a84a:	700a      	strbls	r2, [r1, #0]
 800a84c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a850:	bf98      	it	ls
 800a852:	2001      	movls	r0, #1
 800a854:	4770      	bx	lr
 800a856:	4608      	mov	r0, r1
 800a858:	4770      	bx	lr
	...

0800a85c <__swsetup_r>:
 800a85c:	4b32      	ldr	r3, [pc, #200]	; (800a928 <__swsetup_r+0xcc>)
 800a85e:	b570      	push	{r4, r5, r6, lr}
 800a860:	681d      	ldr	r5, [r3, #0]
 800a862:	4606      	mov	r6, r0
 800a864:	460c      	mov	r4, r1
 800a866:	b125      	cbz	r5, 800a872 <__swsetup_r+0x16>
 800a868:	69ab      	ldr	r3, [r5, #24]
 800a86a:	b913      	cbnz	r3, 800a872 <__swsetup_r+0x16>
 800a86c:	4628      	mov	r0, r5
 800a86e:	f000 f985 	bl	800ab7c <__sinit>
 800a872:	4b2e      	ldr	r3, [pc, #184]	; (800a92c <__swsetup_r+0xd0>)
 800a874:	429c      	cmp	r4, r3
 800a876:	d10f      	bne.n	800a898 <__swsetup_r+0x3c>
 800a878:	686c      	ldr	r4, [r5, #4]
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a880:	0719      	lsls	r1, r3, #28
 800a882:	d42c      	bmi.n	800a8de <__swsetup_r+0x82>
 800a884:	06dd      	lsls	r5, r3, #27
 800a886:	d411      	bmi.n	800a8ac <__swsetup_r+0x50>
 800a888:	2309      	movs	r3, #9
 800a88a:	6033      	str	r3, [r6, #0]
 800a88c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a890:	81a3      	strh	r3, [r4, #12]
 800a892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a896:	e03e      	b.n	800a916 <__swsetup_r+0xba>
 800a898:	4b25      	ldr	r3, [pc, #148]	; (800a930 <__swsetup_r+0xd4>)
 800a89a:	429c      	cmp	r4, r3
 800a89c:	d101      	bne.n	800a8a2 <__swsetup_r+0x46>
 800a89e:	68ac      	ldr	r4, [r5, #8]
 800a8a0:	e7eb      	b.n	800a87a <__swsetup_r+0x1e>
 800a8a2:	4b24      	ldr	r3, [pc, #144]	; (800a934 <__swsetup_r+0xd8>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	bf08      	it	eq
 800a8a8:	68ec      	ldreq	r4, [r5, #12]
 800a8aa:	e7e6      	b.n	800a87a <__swsetup_r+0x1e>
 800a8ac:	0758      	lsls	r0, r3, #29
 800a8ae:	d512      	bpl.n	800a8d6 <__swsetup_r+0x7a>
 800a8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8b2:	b141      	cbz	r1, 800a8c6 <__swsetup_r+0x6a>
 800a8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8b8:	4299      	cmp	r1, r3
 800a8ba:	d002      	beq.n	800a8c2 <__swsetup_r+0x66>
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7ff fb6f 	bl	8009fa0 <_free_r>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8cc:	81a3      	strh	r3, [r4, #12]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6063      	str	r3, [r4, #4]
 800a8d2:	6923      	ldr	r3, [r4, #16]
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	f043 0308 	orr.w	r3, r3, #8
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	b94b      	cbnz	r3, 800a8f6 <__swsetup_r+0x9a>
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ec:	d003      	beq.n	800a8f6 <__swsetup_r+0x9a>
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f000 fa07 	bl	800ad04 <__smakebuf_r>
 800a8f6:	89a0      	ldrh	r0, [r4, #12]
 800a8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8fc:	f010 0301 	ands.w	r3, r0, #1
 800a900:	d00a      	beq.n	800a918 <__swsetup_r+0xbc>
 800a902:	2300      	movs	r3, #0
 800a904:	60a3      	str	r3, [r4, #8]
 800a906:	6963      	ldr	r3, [r4, #20]
 800a908:	425b      	negs	r3, r3
 800a90a:	61a3      	str	r3, [r4, #24]
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	b943      	cbnz	r3, 800a922 <__swsetup_r+0xc6>
 800a910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a914:	d1ba      	bne.n	800a88c <__swsetup_r+0x30>
 800a916:	bd70      	pop	{r4, r5, r6, pc}
 800a918:	0781      	lsls	r1, r0, #30
 800a91a:	bf58      	it	pl
 800a91c:	6963      	ldrpl	r3, [r4, #20]
 800a91e:	60a3      	str	r3, [r4, #8]
 800a920:	e7f4      	b.n	800a90c <__swsetup_r+0xb0>
 800a922:	2000      	movs	r0, #0
 800a924:	e7f7      	b.n	800a916 <__swsetup_r+0xba>
 800a926:	bf00      	nop
 800a928:	20000014 	.word	0x20000014
 800a92c:	0800e1fc 	.word	0x0800e1fc
 800a930:	0800e21c 	.word	0x0800e21c
 800a934:	0800e1dc 	.word	0x0800e1dc

0800a938 <abort>:
 800a938:	b508      	push	{r3, lr}
 800a93a:	2006      	movs	r0, #6
 800a93c:	f000 fa52 	bl	800ade4 <raise>
 800a940:	2001      	movs	r0, #1
 800a942:	f7f7 fedf 	bl	8002704 <_exit>
	...

0800a948 <__sflush_r>:
 800a948:	898a      	ldrh	r2, [r1, #12]
 800a94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a94e:	4605      	mov	r5, r0
 800a950:	0710      	lsls	r0, r2, #28
 800a952:	460c      	mov	r4, r1
 800a954:	d458      	bmi.n	800aa08 <__sflush_r+0xc0>
 800a956:	684b      	ldr	r3, [r1, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	dc05      	bgt.n	800a968 <__sflush_r+0x20>
 800a95c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a95e:	2b00      	cmp	r3, #0
 800a960:	dc02      	bgt.n	800a968 <__sflush_r+0x20>
 800a962:	2000      	movs	r0, #0
 800a964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a96a:	2e00      	cmp	r6, #0
 800a96c:	d0f9      	beq.n	800a962 <__sflush_r+0x1a>
 800a96e:	2300      	movs	r3, #0
 800a970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a974:	682f      	ldr	r7, [r5, #0]
 800a976:	602b      	str	r3, [r5, #0]
 800a978:	d032      	beq.n	800a9e0 <__sflush_r+0x98>
 800a97a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	075a      	lsls	r2, r3, #29
 800a980:	d505      	bpl.n	800a98e <__sflush_r+0x46>
 800a982:	6863      	ldr	r3, [r4, #4]
 800a984:	1ac0      	subs	r0, r0, r3
 800a986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a988:	b10b      	cbz	r3, 800a98e <__sflush_r+0x46>
 800a98a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a98c:	1ac0      	subs	r0, r0, r3
 800a98e:	2300      	movs	r3, #0
 800a990:	4602      	mov	r2, r0
 800a992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a994:	6a21      	ldr	r1, [r4, #32]
 800a996:	4628      	mov	r0, r5
 800a998:	47b0      	blx	r6
 800a99a:	1c43      	adds	r3, r0, #1
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	d106      	bne.n	800a9ae <__sflush_r+0x66>
 800a9a0:	6829      	ldr	r1, [r5, #0]
 800a9a2:	291d      	cmp	r1, #29
 800a9a4:	d82c      	bhi.n	800aa00 <__sflush_r+0xb8>
 800a9a6:	4a2a      	ldr	r2, [pc, #168]	; (800aa50 <__sflush_r+0x108>)
 800a9a8:	40ca      	lsrs	r2, r1
 800a9aa:	07d6      	lsls	r6, r2, #31
 800a9ac:	d528      	bpl.n	800aa00 <__sflush_r+0xb8>
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	6062      	str	r2, [r4, #4]
 800a9b2:	04d9      	lsls	r1, r3, #19
 800a9b4:	6922      	ldr	r2, [r4, #16]
 800a9b6:	6022      	str	r2, [r4, #0]
 800a9b8:	d504      	bpl.n	800a9c4 <__sflush_r+0x7c>
 800a9ba:	1c42      	adds	r2, r0, #1
 800a9bc:	d101      	bne.n	800a9c2 <__sflush_r+0x7a>
 800a9be:	682b      	ldr	r3, [r5, #0]
 800a9c0:	b903      	cbnz	r3, 800a9c4 <__sflush_r+0x7c>
 800a9c2:	6560      	str	r0, [r4, #84]	; 0x54
 800a9c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9c6:	602f      	str	r7, [r5, #0]
 800a9c8:	2900      	cmp	r1, #0
 800a9ca:	d0ca      	beq.n	800a962 <__sflush_r+0x1a>
 800a9cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9d0:	4299      	cmp	r1, r3
 800a9d2:	d002      	beq.n	800a9da <__sflush_r+0x92>
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	f7ff fae3 	bl	8009fa0 <_free_r>
 800a9da:	2000      	movs	r0, #0
 800a9dc:	6360      	str	r0, [r4, #52]	; 0x34
 800a9de:	e7c1      	b.n	800a964 <__sflush_r+0x1c>
 800a9e0:	6a21      	ldr	r1, [r4, #32]
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	47b0      	blx	r6
 800a9e8:	1c41      	adds	r1, r0, #1
 800a9ea:	d1c7      	bne.n	800a97c <__sflush_r+0x34>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0c4      	beq.n	800a97c <__sflush_r+0x34>
 800a9f2:	2b1d      	cmp	r3, #29
 800a9f4:	d001      	beq.n	800a9fa <__sflush_r+0xb2>
 800a9f6:	2b16      	cmp	r3, #22
 800a9f8:	d101      	bne.n	800a9fe <__sflush_r+0xb6>
 800a9fa:	602f      	str	r7, [r5, #0]
 800a9fc:	e7b1      	b.n	800a962 <__sflush_r+0x1a>
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa04:	81a3      	strh	r3, [r4, #12]
 800aa06:	e7ad      	b.n	800a964 <__sflush_r+0x1c>
 800aa08:	690f      	ldr	r7, [r1, #16]
 800aa0a:	2f00      	cmp	r7, #0
 800aa0c:	d0a9      	beq.n	800a962 <__sflush_r+0x1a>
 800aa0e:	0793      	lsls	r3, r2, #30
 800aa10:	680e      	ldr	r6, [r1, #0]
 800aa12:	bf08      	it	eq
 800aa14:	694b      	ldreq	r3, [r1, #20]
 800aa16:	600f      	str	r7, [r1, #0]
 800aa18:	bf18      	it	ne
 800aa1a:	2300      	movne	r3, #0
 800aa1c:	eba6 0807 	sub.w	r8, r6, r7
 800aa20:	608b      	str	r3, [r1, #8]
 800aa22:	f1b8 0f00 	cmp.w	r8, #0
 800aa26:	dd9c      	ble.n	800a962 <__sflush_r+0x1a>
 800aa28:	6a21      	ldr	r1, [r4, #32]
 800aa2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa2c:	4643      	mov	r3, r8
 800aa2e:	463a      	mov	r2, r7
 800aa30:	4628      	mov	r0, r5
 800aa32:	47b0      	blx	r6
 800aa34:	2800      	cmp	r0, #0
 800aa36:	dc06      	bgt.n	800aa46 <__sflush_r+0xfe>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa44:	e78e      	b.n	800a964 <__sflush_r+0x1c>
 800aa46:	4407      	add	r7, r0
 800aa48:	eba8 0800 	sub.w	r8, r8, r0
 800aa4c:	e7e9      	b.n	800aa22 <__sflush_r+0xda>
 800aa4e:	bf00      	nop
 800aa50:	20400001 	.word	0x20400001

0800aa54 <_fflush_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	690b      	ldr	r3, [r1, #16]
 800aa58:	4605      	mov	r5, r0
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	b913      	cbnz	r3, 800aa64 <_fflush_r+0x10>
 800aa5e:	2500      	movs	r5, #0
 800aa60:	4628      	mov	r0, r5
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	b118      	cbz	r0, 800aa6e <_fflush_r+0x1a>
 800aa66:	6983      	ldr	r3, [r0, #24]
 800aa68:	b90b      	cbnz	r3, 800aa6e <_fflush_r+0x1a>
 800aa6a:	f000 f887 	bl	800ab7c <__sinit>
 800aa6e:	4b14      	ldr	r3, [pc, #80]	; (800aac0 <_fflush_r+0x6c>)
 800aa70:	429c      	cmp	r4, r3
 800aa72:	d11b      	bne.n	800aaac <_fflush_r+0x58>
 800aa74:	686c      	ldr	r4, [r5, #4]
 800aa76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0ef      	beq.n	800aa5e <_fflush_r+0xa>
 800aa7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa80:	07d0      	lsls	r0, r2, #31
 800aa82:	d404      	bmi.n	800aa8e <_fflush_r+0x3a>
 800aa84:	0599      	lsls	r1, r3, #22
 800aa86:	d402      	bmi.n	800aa8e <_fflush_r+0x3a>
 800aa88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa8a:	f000 f915 	bl	800acb8 <__retarget_lock_acquire_recursive>
 800aa8e:	4628      	mov	r0, r5
 800aa90:	4621      	mov	r1, r4
 800aa92:	f7ff ff59 	bl	800a948 <__sflush_r>
 800aa96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa98:	07da      	lsls	r2, r3, #31
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	d4e0      	bmi.n	800aa60 <_fflush_r+0xc>
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	059b      	lsls	r3, r3, #22
 800aaa2:	d4dd      	bmi.n	800aa60 <_fflush_r+0xc>
 800aaa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaa6:	f000 f908 	bl	800acba <__retarget_lock_release_recursive>
 800aaaa:	e7d9      	b.n	800aa60 <_fflush_r+0xc>
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <_fflush_r+0x70>)
 800aaae:	429c      	cmp	r4, r3
 800aab0:	d101      	bne.n	800aab6 <_fflush_r+0x62>
 800aab2:	68ac      	ldr	r4, [r5, #8]
 800aab4:	e7df      	b.n	800aa76 <_fflush_r+0x22>
 800aab6:	4b04      	ldr	r3, [pc, #16]	; (800aac8 <_fflush_r+0x74>)
 800aab8:	429c      	cmp	r4, r3
 800aaba:	bf08      	it	eq
 800aabc:	68ec      	ldreq	r4, [r5, #12]
 800aabe:	e7da      	b.n	800aa76 <_fflush_r+0x22>
 800aac0:	0800e1fc 	.word	0x0800e1fc
 800aac4:	0800e21c 	.word	0x0800e21c
 800aac8:	0800e1dc 	.word	0x0800e1dc

0800aacc <std>:
 800aacc:	2300      	movs	r3, #0
 800aace:	b510      	push	{r4, lr}
 800aad0:	4604      	mov	r4, r0
 800aad2:	e9c0 3300 	strd	r3, r3, [r0]
 800aad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aada:	6083      	str	r3, [r0, #8]
 800aadc:	8181      	strh	r1, [r0, #12]
 800aade:	6643      	str	r3, [r0, #100]	; 0x64
 800aae0:	81c2      	strh	r2, [r0, #14]
 800aae2:	6183      	str	r3, [r0, #24]
 800aae4:	4619      	mov	r1, r3
 800aae6:	2208      	movs	r2, #8
 800aae8:	305c      	adds	r0, #92	; 0x5c
 800aaea:	f7fd fba7 	bl	800823c <memset>
 800aaee:	4b05      	ldr	r3, [pc, #20]	; (800ab04 <std+0x38>)
 800aaf0:	6263      	str	r3, [r4, #36]	; 0x24
 800aaf2:	4b05      	ldr	r3, [pc, #20]	; (800ab08 <std+0x3c>)
 800aaf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aaf6:	4b05      	ldr	r3, [pc, #20]	; (800ab0c <std+0x40>)
 800aaf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <std+0x44>)
 800aafc:	6224      	str	r4, [r4, #32]
 800aafe:	6323      	str	r3, [r4, #48]	; 0x30
 800ab00:	bd10      	pop	{r4, pc}
 800ab02:	bf00      	nop
 800ab04:	0800ae1d 	.word	0x0800ae1d
 800ab08:	0800ae3f 	.word	0x0800ae3f
 800ab0c:	0800ae77 	.word	0x0800ae77
 800ab10:	0800ae9b 	.word	0x0800ae9b

0800ab14 <_cleanup_r>:
 800ab14:	4901      	ldr	r1, [pc, #4]	; (800ab1c <_cleanup_r+0x8>)
 800ab16:	f000 b8af 	b.w	800ac78 <_fwalk_reent>
 800ab1a:	bf00      	nop
 800ab1c:	0800aa55 	.word	0x0800aa55

0800ab20 <__sfmoreglue>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	1e4a      	subs	r2, r1, #1
 800ab24:	2568      	movs	r5, #104	; 0x68
 800ab26:	4355      	muls	r5, r2
 800ab28:	460e      	mov	r6, r1
 800ab2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab2e:	f7ff fa87 	bl	800a040 <_malloc_r>
 800ab32:	4604      	mov	r4, r0
 800ab34:	b140      	cbz	r0, 800ab48 <__sfmoreglue+0x28>
 800ab36:	2100      	movs	r1, #0
 800ab38:	e9c0 1600 	strd	r1, r6, [r0]
 800ab3c:	300c      	adds	r0, #12
 800ab3e:	60a0      	str	r0, [r4, #8]
 800ab40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab44:	f7fd fb7a 	bl	800823c <memset>
 800ab48:	4620      	mov	r0, r4
 800ab4a:	bd70      	pop	{r4, r5, r6, pc}

0800ab4c <__sfp_lock_acquire>:
 800ab4c:	4801      	ldr	r0, [pc, #4]	; (800ab54 <__sfp_lock_acquire+0x8>)
 800ab4e:	f000 b8b3 	b.w	800acb8 <__retarget_lock_acquire_recursive>
 800ab52:	bf00      	nop
 800ab54:	20001bb0 	.word	0x20001bb0

0800ab58 <__sfp_lock_release>:
 800ab58:	4801      	ldr	r0, [pc, #4]	; (800ab60 <__sfp_lock_release+0x8>)
 800ab5a:	f000 b8ae 	b.w	800acba <__retarget_lock_release_recursive>
 800ab5e:	bf00      	nop
 800ab60:	20001bb0 	.word	0x20001bb0

0800ab64 <__sinit_lock_acquire>:
 800ab64:	4801      	ldr	r0, [pc, #4]	; (800ab6c <__sinit_lock_acquire+0x8>)
 800ab66:	f000 b8a7 	b.w	800acb8 <__retarget_lock_acquire_recursive>
 800ab6a:	bf00      	nop
 800ab6c:	20001bab 	.word	0x20001bab

0800ab70 <__sinit_lock_release>:
 800ab70:	4801      	ldr	r0, [pc, #4]	; (800ab78 <__sinit_lock_release+0x8>)
 800ab72:	f000 b8a2 	b.w	800acba <__retarget_lock_release_recursive>
 800ab76:	bf00      	nop
 800ab78:	20001bab 	.word	0x20001bab

0800ab7c <__sinit>:
 800ab7c:	b510      	push	{r4, lr}
 800ab7e:	4604      	mov	r4, r0
 800ab80:	f7ff fff0 	bl	800ab64 <__sinit_lock_acquire>
 800ab84:	69a3      	ldr	r3, [r4, #24]
 800ab86:	b11b      	cbz	r3, 800ab90 <__sinit+0x14>
 800ab88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab8c:	f7ff bff0 	b.w	800ab70 <__sinit_lock_release>
 800ab90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab94:	6523      	str	r3, [r4, #80]	; 0x50
 800ab96:	4b13      	ldr	r3, [pc, #76]	; (800abe4 <__sinit+0x68>)
 800ab98:	4a13      	ldr	r2, [pc, #76]	; (800abe8 <__sinit+0x6c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab9e:	42a3      	cmp	r3, r4
 800aba0:	bf04      	itt	eq
 800aba2:	2301      	moveq	r3, #1
 800aba4:	61a3      	streq	r3, [r4, #24]
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 f820 	bl	800abec <__sfp>
 800abac:	6060      	str	r0, [r4, #4]
 800abae:	4620      	mov	r0, r4
 800abb0:	f000 f81c 	bl	800abec <__sfp>
 800abb4:	60a0      	str	r0, [r4, #8]
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 f818 	bl	800abec <__sfp>
 800abbc:	2200      	movs	r2, #0
 800abbe:	60e0      	str	r0, [r4, #12]
 800abc0:	2104      	movs	r1, #4
 800abc2:	6860      	ldr	r0, [r4, #4]
 800abc4:	f7ff ff82 	bl	800aacc <std>
 800abc8:	68a0      	ldr	r0, [r4, #8]
 800abca:	2201      	movs	r2, #1
 800abcc:	2109      	movs	r1, #9
 800abce:	f7ff ff7d 	bl	800aacc <std>
 800abd2:	68e0      	ldr	r0, [r4, #12]
 800abd4:	2202      	movs	r2, #2
 800abd6:	2112      	movs	r1, #18
 800abd8:	f7ff ff78 	bl	800aacc <std>
 800abdc:	2301      	movs	r3, #1
 800abde:	61a3      	str	r3, [r4, #24]
 800abe0:	e7d2      	b.n	800ab88 <__sinit+0xc>
 800abe2:	bf00      	nop
 800abe4:	0800de5c 	.word	0x0800de5c
 800abe8:	0800ab15 	.word	0x0800ab15

0800abec <__sfp>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	4607      	mov	r7, r0
 800abf0:	f7ff ffac 	bl	800ab4c <__sfp_lock_acquire>
 800abf4:	4b1e      	ldr	r3, [pc, #120]	; (800ac70 <__sfp+0x84>)
 800abf6:	681e      	ldr	r6, [r3, #0]
 800abf8:	69b3      	ldr	r3, [r6, #24]
 800abfa:	b913      	cbnz	r3, 800ac02 <__sfp+0x16>
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7ff ffbd 	bl	800ab7c <__sinit>
 800ac02:	3648      	adds	r6, #72	; 0x48
 800ac04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	d503      	bpl.n	800ac14 <__sfp+0x28>
 800ac0c:	6833      	ldr	r3, [r6, #0]
 800ac0e:	b30b      	cbz	r3, 800ac54 <__sfp+0x68>
 800ac10:	6836      	ldr	r6, [r6, #0]
 800ac12:	e7f7      	b.n	800ac04 <__sfp+0x18>
 800ac14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac18:	b9d5      	cbnz	r5, 800ac50 <__sfp+0x64>
 800ac1a:	4b16      	ldr	r3, [pc, #88]	; (800ac74 <__sfp+0x88>)
 800ac1c:	60e3      	str	r3, [r4, #12]
 800ac1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac22:	6665      	str	r5, [r4, #100]	; 0x64
 800ac24:	f000 f847 	bl	800acb6 <__retarget_lock_init_recursive>
 800ac28:	f7ff ff96 	bl	800ab58 <__sfp_lock_release>
 800ac2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac34:	6025      	str	r5, [r4, #0]
 800ac36:	61a5      	str	r5, [r4, #24]
 800ac38:	2208      	movs	r2, #8
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac40:	f7fd fafc 	bl	800823c <memset>
 800ac44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac50:	3468      	adds	r4, #104	; 0x68
 800ac52:	e7d9      	b.n	800ac08 <__sfp+0x1c>
 800ac54:	2104      	movs	r1, #4
 800ac56:	4638      	mov	r0, r7
 800ac58:	f7ff ff62 	bl	800ab20 <__sfmoreglue>
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	6030      	str	r0, [r6, #0]
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d1d5      	bne.n	800ac10 <__sfp+0x24>
 800ac64:	f7ff ff78 	bl	800ab58 <__sfp_lock_release>
 800ac68:	230c      	movs	r3, #12
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	e7ee      	b.n	800ac4c <__sfp+0x60>
 800ac6e:	bf00      	nop
 800ac70:	0800de5c 	.word	0x0800de5c
 800ac74:	ffff0001 	.word	0xffff0001

0800ac78 <_fwalk_reent>:
 800ac78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	4688      	mov	r8, r1
 800ac80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac84:	2700      	movs	r7, #0
 800ac86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac8a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac8e:	d505      	bpl.n	800ac9c <_fwalk_reent+0x24>
 800ac90:	6824      	ldr	r4, [r4, #0]
 800ac92:	2c00      	cmp	r4, #0
 800ac94:	d1f7      	bne.n	800ac86 <_fwalk_reent+0xe>
 800ac96:	4638      	mov	r0, r7
 800ac98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9c:	89ab      	ldrh	r3, [r5, #12]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d907      	bls.n	800acb2 <_fwalk_reent+0x3a>
 800aca2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aca6:	3301      	adds	r3, #1
 800aca8:	d003      	beq.n	800acb2 <_fwalk_reent+0x3a>
 800acaa:	4629      	mov	r1, r5
 800acac:	4630      	mov	r0, r6
 800acae:	47c0      	blx	r8
 800acb0:	4307      	orrs	r7, r0
 800acb2:	3568      	adds	r5, #104	; 0x68
 800acb4:	e7e9      	b.n	800ac8a <_fwalk_reent+0x12>

0800acb6 <__retarget_lock_init_recursive>:
 800acb6:	4770      	bx	lr

0800acb8 <__retarget_lock_acquire_recursive>:
 800acb8:	4770      	bx	lr

0800acba <__retarget_lock_release_recursive>:
 800acba:	4770      	bx	lr

0800acbc <__swhatbuf_r>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	460e      	mov	r6, r1
 800acc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc4:	2900      	cmp	r1, #0
 800acc6:	b096      	sub	sp, #88	; 0x58
 800acc8:	4614      	mov	r4, r2
 800acca:	461d      	mov	r5, r3
 800accc:	da07      	bge.n	800acde <__swhatbuf_r+0x22>
 800acce:	2300      	movs	r3, #0
 800acd0:	602b      	str	r3, [r5, #0]
 800acd2:	89b3      	ldrh	r3, [r6, #12]
 800acd4:	061a      	lsls	r2, r3, #24
 800acd6:	d410      	bmi.n	800acfa <__swhatbuf_r+0x3e>
 800acd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acdc:	e00e      	b.n	800acfc <__swhatbuf_r+0x40>
 800acde:	466a      	mov	r2, sp
 800ace0:	f000 f902 	bl	800aee8 <_fstat_r>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	dbf2      	blt.n	800acce <__swhatbuf_r+0x12>
 800ace8:	9a01      	ldr	r2, [sp, #4]
 800acea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acf2:	425a      	negs	r2, r3
 800acf4:	415a      	adcs	r2, r3
 800acf6:	602a      	str	r2, [r5, #0]
 800acf8:	e7ee      	b.n	800acd8 <__swhatbuf_r+0x1c>
 800acfa:	2340      	movs	r3, #64	; 0x40
 800acfc:	2000      	movs	r0, #0
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	b016      	add	sp, #88	; 0x58
 800ad02:	bd70      	pop	{r4, r5, r6, pc}

0800ad04 <__smakebuf_r>:
 800ad04:	898b      	ldrh	r3, [r1, #12]
 800ad06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad08:	079d      	lsls	r5, r3, #30
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	d507      	bpl.n	800ad20 <__smakebuf_r+0x1c>
 800ad10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	6123      	str	r3, [r4, #16]
 800ad18:	2301      	movs	r3, #1
 800ad1a:	6163      	str	r3, [r4, #20]
 800ad1c:	b002      	add	sp, #8
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	ab01      	add	r3, sp, #4
 800ad22:	466a      	mov	r2, sp
 800ad24:	f7ff ffca 	bl	800acbc <__swhatbuf_r>
 800ad28:	9900      	ldr	r1, [sp, #0]
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	f7ff f987 	bl	800a040 <_malloc_r>
 800ad32:	b948      	cbnz	r0, 800ad48 <__smakebuf_r+0x44>
 800ad34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad38:	059a      	lsls	r2, r3, #22
 800ad3a:	d4ef      	bmi.n	800ad1c <__smakebuf_r+0x18>
 800ad3c:	f023 0303 	bic.w	r3, r3, #3
 800ad40:	f043 0302 	orr.w	r3, r3, #2
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	e7e3      	b.n	800ad10 <__smakebuf_r+0xc>
 800ad48:	4b0d      	ldr	r3, [pc, #52]	; (800ad80 <__smakebuf_r+0x7c>)
 800ad4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	6020      	str	r0, [r4, #0]
 800ad50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad54:	81a3      	strh	r3, [r4, #12]
 800ad56:	9b00      	ldr	r3, [sp, #0]
 800ad58:	6163      	str	r3, [r4, #20]
 800ad5a:	9b01      	ldr	r3, [sp, #4]
 800ad5c:	6120      	str	r0, [r4, #16]
 800ad5e:	b15b      	cbz	r3, 800ad78 <__smakebuf_r+0x74>
 800ad60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad64:	4630      	mov	r0, r6
 800ad66:	f000 f8d1 	bl	800af0c <_isatty_r>
 800ad6a:	b128      	cbz	r0, 800ad78 <__smakebuf_r+0x74>
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	f023 0303 	bic.w	r3, r3, #3
 800ad72:	f043 0301 	orr.w	r3, r3, #1
 800ad76:	81a3      	strh	r3, [r4, #12]
 800ad78:	89a0      	ldrh	r0, [r4, #12]
 800ad7a:	4305      	orrs	r5, r0
 800ad7c:	81a5      	strh	r5, [r4, #12]
 800ad7e:	e7cd      	b.n	800ad1c <__smakebuf_r+0x18>
 800ad80:	0800ab15 	.word	0x0800ab15

0800ad84 <_malloc_usable_size_r>:
 800ad84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad88:	1f18      	subs	r0, r3, #4
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	bfbc      	itt	lt
 800ad8e:	580b      	ldrlt	r3, [r1, r0]
 800ad90:	18c0      	addlt	r0, r0, r3
 800ad92:	4770      	bx	lr

0800ad94 <_raise_r>:
 800ad94:	291f      	cmp	r1, #31
 800ad96:	b538      	push	{r3, r4, r5, lr}
 800ad98:	4604      	mov	r4, r0
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	d904      	bls.n	800ada8 <_raise_r+0x14>
 800ad9e:	2316      	movs	r3, #22
 800ada0:	6003      	str	r3, [r0, #0]
 800ada2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adaa:	b112      	cbz	r2, 800adb2 <_raise_r+0x1e>
 800adac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adb0:	b94b      	cbnz	r3, 800adc6 <_raise_r+0x32>
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 f830 	bl	800ae18 <_getpid_r>
 800adb8:	462a      	mov	r2, r5
 800adba:	4601      	mov	r1, r0
 800adbc:	4620      	mov	r0, r4
 800adbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adc2:	f000 b817 	b.w	800adf4 <_kill_r>
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d00a      	beq.n	800ade0 <_raise_r+0x4c>
 800adca:	1c59      	adds	r1, r3, #1
 800adcc:	d103      	bne.n	800add6 <_raise_r+0x42>
 800adce:	2316      	movs	r3, #22
 800add0:	6003      	str	r3, [r0, #0]
 800add2:	2001      	movs	r0, #1
 800add4:	e7e7      	b.n	800ada6 <_raise_r+0x12>
 800add6:	2400      	movs	r4, #0
 800add8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800addc:	4628      	mov	r0, r5
 800adde:	4798      	blx	r3
 800ade0:	2000      	movs	r0, #0
 800ade2:	e7e0      	b.n	800ada6 <_raise_r+0x12>

0800ade4 <raise>:
 800ade4:	4b02      	ldr	r3, [pc, #8]	; (800adf0 <raise+0xc>)
 800ade6:	4601      	mov	r1, r0
 800ade8:	6818      	ldr	r0, [r3, #0]
 800adea:	f7ff bfd3 	b.w	800ad94 <_raise_r>
 800adee:	bf00      	nop
 800adf0:	20000014 	.word	0x20000014

0800adf4 <_kill_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4d07      	ldr	r5, [pc, #28]	; (800ae14 <_kill_r+0x20>)
 800adf8:	2300      	movs	r3, #0
 800adfa:	4604      	mov	r4, r0
 800adfc:	4608      	mov	r0, r1
 800adfe:	4611      	mov	r1, r2
 800ae00:	602b      	str	r3, [r5, #0]
 800ae02:	f7f7 fc6f 	bl	80026e4 <_kill>
 800ae06:	1c43      	adds	r3, r0, #1
 800ae08:	d102      	bne.n	800ae10 <_kill_r+0x1c>
 800ae0a:	682b      	ldr	r3, [r5, #0]
 800ae0c:	b103      	cbz	r3, 800ae10 <_kill_r+0x1c>
 800ae0e:	6023      	str	r3, [r4, #0]
 800ae10:	bd38      	pop	{r3, r4, r5, pc}
 800ae12:	bf00      	nop
 800ae14:	20001ba4 	.word	0x20001ba4

0800ae18 <_getpid_r>:
 800ae18:	f7f7 bc5c 	b.w	80026d4 <_getpid>

0800ae1c <__sread>:
 800ae1c:	b510      	push	{r4, lr}
 800ae1e:	460c      	mov	r4, r1
 800ae20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae24:	f000 f894 	bl	800af50 <_read_r>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	bfab      	itete	ge
 800ae2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae30:	181b      	addge	r3, r3, r0
 800ae32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae36:	bfac      	ite	ge
 800ae38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae3a:	81a3      	strhlt	r3, [r4, #12]
 800ae3c:	bd10      	pop	{r4, pc}

0800ae3e <__swrite>:
 800ae3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae42:	461f      	mov	r7, r3
 800ae44:	898b      	ldrh	r3, [r1, #12]
 800ae46:	05db      	lsls	r3, r3, #23
 800ae48:	4605      	mov	r5, r0
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	4616      	mov	r6, r2
 800ae4e:	d505      	bpl.n	800ae5c <__swrite+0x1e>
 800ae50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae54:	2302      	movs	r3, #2
 800ae56:	2200      	movs	r2, #0
 800ae58:	f000 f868 	bl	800af2c <_lseek_r>
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae66:	81a3      	strh	r3, [r4, #12]
 800ae68:	4632      	mov	r2, r6
 800ae6a:	463b      	mov	r3, r7
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae72:	f000 b817 	b.w	800aea4 <_write_r>

0800ae76 <__sseek>:
 800ae76:	b510      	push	{r4, lr}
 800ae78:	460c      	mov	r4, r1
 800ae7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae7e:	f000 f855 	bl	800af2c <_lseek_r>
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	bf15      	itete	ne
 800ae88:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae92:	81a3      	strheq	r3, [r4, #12]
 800ae94:	bf18      	it	ne
 800ae96:	81a3      	strhne	r3, [r4, #12]
 800ae98:	bd10      	pop	{r4, pc}

0800ae9a <__sclose>:
 800ae9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9e:	f000 b813 	b.w	800aec8 <_close_r>
	...

0800aea4 <_write_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4d07      	ldr	r5, [pc, #28]	; (800aec4 <_write_r+0x20>)
 800aea8:	4604      	mov	r4, r0
 800aeaa:	4608      	mov	r0, r1
 800aeac:	4611      	mov	r1, r2
 800aeae:	2200      	movs	r2, #0
 800aeb0:	602a      	str	r2, [r5, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f7f7 fc4d 	bl	8002752 <_write>
 800aeb8:	1c43      	adds	r3, r0, #1
 800aeba:	d102      	bne.n	800aec2 <_write_r+0x1e>
 800aebc:	682b      	ldr	r3, [r5, #0]
 800aebe:	b103      	cbz	r3, 800aec2 <_write_r+0x1e>
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	bd38      	pop	{r3, r4, r5, pc}
 800aec4:	20001ba4 	.word	0x20001ba4

0800aec8 <_close_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4d06      	ldr	r5, [pc, #24]	; (800aee4 <_close_r+0x1c>)
 800aecc:	2300      	movs	r3, #0
 800aece:	4604      	mov	r4, r0
 800aed0:	4608      	mov	r0, r1
 800aed2:	602b      	str	r3, [r5, #0]
 800aed4:	f7f7 fc59 	bl	800278a <_close>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_close_r+0x1a>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_close_r+0x1a>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	20001ba4 	.word	0x20001ba4

0800aee8 <_fstat_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d07      	ldr	r5, [pc, #28]	; (800af08 <_fstat_r+0x20>)
 800aeec:	2300      	movs	r3, #0
 800aeee:	4604      	mov	r4, r0
 800aef0:	4608      	mov	r0, r1
 800aef2:	4611      	mov	r1, r2
 800aef4:	602b      	str	r3, [r5, #0]
 800aef6:	f7f7 fc54 	bl	80027a2 <_fstat>
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	d102      	bne.n	800af04 <_fstat_r+0x1c>
 800aefe:	682b      	ldr	r3, [r5, #0]
 800af00:	b103      	cbz	r3, 800af04 <_fstat_r+0x1c>
 800af02:	6023      	str	r3, [r4, #0]
 800af04:	bd38      	pop	{r3, r4, r5, pc}
 800af06:	bf00      	nop
 800af08:	20001ba4 	.word	0x20001ba4

0800af0c <_isatty_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d06      	ldr	r5, [pc, #24]	; (800af28 <_isatty_r+0x1c>)
 800af10:	2300      	movs	r3, #0
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	f7f7 fc53 	bl	80027c2 <_isatty>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_isatty_r+0x1a>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_isatty_r+0x1a>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	20001ba4 	.word	0x20001ba4

0800af2c <_lseek_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	; (800af4c <_lseek_r+0x20>)
 800af30:	4604      	mov	r4, r0
 800af32:	4608      	mov	r0, r1
 800af34:	4611      	mov	r1, r2
 800af36:	2200      	movs	r2, #0
 800af38:	602a      	str	r2, [r5, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	f7f7 fc4c 	bl	80027d8 <_lseek>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d102      	bne.n	800af4a <_lseek_r+0x1e>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	b103      	cbz	r3, 800af4a <_lseek_r+0x1e>
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	20001ba4 	.word	0x20001ba4

0800af50 <_read_r>:
 800af50:	b538      	push	{r3, r4, r5, lr}
 800af52:	4d07      	ldr	r5, [pc, #28]	; (800af70 <_read_r+0x20>)
 800af54:	4604      	mov	r4, r0
 800af56:	4608      	mov	r0, r1
 800af58:	4611      	mov	r1, r2
 800af5a:	2200      	movs	r2, #0
 800af5c:	602a      	str	r2, [r5, #0]
 800af5e:	461a      	mov	r2, r3
 800af60:	f7f7 fbda 	bl	8002718 <_read>
 800af64:	1c43      	adds	r3, r0, #1
 800af66:	d102      	bne.n	800af6e <_read_r+0x1e>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	b103      	cbz	r3, 800af6e <_read_r+0x1e>
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	20001ba4 	.word	0x20001ba4
 800af74:	00000000 	.word	0x00000000

0800af78 <sin>:
 800af78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af7a:	ec53 2b10 	vmov	r2, r3, d0
 800af7e:	4826      	ldr	r0, [pc, #152]	; (800b018 <sin+0xa0>)
 800af80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800af84:	4281      	cmp	r1, r0
 800af86:	dc07      	bgt.n	800af98 <sin+0x20>
 800af88:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b010 <sin+0x98>
 800af8c:	2000      	movs	r0, #0
 800af8e:	f001 fee7 	bl	800cd60 <__kernel_sin>
 800af92:	ec51 0b10 	vmov	r0, r1, d0
 800af96:	e007      	b.n	800afa8 <sin+0x30>
 800af98:	4820      	ldr	r0, [pc, #128]	; (800b01c <sin+0xa4>)
 800af9a:	4281      	cmp	r1, r0
 800af9c:	dd09      	ble.n	800afb2 <sin+0x3a>
 800af9e:	ee10 0a10 	vmov	r0, s0
 800afa2:	4619      	mov	r1, r3
 800afa4:	f7f5 f998 	bl	80002d8 <__aeabi_dsub>
 800afa8:	ec41 0b10 	vmov	d0, r0, r1
 800afac:	b005      	add	sp, #20
 800afae:	f85d fb04 	ldr.w	pc, [sp], #4
 800afb2:	4668      	mov	r0, sp
 800afb4:	f001 f80c 	bl	800bfd0 <__ieee754_rem_pio2>
 800afb8:	f000 0003 	and.w	r0, r0, #3
 800afbc:	2801      	cmp	r0, #1
 800afbe:	d008      	beq.n	800afd2 <sin+0x5a>
 800afc0:	2802      	cmp	r0, #2
 800afc2:	d00d      	beq.n	800afe0 <sin+0x68>
 800afc4:	b9d0      	cbnz	r0, 800affc <sin+0x84>
 800afc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afca:	ed9d 0b00 	vldr	d0, [sp]
 800afce:	2001      	movs	r0, #1
 800afd0:	e7dd      	b.n	800af8e <sin+0x16>
 800afd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afd6:	ed9d 0b00 	vldr	d0, [sp]
 800afda:	f001 fab9 	bl	800c550 <__kernel_cos>
 800afde:	e7d8      	b.n	800af92 <sin+0x1a>
 800afe0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afe4:	ed9d 0b00 	vldr	d0, [sp]
 800afe8:	2001      	movs	r0, #1
 800afea:	f001 feb9 	bl	800cd60 <__kernel_sin>
 800afee:	ec53 2b10 	vmov	r2, r3, d0
 800aff2:	ee10 0a10 	vmov	r0, s0
 800aff6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800affa:	e7d5      	b.n	800afa8 <sin+0x30>
 800affc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b000:	ed9d 0b00 	vldr	d0, [sp]
 800b004:	f001 faa4 	bl	800c550 <__kernel_cos>
 800b008:	e7f1      	b.n	800afee <sin+0x76>
 800b00a:	bf00      	nop
 800b00c:	f3af 8000 	nop.w
	...
 800b018:	3fe921fb 	.word	0x3fe921fb
 800b01c:	7fefffff 	.word	0x7fefffff

0800b020 <log>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	ed2d 8b02 	vpush	{d8}
 800b026:	ec55 4b10 	vmov	r4, r5, d0
 800b02a:	f000 f8f1 	bl	800b210 <__ieee754_log>
 800b02e:	4b1e      	ldr	r3, [pc, #120]	; (800b0a8 <log+0x88>)
 800b030:	eeb0 8a40 	vmov.f32	s16, s0
 800b034:	eef0 8a60 	vmov.f32	s17, s1
 800b038:	f993 3000 	ldrsb.w	r3, [r3]
 800b03c:	3301      	adds	r3, #1
 800b03e:	d01a      	beq.n	800b076 <log+0x56>
 800b040:	4622      	mov	r2, r4
 800b042:	462b      	mov	r3, r5
 800b044:	4620      	mov	r0, r4
 800b046:	4629      	mov	r1, r5
 800b048:	f7f5 fd98 	bl	8000b7c <__aeabi_dcmpun>
 800b04c:	b998      	cbnz	r0, 800b076 <log+0x56>
 800b04e:	2200      	movs	r2, #0
 800b050:	2300      	movs	r3, #0
 800b052:	4620      	mov	r0, r4
 800b054:	4629      	mov	r1, r5
 800b056:	f7f5 fd87 	bl	8000b68 <__aeabi_dcmpgt>
 800b05a:	b960      	cbnz	r0, 800b076 <log+0x56>
 800b05c:	2200      	movs	r2, #0
 800b05e:	2300      	movs	r3, #0
 800b060:	4620      	mov	r0, r4
 800b062:	4629      	mov	r1, r5
 800b064:	f7f5 fd58 	bl	8000b18 <__aeabi_dcmpeq>
 800b068:	b160      	cbz	r0, 800b084 <log+0x64>
 800b06a:	f7fd f8bd 	bl	80081e8 <__errno>
 800b06e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800b0a0 <log+0x80>
 800b072:	2322      	movs	r3, #34	; 0x22
 800b074:	6003      	str	r3, [r0, #0]
 800b076:	eeb0 0a48 	vmov.f32	s0, s16
 800b07a:	eef0 0a68 	vmov.f32	s1, s17
 800b07e:	ecbd 8b02 	vpop	{d8}
 800b082:	bd38      	pop	{r3, r4, r5, pc}
 800b084:	f7fd f8b0 	bl	80081e8 <__errno>
 800b088:	ecbd 8b02 	vpop	{d8}
 800b08c:	2321      	movs	r3, #33	; 0x21
 800b08e:	6003      	str	r3, [r0, #0]
 800b090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b094:	4805      	ldr	r0, [pc, #20]	; (800b0ac <log+0x8c>)
 800b096:	f001 bfb7 	b.w	800d008 <nan>
 800b09a:	bf00      	nop
 800b09c:	f3af 8000 	nop.w
 800b0a0:	00000000 	.word	0x00000000
 800b0a4:	fff00000 	.word	0xfff00000
 800b0a8:	200001e4 	.word	0x200001e4
 800b0ac:	0800e0d0 	.word	0x0800e0d0

0800b0b0 <pow>:
 800b0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b4:	ec59 8b10 	vmov	r8, r9, d0
 800b0b8:	ec57 6b11 	vmov	r6, r7, d1
 800b0bc:	f000 fa64 	bl	800b588 <__ieee754_pow>
 800b0c0:	4b4e      	ldr	r3, [pc, #312]	; (800b1fc <pow+0x14c>)
 800b0c2:	f993 3000 	ldrsb.w	r3, [r3]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	ec55 4b10 	vmov	r4, r5, d0
 800b0cc:	d015      	beq.n	800b0fa <pow+0x4a>
 800b0ce:	4632      	mov	r2, r6
 800b0d0:	463b      	mov	r3, r7
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	f7f5 fd51 	bl	8000b7c <__aeabi_dcmpun>
 800b0da:	b970      	cbnz	r0, 800b0fa <pow+0x4a>
 800b0dc:	4642      	mov	r2, r8
 800b0de:	464b      	mov	r3, r9
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	4649      	mov	r1, r9
 800b0e4:	f7f5 fd4a 	bl	8000b7c <__aeabi_dcmpun>
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	b148      	cbz	r0, 800b102 <pow+0x52>
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	f7f5 fd11 	bl	8000b18 <__aeabi_dcmpeq>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d17d      	bne.n	800b1f6 <pow+0x146>
 800b0fa:	ec45 4b10 	vmov	d0, r4, r5
 800b0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b102:	4640      	mov	r0, r8
 800b104:	4649      	mov	r1, r9
 800b106:	f7f5 fd07 	bl	8000b18 <__aeabi_dcmpeq>
 800b10a:	b1e0      	cbz	r0, 800b146 <pow+0x96>
 800b10c:	2200      	movs	r2, #0
 800b10e:	2300      	movs	r3, #0
 800b110:	4630      	mov	r0, r6
 800b112:	4639      	mov	r1, r7
 800b114:	f7f5 fd00 	bl	8000b18 <__aeabi_dcmpeq>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d16c      	bne.n	800b1f6 <pow+0x146>
 800b11c:	ec47 6b10 	vmov	d0, r6, r7
 800b120:	f001 fee5 	bl	800ceee <finite>
 800b124:	2800      	cmp	r0, #0
 800b126:	d0e8      	beq.n	800b0fa <pow+0x4a>
 800b128:	2200      	movs	r2, #0
 800b12a:	2300      	movs	r3, #0
 800b12c:	4630      	mov	r0, r6
 800b12e:	4639      	mov	r1, r7
 800b130:	f7f5 fcfc 	bl	8000b2c <__aeabi_dcmplt>
 800b134:	2800      	cmp	r0, #0
 800b136:	d0e0      	beq.n	800b0fa <pow+0x4a>
 800b138:	f7fd f856 	bl	80081e8 <__errno>
 800b13c:	2321      	movs	r3, #33	; 0x21
 800b13e:	6003      	str	r3, [r0, #0]
 800b140:	2400      	movs	r4, #0
 800b142:	4d2f      	ldr	r5, [pc, #188]	; (800b200 <pow+0x150>)
 800b144:	e7d9      	b.n	800b0fa <pow+0x4a>
 800b146:	ec45 4b10 	vmov	d0, r4, r5
 800b14a:	f001 fed0 	bl	800ceee <finite>
 800b14e:	bbb8      	cbnz	r0, 800b1c0 <pow+0x110>
 800b150:	ec49 8b10 	vmov	d0, r8, r9
 800b154:	f001 fecb 	bl	800ceee <finite>
 800b158:	b390      	cbz	r0, 800b1c0 <pow+0x110>
 800b15a:	ec47 6b10 	vmov	d0, r6, r7
 800b15e:	f001 fec6 	bl	800ceee <finite>
 800b162:	b368      	cbz	r0, 800b1c0 <pow+0x110>
 800b164:	4622      	mov	r2, r4
 800b166:	462b      	mov	r3, r5
 800b168:	4620      	mov	r0, r4
 800b16a:	4629      	mov	r1, r5
 800b16c:	f7f5 fd06 	bl	8000b7c <__aeabi_dcmpun>
 800b170:	b160      	cbz	r0, 800b18c <pow+0xdc>
 800b172:	f7fd f839 	bl	80081e8 <__errno>
 800b176:	2321      	movs	r3, #33	; 0x21
 800b178:	6003      	str	r3, [r0, #0]
 800b17a:	2200      	movs	r2, #0
 800b17c:	2300      	movs	r3, #0
 800b17e:	4610      	mov	r0, r2
 800b180:	4619      	mov	r1, r3
 800b182:	f7f5 fb8b 	bl	800089c <__aeabi_ddiv>
 800b186:	4604      	mov	r4, r0
 800b188:	460d      	mov	r5, r1
 800b18a:	e7b6      	b.n	800b0fa <pow+0x4a>
 800b18c:	f7fd f82c 	bl	80081e8 <__errno>
 800b190:	2322      	movs	r3, #34	; 0x22
 800b192:	6003      	str	r3, [r0, #0]
 800b194:	2200      	movs	r2, #0
 800b196:	2300      	movs	r3, #0
 800b198:	4640      	mov	r0, r8
 800b19a:	4649      	mov	r1, r9
 800b19c:	f7f5 fcc6 	bl	8000b2c <__aeabi_dcmplt>
 800b1a0:	2400      	movs	r4, #0
 800b1a2:	b158      	cbz	r0, 800b1bc <pow+0x10c>
 800b1a4:	ec47 6b10 	vmov	d0, r6, r7
 800b1a8:	f001 ff36 	bl	800d018 <rint>
 800b1ac:	4632      	mov	r2, r6
 800b1ae:	ec51 0b10 	vmov	r0, r1, d0
 800b1b2:	463b      	mov	r3, r7
 800b1b4:	f7f5 fcb0 	bl	8000b18 <__aeabi_dcmpeq>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d0c2      	beq.n	800b142 <pow+0x92>
 800b1bc:	4d11      	ldr	r5, [pc, #68]	; (800b204 <pow+0x154>)
 800b1be:	e79c      	b.n	800b0fa <pow+0x4a>
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 fca6 	bl	8000b18 <__aeabi_dcmpeq>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d094      	beq.n	800b0fa <pow+0x4a>
 800b1d0:	ec49 8b10 	vmov	d0, r8, r9
 800b1d4:	f001 fe8b 	bl	800ceee <finite>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d08e      	beq.n	800b0fa <pow+0x4a>
 800b1dc:	ec47 6b10 	vmov	d0, r6, r7
 800b1e0:	f001 fe85 	bl	800ceee <finite>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	d088      	beq.n	800b0fa <pow+0x4a>
 800b1e8:	f7fc fffe 	bl	80081e8 <__errno>
 800b1ec:	2322      	movs	r3, #34	; 0x22
 800b1ee:	6003      	str	r3, [r0, #0]
 800b1f0:	2400      	movs	r4, #0
 800b1f2:	2500      	movs	r5, #0
 800b1f4:	e781      	b.n	800b0fa <pow+0x4a>
 800b1f6:	4d04      	ldr	r5, [pc, #16]	; (800b208 <pow+0x158>)
 800b1f8:	2400      	movs	r4, #0
 800b1fa:	e77e      	b.n	800b0fa <pow+0x4a>
 800b1fc:	200001e4 	.word	0x200001e4
 800b200:	fff00000 	.word	0xfff00000
 800b204:	7ff00000 	.word	0x7ff00000
 800b208:	3ff00000 	.word	0x3ff00000
 800b20c:	00000000 	.word	0x00000000

0800b210 <__ieee754_log>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	ec51 0b10 	vmov	r0, r1, d0
 800b218:	ed2d 8b04 	vpush	{d8-d9}
 800b21c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b220:	b083      	sub	sp, #12
 800b222:	460d      	mov	r5, r1
 800b224:	da29      	bge.n	800b27a <__ieee754_log+0x6a>
 800b226:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b22a:	4303      	orrs	r3, r0
 800b22c:	ee10 2a10 	vmov	r2, s0
 800b230:	d10c      	bne.n	800b24c <__ieee754_log+0x3c>
 800b232:	49cf      	ldr	r1, [pc, #828]	; (800b570 <__ieee754_log+0x360>)
 800b234:	2200      	movs	r2, #0
 800b236:	2300      	movs	r3, #0
 800b238:	2000      	movs	r0, #0
 800b23a:	f7f5 fb2f 	bl	800089c <__aeabi_ddiv>
 800b23e:	ec41 0b10 	vmov	d0, r0, r1
 800b242:	b003      	add	sp, #12
 800b244:	ecbd 8b04 	vpop	{d8-d9}
 800b248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24c:	2900      	cmp	r1, #0
 800b24e:	da05      	bge.n	800b25c <__ieee754_log+0x4c>
 800b250:	460b      	mov	r3, r1
 800b252:	f7f5 f841 	bl	80002d8 <__aeabi_dsub>
 800b256:	2200      	movs	r2, #0
 800b258:	2300      	movs	r3, #0
 800b25a:	e7ee      	b.n	800b23a <__ieee754_log+0x2a>
 800b25c:	4bc5      	ldr	r3, [pc, #788]	; (800b574 <__ieee754_log+0x364>)
 800b25e:	2200      	movs	r2, #0
 800b260:	f7f5 f9f2 	bl	8000648 <__aeabi_dmul>
 800b264:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b268:	460d      	mov	r5, r1
 800b26a:	4ac3      	ldr	r2, [pc, #780]	; (800b578 <__ieee754_log+0x368>)
 800b26c:	4295      	cmp	r5, r2
 800b26e:	dd06      	ble.n	800b27e <__ieee754_log+0x6e>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	f7f5 f832 	bl	80002dc <__adddf3>
 800b278:	e7e1      	b.n	800b23e <__ieee754_log+0x2e>
 800b27a:	2300      	movs	r3, #0
 800b27c:	e7f5      	b.n	800b26a <__ieee754_log+0x5a>
 800b27e:	152c      	asrs	r4, r5, #20
 800b280:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b284:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b288:	441c      	add	r4, r3
 800b28a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b28e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b296:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b29a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b29e:	ea42 0105 	orr.w	r1, r2, r5
 800b2a2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	4bb4      	ldr	r3, [pc, #720]	; (800b57c <__ieee754_log+0x36c>)
 800b2aa:	f7f5 f815 	bl	80002d8 <__aeabi_dsub>
 800b2ae:	1cab      	adds	r3, r5, #2
 800b2b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	4682      	mov	sl, r0
 800b2b8:	468b      	mov	fp, r1
 800b2ba:	f04f 0200 	mov.w	r2, #0
 800b2be:	dc53      	bgt.n	800b368 <__ieee754_log+0x158>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f7f5 fc29 	bl	8000b18 <__aeabi_dcmpeq>
 800b2c6:	b1d0      	cbz	r0, 800b2fe <__ieee754_log+0xee>
 800b2c8:	2c00      	cmp	r4, #0
 800b2ca:	f000 8122 	beq.w	800b512 <__ieee754_log+0x302>
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f7f5 f950 	bl	8000574 <__aeabi_i2d>
 800b2d4:	a390      	add	r3, pc, #576	; (adr r3, 800b518 <__ieee754_log+0x308>)
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	f7f5 f9b3 	bl	8000648 <__aeabi_dmul>
 800b2e2:	a38f      	add	r3, pc, #572	; (adr r3, 800b520 <__ieee754_log+0x310>)
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	460d      	mov	r5, r1
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	4639      	mov	r1, r7
 800b2f0:	f7f5 f9aa 	bl	8000648 <__aeabi_dmul>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	e7ba      	b.n	800b274 <__ieee754_log+0x64>
 800b2fe:	a38a      	add	r3, pc, #552	; (adr r3, 800b528 <__ieee754_log+0x318>)
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	4650      	mov	r0, sl
 800b306:	4659      	mov	r1, fp
 800b308:	f7f5 f99e 	bl	8000648 <__aeabi_dmul>
 800b30c:	4602      	mov	r2, r0
 800b30e:	460b      	mov	r3, r1
 800b310:	2000      	movs	r0, #0
 800b312:	499b      	ldr	r1, [pc, #620]	; (800b580 <__ieee754_log+0x370>)
 800b314:	f7f4 ffe0 	bl	80002d8 <__aeabi_dsub>
 800b318:	4652      	mov	r2, sl
 800b31a:	4606      	mov	r6, r0
 800b31c:	460f      	mov	r7, r1
 800b31e:	465b      	mov	r3, fp
 800b320:	4650      	mov	r0, sl
 800b322:	4659      	mov	r1, fp
 800b324:	f7f5 f990 	bl	8000648 <__aeabi_dmul>
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f5 f98a 	bl	8000648 <__aeabi_dmul>
 800b334:	4606      	mov	r6, r0
 800b336:	460f      	mov	r7, r1
 800b338:	b914      	cbnz	r4, 800b340 <__ieee754_log+0x130>
 800b33a:	4632      	mov	r2, r6
 800b33c:	463b      	mov	r3, r7
 800b33e:	e0a2      	b.n	800b486 <__ieee754_log+0x276>
 800b340:	4620      	mov	r0, r4
 800b342:	f7f5 f917 	bl	8000574 <__aeabi_i2d>
 800b346:	a374      	add	r3, pc, #464	; (adr r3, 800b518 <__ieee754_log+0x308>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	4680      	mov	r8, r0
 800b34e:	4689      	mov	r9, r1
 800b350:	f7f5 f97a 	bl	8000648 <__aeabi_dmul>
 800b354:	a372      	add	r3, pc, #456	; (adr r3, 800b520 <__ieee754_log+0x310>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	4604      	mov	r4, r0
 800b35c:	460d      	mov	r5, r1
 800b35e:	4640      	mov	r0, r8
 800b360:	4649      	mov	r1, r9
 800b362:	f7f5 f971 	bl	8000648 <__aeabi_dmul>
 800b366:	e0a7      	b.n	800b4b8 <__ieee754_log+0x2a8>
 800b368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b36c:	f7f4 ffb6 	bl	80002dc <__adddf3>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4650      	mov	r0, sl
 800b376:	4659      	mov	r1, fp
 800b378:	f7f5 fa90 	bl	800089c <__aeabi_ddiv>
 800b37c:	ec41 0b18 	vmov	d8, r0, r1
 800b380:	4620      	mov	r0, r4
 800b382:	f7f5 f8f7 	bl	8000574 <__aeabi_i2d>
 800b386:	ec53 2b18 	vmov	r2, r3, d8
 800b38a:	ec41 0b19 	vmov	d9, r0, r1
 800b38e:	ec51 0b18 	vmov	r0, r1, d8
 800b392:	f7f5 f959 	bl	8000648 <__aeabi_dmul>
 800b396:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b39a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b39e:	9301      	str	r3, [sp, #4]
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	4689      	mov	r9, r1
 800b3a8:	f7f5 f94e 	bl	8000648 <__aeabi_dmul>
 800b3ac:	a360      	add	r3, pc, #384	; (adr r3, 800b530 <__ieee754_log+0x320>)
 800b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	460f      	mov	r7, r1
 800b3b6:	f7f5 f947 	bl	8000648 <__aeabi_dmul>
 800b3ba:	a35f      	add	r3, pc, #380	; (adr r3, 800b538 <__ieee754_log+0x328>)
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	f7f4 ff8c 	bl	80002dc <__adddf3>
 800b3c4:	4632      	mov	r2, r6
 800b3c6:	463b      	mov	r3, r7
 800b3c8:	f7f5 f93e 	bl	8000648 <__aeabi_dmul>
 800b3cc:	a35c      	add	r3, pc, #368	; (adr r3, 800b540 <__ieee754_log+0x330>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	f7f4 ff83 	bl	80002dc <__adddf3>
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	463b      	mov	r3, r7
 800b3da:	f7f5 f935 	bl	8000648 <__aeabi_dmul>
 800b3de:	a35a      	add	r3, pc, #360	; (adr r3, 800b548 <__ieee754_log+0x338>)
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	f7f4 ff7a 	bl	80002dc <__adddf3>
 800b3e8:	4642      	mov	r2, r8
 800b3ea:	464b      	mov	r3, r9
 800b3ec:	f7f5 f92c 	bl	8000648 <__aeabi_dmul>
 800b3f0:	a357      	add	r3, pc, #348	; (adr r3, 800b550 <__ieee754_log+0x340>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	4680      	mov	r8, r0
 800b3f8:	4689      	mov	r9, r1
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	f7f5 f923 	bl	8000648 <__aeabi_dmul>
 800b402:	a355      	add	r3, pc, #340	; (adr r3, 800b558 <__ieee754_log+0x348>)
 800b404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b408:	f7f4 ff68 	bl	80002dc <__adddf3>
 800b40c:	4632      	mov	r2, r6
 800b40e:	463b      	mov	r3, r7
 800b410:	f7f5 f91a 	bl	8000648 <__aeabi_dmul>
 800b414:	a352      	add	r3, pc, #328	; (adr r3, 800b560 <__ieee754_log+0x350>)
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	f7f4 ff5f 	bl	80002dc <__adddf3>
 800b41e:	4632      	mov	r2, r6
 800b420:	463b      	mov	r3, r7
 800b422:	f7f5 f911 	bl	8000648 <__aeabi_dmul>
 800b426:	460b      	mov	r3, r1
 800b428:	4602      	mov	r2, r0
 800b42a:	4649      	mov	r1, r9
 800b42c:	4640      	mov	r0, r8
 800b42e:	f7f4 ff55 	bl	80002dc <__adddf3>
 800b432:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b436:	9b01      	ldr	r3, [sp, #4]
 800b438:	3551      	adds	r5, #81	; 0x51
 800b43a:	431d      	orrs	r5, r3
 800b43c:	2d00      	cmp	r5, #0
 800b43e:	4680      	mov	r8, r0
 800b440:	4689      	mov	r9, r1
 800b442:	dd48      	ble.n	800b4d6 <__ieee754_log+0x2c6>
 800b444:	4b4e      	ldr	r3, [pc, #312]	; (800b580 <__ieee754_log+0x370>)
 800b446:	2200      	movs	r2, #0
 800b448:	4650      	mov	r0, sl
 800b44a:	4659      	mov	r1, fp
 800b44c:	f7f5 f8fc 	bl	8000648 <__aeabi_dmul>
 800b450:	4652      	mov	r2, sl
 800b452:	465b      	mov	r3, fp
 800b454:	f7f5 f8f8 	bl	8000648 <__aeabi_dmul>
 800b458:	4602      	mov	r2, r0
 800b45a:	460b      	mov	r3, r1
 800b45c:	4606      	mov	r6, r0
 800b45e:	460f      	mov	r7, r1
 800b460:	4640      	mov	r0, r8
 800b462:	4649      	mov	r1, r9
 800b464:	f7f4 ff3a 	bl	80002dc <__adddf3>
 800b468:	ec53 2b18 	vmov	r2, r3, d8
 800b46c:	f7f5 f8ec 	bl	8000648 <__aeabi_dmul>
 800b470:	4680      	mov	r8, r0
 800b472:	4689      	mov	r9, r1
 800b474:	b964      	cbnz	r4, 800b490 <__ieee754_log+0x280>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4630      	mov	r0, r6
 800b47c:	4639      	mov	r1, r7
 800b47e:	f7f4 ff2b 	bl	80002d8 <__aeabi_dsub>
 800b482:	4602      	mov	r2, r0
 800b484:	460b      	mov	r3, r1
 800b486:	4650      	mov	r0, sl
 800b488:	4659      	mov	r1, fp
 800b48a:	f7f4 ff25 	bl	80002d8 <__aeabi_dsub>
 800b48e:	e6d6      	b.n	800b23e <__ieee754_log+0x2e>
 800b490:	a321      	add	r3, pc, #132	; (adr r3, 800b518 <__ieee754_log+0x308>)
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	ec51 0b19 	vmov	r0, r1, d9
 800b49a:	f7f5 f8d5 	bl	8000648 <__aeabi_dmul>
 800b49e:	a320      	add	r3, pc, #128	; (adr r3, 800b520 <__ieee754_log+0x310>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	460d      	mov	r5, r1
 800b4a8:	ec51 0b19 	vmov	r0, r1, d9
 800b4ac:	f7f5 f8cc 	bl	8000648 <__aeabi_dmul>
 800b4b0:	4642      	mov	r2, r8
 800b4b2:	464b      	mov	r3, r9
 800b4b4:	f7f4 ff12 	bl	80002dc <__adddf3>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4630      	mov	r0, r6
 800b4be:	4639      	mov	r1, r7
 800b4c0:	f7f4 ff0a 	bl	80002d8 <__aeabi_dsub>
 800b4c4:	4652      	mov	r2, sl
 800b4c6:	465b      	mov	r3, fp
 800b4c8:	f7f4 ff06 	bl	80002d8 <__aeabi_dsub>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	e7d9      	b.n	800b48a <__ieee754_log+0x27a>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4650      	mov	r0, sl
 800b4dc:	4659      	mov	r1, fp
 800b4de:	f7f4 fefb 	bl	80002d8 <__aeabi_dsub>
 800b4e2:	ec53 2b18 	vmov	r2, r3, d8
 800b4e6:	f7f5 f8af 	bl	8000648 <__aeabi_dmul>
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460f      	mov	r7, r1
 800b4ee:	2c00      	cmp	r4, #0
 800b4f0:	f43f af23 	beq.w	800b33a <__ieee754_log+0x12a>
 800b4f4:	a308      	add	r3, pc, #32	; (adr r3, 800b518 <__ieee754_log+0x308>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	ec51 0b19 	vmov	r0, r1, d9
 800b4fe:	f7f5 f8a3 	bl	8000648 <__aeabi_dmul>
 800b502:	a307      	add	r3, pc, #28	; (adr r3, 800b520 <__ieee754_log+0x310>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	4604      	mov	r4, r0
 800b50a:	460d      	mov	r5, r1
 800b50c:	ec51 0b19 	vmov	r0, r1, d9
 800b510:	e727      	b.n	800b362 <__ieee754_log+0x152>
 800b512:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b568 <__ieee754_log+0x358>
 800b516:	e694      	b.n	800b242 <__ieee754_log+0x32>
 800b518:	fee00000 	.word	0xfee00000
 800b51c:	3fe62e42 	.word	0x3fe62e42
 800b520:	35793c76 	.word	0x35793c76
 800b524:	3dea39ef 	.word	0x3dea39ef
 800b528:	55555555 	.word	0x55555555
 800b52c:	3fd55555 	.word	0x3fd55555
 800b530:	df3e5244 	.word	0xdf3e5244
 800b534:	3fc2f112 	.word	0x3fc2f112
 800b538:	96cb03de 	.word	0x96cb03de
 800b53c:	3fc74664 	.word	0x3fc74664
 800b540:	94229359 	.word	0x94229359
 800b544:	3fd24924 	.word	0x3fd24924
 800b548:	55555593 	.word	0x55555593
 800b54c:	3fe55555 	.word	0x3fe55555
 800b550:	d078c69f 	.word	0xd078c69f
 800b554:	3fc39a09 	.word	0x3fc39a09
 800b558:	1d8e78af 	.word	0x1d8e78af
 800b55c:	3fcc71c5 	.word	0x3fcc71c5
 800b560:	9997fa04 	.word	0x9997fa04
 800b564:	3fd99999 	.word	0x3fd99999
	...
 800b570:	c3500000 	.word	0xc3500000
 800b574:	43500000 	.word	0x43500000
 800b578:	7fefffff 	.word	0x7fefffff
 800b57c:	3ff00000 	.word	0x3ff00000
 800b580:	3fe00000 	.word	0x3fe00000
 800b584:	00000000 	.word	0x00000000

0800b588 <__ieee754_pow>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	ed2d 8b06 	vpush	{d8-d10}
 800b590:	b08d      	sub	sp, #52	; 0x34
 800b592:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b596:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b59a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b59e:	ea56 0100 	orrs.w	r1, r6, r0
 800b5a2:	ec53 2b10 	vmov	r2, r3, d0
 800b5a6:	f000 84d1 	beq.w	800bf4c <__ieee754_pow+0x9c4>
 800b5aa:	497f      	ldr	r1, [pc, #508]	; (800b7a8 <__ieee754_pow+0x220>)
 800b5ac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b5b0:	428c      	cmp	r4, r1
 800b5b2:	ee10 8a10 	vmov	r8, s0
 800b5b6:	4699      	mov	r9, r3
 800b5b8:	dc09      	bgt.n	800b5ce <__ieee754_pow+0x46>
 800b5ba:	d103      	bne.n	800b5c4 <__ieee754_pow+0x3c>
 800b5bc:	b97a      	cbnz	r2, 800b5de <__ieee754_pow+0x56>
 800b5be:	42a6      	cmp	r6, r4
 800b5c0:	dd02      	ble.n	800b5c8 <__ieee754_pow+0x40>
 800b5c2:	e00c      	b.n	800b5de <__ieee754_pow+0x56>
 800b5c4:	428e      	cmp	r6, r1
 800b5c6:	dc02      	bgt.n	800b5ce <__ieee754_pow+0x46>
 800b5c8:	428e      	cmp	r6, r1
 800b5ca:	d110      	bne.n	800b5ee <__ieee754_pow+0x66>
 800b5cc:	b178      	cbz	r0, 800b5ee <__ieee754_pow+0x66>
 800b5ce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b5d2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b5d6:	ea54 0308 	orrs.w	r3, r4, r8
 800b5da:	f000 84b7 	beq.w	800bf4c <__ieee754_pow+0x9c4>
 800b5de:	4873      	ldr	r0, [pc, #460]	; (800b7ac <__ieee754_pow+0x224>)
 800b5e0:	b00d      	add	sp, #52	; 0x34
 800b5e2:	ecbd 8b06 	vpop	{d8-d10}
 800b5e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ea:	f001 bd0d 	b.w	800d008 <nan>
 800b5ee:	f1b9 0f00 	cmp.w	r9, #0
 800b5f2:	da36      	bge.n	800b662 <__ieee754_pow+0xda>
 800b5f4:	496e      	ldr	r1, [pc, #440]	; (800b7b0 <__ieee754_pow+0x228>)
 800b5f6:	428e      	cmp	r6, r1
 800b5f8:	dc51      	bgt.n	800b69e <__ieee754_pow+0x116>
 800b5fa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b5fe:	428e      	cmp	r6, r1
 800b600:	f340 84af 	ble.w	800bf62 <__ieee754_pow+0x9da>
 800b604:	1531      	asrs	r1, r6, #20
 800b606:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b60a:	2914      	cmp	r1, #20
 800b60c:	dd0f      	ble.n	800b62e <__ieee754_pow+0xa6>
 800b60e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b612:	fa20 fc01 	lsr.w	ip, r0, r1
 800b616:	fa0c f101 	lsl.w	r1, ip, r1
 800b61a:	4281      	cmp	r1, r0
 800b61c:	f040 84a1 	bne.w	800bf62 <__ieee754_pow+0x9da>
 800b620:	f00c 0c01 	and.w	ip, ip, #1
 800b624:	f1cc 0102 	rsb	r1, ip, #2
 800b628:	9100      	str	r1, [sp, #0]
 800b62a:	b180      	cbz	r0, 800b64e <__ieee754_pow+0xc6>
 800b62c:	e059      	b.n	800b6e2 <__ieee754_pow+0x15a>
 800b62e:	2800      	cmp	r0, #0
 800b630:	d155      	bne.n	800b6de <__ieee754_pow+0x156>
 800b632:	f1c1 0114 	rsb	r1, r1, #20
 800b636:	fa46 fc01 	asr.w	ip, r6, r1
 800b63a:	fa0c f101 	lsl.w	r1, ip, r1
 800b63e:	42b1      	cmp	r1, r6
 800b640:	f040 848c 	bne.w	800bf5c <__ieee754_pow+0x9d4>
 800b644:	f00c 0c01 	and.w	ip, ip, #1
 800b648:	f1cc 0102 	rsb	r1, ip, #2
 800b64c:	9100      	str	r1, [sp, #0]
 800b64e:	4959      	ldr	r1, [pc, #356]	; (800b7b4 <__ieee754_pow+0x22c>)
 800b650:	428e      	cmp	r6, r1
 800b652:	d12d      	bne.n	800b6b0 <__ieee754_pow+0x128>
 800b654:	2f00      	cmp	r7, #0
 800b656:	da79      	bge.n	800b74c <__ieee754_pow+0x1c4>
 800b658:	4956      	ldr	r1, [pc, #344]	; (800b7b4 <__ieee754_pow+0x22c>)
 800b65a:	2000      	movs	r0, #0
 800b65c:	f7f5 f91e 	bl	800089c <__aeabi_ddiv>
 800b660:	e016      	b.n	800b690 <__ieee754_pow+0x108>
 800b662:	2100      	movs	r1, #0
 800b664:	9100      	str	r1, [sp, #0]
 800b666:	2800      	cmp	r0, #0
 800b668:	d13b      	bne.n	800b6e2 <__ieee754_pow+0x15a>
 800b66a:	494f      	ldr	r1, [pc, #316]	; (800b7a8 <__ieee754_pow+0x220>)
 800b66c:	428e      	cmp	r6, r1
 800b66e:	d1ee      	bne.n	800b64e <__ieee754_pow+0xc6>
 800b670:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b674:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b678:	ea53 0308 	orrs.w	r3, r3, r8
 800b67c:	f000 8466 	beq.w	800bf4c <__ieee754_pow+0x9c4>
 800b680:	4b4d      	ldr	r3, [pc, #308]	; (800b7b8 <__ieee754_pow+0x230>)
 800b682:	429c      	cmp	r4, r3
 800b684:	dd0d      	ble.n	800b6a2 <__ieee754_pow+0x11a>
 800b686:	2f00      	cmp	r7, #0
 800b688:	f280 8464 	bge.w	800bf54 <__ieee754_pow+0x9cc>
 800b68c:	2000      	movs	r0, #0
 800b68e:	2100      	movs	r1, #0
 800b690:	ec41 0b10 	vmov	d0, r0, r1
 800b694:	b00d      	add	sp, #52	; 0x34
 800b696:	ecbd 8b06 	vpop	{d8-d10}
 800b69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69e:	2102      	movs	r1, #2
 800b6a0:	e7e0      	b.n	800b664 <__ieee754_pow+0xdc>
 800b6a2:	2f00      	cmp	r7, #0
 800b6a4:	daf2      	bge.n	800b68c <__ieee754_pow+0x104>
 800b6a6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b6aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b6ae:	e7ef      	b.n	800b690 <__ieee754_pow+0x108>
 800b6b0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b6b4:	d104      	bne.n	800b6c0 <__ieee754_pow+0x138>
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	f7f4 ffc5 	bl	8000648 <__aeabi_dmul>
 800b6be:	e7e7      	b.n	800b690 <__ieee754_pow+0x108>
 800b6c0:	493e      	ldr	r1, [pc, #248]	; (800b7bc <__ieee754_pow+0x234>)
 800b6c2:	428f      	cmp	r7, r1
 800b6c4:	d10d      	bne.n	800b6e2 <__ieee754_pow+0x15a>
 800b6c6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ca:	db0a      	blt.n	800b6e2 <__ieee754_pow+0x15a>
 800b6cc:	ec43 2b10 	vmov	d0, r2, r3
 800b6d0:	b00d      	add	sp, #52	; 0x34
 800b6d2:	ecbd 8b06 	vpop	{d8-d10}
 800b6d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6da:	f000 be83 	b.w	800c3e4 <__ieee754_sqrt>
 800b6de:	2100      	movs	r1, #0
 800b6e0:	9100      	str	r1, [sp, #0]
 800b6e2:	ec43 2b10 	vmov	d0, r2, r3
 800b6e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6ea:	f001 fbf7 	bl	800cedc <fabs>
 800b6ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6f2:	ec51 0b10 	vmov	r0, r1, d0
 800b6f6:	f1b8 0f00 	cmp.w	r8, #0
 800b6fa:	d12a      	bne.n	800b752 <__ieee754_pow+0x1ca>
 800b6fc:	b12c      	cbz	r4, 800b70a <__ieee754_pow+0x182>
 800b6fe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b7b4 <__ieee754_pow+0x22c>
 800b702:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b706:	45e6      	cmp	lr, ip
 800b708:	d123      	bne.n	800b752 <__ieee754_pow+0x1ca>
 800b70a:	2f00      	cmp	r7, #0
 800b70c:	da05      	bge.n	800b71a <__ieee754_pow+0x192>
 800b70e:	4602      	mov	r2, r0
 800b710:	460b      	mov	r3, r1
 800b712:	2000      	movs	r0, #0
 800b714:	4927      	ldr	r1, [pc, #156]	; (800b7b4 <__ieee754_pow+0x22c>)
 800b716:	f7f5 f8c1 	bl	800089c <__aeabi_ddiv>
 800b71a:	f1b9 0f00 	cmp.w	r9, #0
 800b71e:	dab7      	bge.n	800b690 <__ieee754_pow+0x108>
 800b720:	9b00      	ldr	r3, [sp, #0]
 800b722:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b726:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b72a:	4323      	orrs	r3, r4
 800b72c:	d108      	bne.n	800b740 <__ieee754_pow+0x1b8>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	4610      	mov	r0, r2
 800b734:	4619      	mov	r1, r3
 800b736:	f7f4 fdcf 	bl	80002d8 <__aeabi_dsub>
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	e78d      	b.n	800b65c <__ieee754_pow+0xd4>
 800b740:	9b00      	ldr	r3, [sp, #0]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d1a4      	bne.n	800b690 <__ieee754_pow+0x108>
 800b746:	4602      	mov	r2, r0
 800b748:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b74c:	4610      	mov	r0, r2
 800b74e:	4619      	mov	r1, r3
 800b750:	e79e      	b.n	800b690 <__ieee754_pow+0x108>
 800b752:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b756:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800b75a:	950a      	str	r5, [sp, #40]	; 0x28
 800b75c:	9d00      	ldr	r5, [sp, #0]
 800b75e:	46ac      	mov	ip, r5
 800b760:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b762:	ea5c 0505 	orrs.w	r5, ip, r5
 800b766:	d0e4      	beq.n	800b732 <__ieee754_pow+0x1aa>
 800b768:	4b15      	ldr	r3, [pc, #84]	; (800b7c0 <__ieee754_pow+0x238>)
 800b76a:	429e      	cmp	r6, r3
 800b76c:	f340 80fc 	ble.w	800b968 <__ieee754_pow+0x3e0>
 800b770:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b774:	429e      	cmp	r6, r3
 800b776:	4b10      	ldr	r3, [pc, #64]	; (800b7b8 <__ieee754_pow+0x230>)
 800b778:	dd07      	ble.n	800b78a <__ieee754_pow+0x202>
 800b77a:	429c      	cmp	r4, r3
 800b77c:	dc0a      	bgt.n	800b794 <__ieee754_pow+0x20c>
 800b77e:	2f00      	cmp	r7, #0
 800b780:	da84      	bge.n	800b68c <__ieee754_pow+0x104>
 800b782:	a307      	add	r3, pc, #28	; (adr r3, 800b7a0 <__ieee754_pow+0x218>)
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	e795      	b.n	800b6b6 <__ieee754_pow+0x12e>
 800b78a:	429c      	cmp	r4, r3
 800b78c:	dbf7      	blt.n	800b77e <__ieee754_pow+0x1f6>
 800b78e:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <__ieee754_pow+0x22c>)
 800b790:	429c      	cmp	r4, r3
 800b792:	dd17      	ble.n	800b7c4 <__ieee754_pow+0x23c>
 800b794:	2f00      	cmp	r7, #0
 800b796:	dcf4      	bgt.n	800b782 <__ieee754_pow+0x1fa>
 800b798:	e778      	b.n	800b68c <__ieee754_pow+0x104>
 800b79a:	bf00      	nop
 800b79c:	f3af 8000 	nop.w
 800b7a0:	8800759c 	.word	0x8800759c
 800b7a4:	7e37e43c 	.word	0x7e37e43c
 800b7a8:	7ff00000 	.word	0x7ff00000
 800b7ac:	0800e0d0 	.word	0x0800e0d0
 800b7b0:	433fffff 	.word	0x433fffff
 800b7b4:	3ff00000 	.word	0x3ff00000
 800b7b8:	3fefffff 	.word	0x3fefffff
 800b7bc:	3fe00000 	.word	0x3fe00000
 800b7c0:	41e00000 	.word	0x41e00000
 800b7c4:	4b64      	ldr	r3, [pc, #400]	; (800b958 <__ieee754_pow+0x3d0>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f7f4 fd86 	bl	80002d8 <__aeabi_dsub>
 800b7cc:	a356      	add	r3, pc, #344	; (adr r3, 800b928 <__ieee754_pow+0x3a0>)
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	460d      	mov	r5, r1
 800b7d6:	f7f4 ff37 	bl	8000648 <__aeabi_dmul>
 800b7da:	a355      	add	r3, pc, #340	; (adr r3, 800b930 <__ieee754_pow+0x3a8>)
 800b7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	460f      	mov	r7, r1
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	f7f4 ff2e 	bl	8000648 <__aeabi_dmul>
 800b7ec:	4b5b      	ldr	r3, [pc, #364]	; (800b95c <__ieee754_pow+0x3d4>)
 800b7ee:	4682      	mov	sl, r0
 800b7f0:	468b      	mov	fp, r1
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	f7f4 ff26 	bl	8000648 <__aeabi_dmul>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	a14d      	add	r1, pc, #308	; (adr r1, 800b938 <__ieee754_pow+0x3b0>)
 800b802:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b806:	f7f4 fd67 	bl	80002d8 <__aeabi_dsub>
 800b80a:	4622      	mov	r2, r4
 800b80c:	462b      	mov	r3, r5
 800b80e:	f7f4 ff1b 	bl	8000648 <__aeabi_dmul>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	2000      	movs	r0, #0
 800b818:	4951      	ldr	r1, [pc, #324]	; (800b960 <__ieee754_pow+0x3d8>)
 800b81a:	f7f4 fd5d 	bl	80002d8 <__aeabi_dsub>
 800b81e:	4622      	mov	r2, r4
 800b820:	4680      	mov	r8, r0
 800b822:	4689      	mov	r9, r1
 800b824:	462b      	mov	r3, r5
 800b826:	4620      	mov	r0, r4
 800b828:	4629      	mov	r1, r5
 800b82a:	f7f4 ff0d 	bl	8000648 <__aeabi_dmul>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4640      	mov	r0, r8
 800b834:	4649      	mov	r1, r9
 800b836:	f7f4 ff07 	bl	8000648 <__aeabi_dmul>
 800b83a:	a341      	add	r3, pc, #260	; (adr r3, 800b940 <__ieee754_pow+0x3b8>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 ff02 	bl	8000648 <__aeabi_dmul>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4650      	mov	r0, sl
 800b84a:	4659      	mov	r1, fp
 800b84c:	f7f4 fd44 	bl	80002d8 <__aeabi_dsub>
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	4680      	mov	r8, r0
 800b856:	4689      	mov	r9, r1
 800b858:	4630      	mov	r0, r6
 800b85a:	4639      	mov	r1, r7
 800b85c:	f7f4 fd3e 	bl	80002dc <__adddf3>
 800b860:	2400      	movs	r4, #0
 800b862:	4632      	mov	r2, r6
 800b864:	463b      	mov	r3, r7
 800b866:	4620      	mov	r0, r4
 800b868:	460d      	mov	r5, r1
 800b86a:	f7f4 fd35 	bl	80002d8 <__aeabi_dsub>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	4640      	mov	r0, r8
 800b874:	4649      	mov	r1, r9
 800b876:	f7f4 fd2f 	bl	80002d8 <__aeabi_dsub>
 800b87a:	9b00      	ldr	r3, [sp, #0]
 800b87c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b87e:	3b01      	subs	r3, #1
 800b880:	4313      	orrs	r3, r2
 800b882:	4682      	mov	sl, r0
 800b884:	468b      	mov	fp, r1
 800b886:	f040 81f1 	bne.w	800bc6c <__ieee754_pow+0x6e4>
 800b88a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b948 <__ieee754_pow+0x3c0>
 800b88e:	eeb0 8a47 	vmov.f32	s16, s14
 800b892:	eef0 8a67 	vmov.f32	s17, s15
 800b896:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b89a:	2600      	movs	r6, #0
 800b89c:	4632      	mov	r2, r6
 800b89e:	463b      	mov	r3, r7
 800b8a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8a4:	f7f4 fd18 	bl	80002d8 <__aeabi_dsub>
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	462b      	mov	r3, r5
 800b8ac:	f7f4 fecc 	bl	8000648 <__aeabi_dmul>
 800b8b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8b4:	4680      	mov	r8, r0
 800b8b6:	4689      	mov	r9, r1
 800b8b8:	4650      	mov	r0, sl
 800b8ba:	4659      	mov	r1, fp
 800b8bc:	f7f4 fec4 	bl	8000648 <__aeabi_dmul>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	4649      	mov	r1, r9
 800b8c8:	f7f4 fd08 	bl	80002dc <__adddf3>
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	463b      	mov	r3, r7
 800b8d0:	4680      	mov	r8, r0
 800b8d2:	4689      	mov	r9, r1
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	f7f4 feb6 	bl	8000648 <__aeabi_dmul>
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4604      	mov	r4, r0
 800b8e0:	460d      	mov	r5, r1
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	4649      	mov	r1, r9
 800b8e6:	4640      	mov	r0, r8
 800b8e8:	f7f4 fcf8 	bl	80002dc <__adddf3>
 800b8ec:	4b1d      	ldr	r3, [pc, #116]	; (800b964 <__ieee754_pow+0x3dc>)
 800b8ee:	4299      	cmp	r1, r3
 800b8f0:	ec45 4b19 	vmov	d9, r4, r5
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	460f      	mov	r7, r1
 800b8f8:	468b      	mov	fp, r1
 800b8fa:	f340 82fe 	ble.w	800befa <__ieee754_pow+0x972>
 800b8fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b902:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b906:	4303      	orrs	r3, r0
 800b908:	f000 81f0 	beq.w	800bcec <__ieee754_pow+0x764>
 800b90c:	a310      	add	r3, pc, #64	; (adr r3, 800b950 <__ieee754_pow+0x3c8>)
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b912:	ec51 0b18 	vmov	r0, r1, d8
 800b916:	f7f4 fe97 	bl	8000648 <__aeabi_dmul>
 800b91a:	a30d      	add	r3, pc, #52	; (adr r3, 800b950 <__ieee754_pow+0x3c8>)
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	e6cb      	b.n	800b6ba <__ieee754_pow+0x132>
 800b922:	bf00      	nop
 800b924:	f3af 8000 	nop.w
 800b928:	60000000 	.word	0x60000000
 800b92c:	3ff71547 	.word	0x3ff71547
 800b930:	f85ddf44 	.word	0xf85ddf44
 800b934:	3e54ae0b 	.word	0x3e54ae0b
 800b938:	55555555 	.word	0x55555555
 800b93c:	3fd55555 	.word	0x3fd55555
 800b940:	652b82fe 	.word	0x652b82fe
 800b944:	3ff71547 	.word	0x3ff71547
 800b948:	00000000 	.word	0x00000000
 800b94c:	bff00000 	.word	0xbff00000
 800b950:	8800759c 	.word	0x8800759c
 800b954:	7e37e43c 	.word	0x7e37e43c
 800b958:	3ff00000 	.word	0x3ff00000
 800b95c:	3fd00000 	.word	0x3fd00000
 800b960:	3fe00000 	.word	0x3fe00000
 800b964:	408fffff 	.word	0x408fffff
 800b968:	4bd7      	ldr	r3, [pc, #860]	; (800bcc8 <__ieee754_pow+0x740>)
 800b96a:	ea03 0309 	and.w	r3, r3, r9
 800b96e:	2200      	movs	r2, #0
 800b970:	b92b      	cbnz	r3, 800b97e <__ieee754_pow+0x3f6>
 800b972:	4bd6      	ldr	r3, [pc, #856]	; (800bccc <__ieee754_pow+0x744>)
 800b974:	f7f4 fe68 	bl	8000648 <__aeabi_dmul>
 800b978:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b97c:	460c      	mov	r4, r1
 800b97e:	1523      	asrs	r3, r4, #20
 800b980:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b984:	4413      	add	r3, r2
 800b986:	9309      	str	r3, [sp, #36]	; 0x24
 800b988:	4bd1      	ldr	r3, [pc, #836]	; (800bcd0 <__ieee754_pow+0x748>)
 800b98a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b98e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b992:	429c      	cmp	r4, r3
 800b994:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b998:	dd08      	ble.n	800b9ac <__ieee754_pow+0x424>
 800b99a:	4bce      	ldr	r3, [pc, #824]	; (800bcd4 <__ieee754_pow+0x74c>)
 800b99c:	429c      	cmp	r4, r3
 800b99e:	f340 8163 	ble.w	800bc68 <__ieee754_pow+0x6e0>
 800b9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b9ac:	2400      	movs	r4, #0
 800b9ae:	00e3      	lsls	r3, r4, #3
 800b9b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9b2:	4bc9      	ldr	r3, [pc, #804]	; (800bcd8 <__ieee754_pow+0x750>)
 800b9b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9b8:	ed93 7b00 	vldr	d7, [r3]
 800b9bc:	4629      	mov	r1, r5
 800b9be:	ec53 2b17 	vmov	r2, r3, d7
 800b9c2:	eeb0 8a47 	vmov.f32	s16, s14
 800b9c6:	eef0 8a67 	vmov.f32	s17, s15
 800b9ca:	4682      	mov	sl, r0
 800b9cc:	f7f4 fc84 	bl	80002d8 <__aeabi_dsub>
 800b9d0:	4652      	mov	r2, sl
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	460f      	mov	r7, r1
 800b9d6:	462b      	mov	r3, r5
 800b9d8:	ec51 0b18 	vmov	r0, r1, d8
 800b9dc:	f7f4 fc7e 	bl	80002dc <__adddf3>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	49bd      	ldr	r1, [pc, #756]	; (800bcdc <__ieee754_pow+0x754>)
 800b9e8:	f7f4 ff58 	bl	800089c <__aeabi_ddiv>
 800b9ec:	ec41 0b19 	vmov	d9, r0, r1
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	f7f4 fe26 	bl	8000648 <__aeabi_dmul>
 800b9fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba08:	2300      	movs	r3, #0
 800ba0a:	9304      	str	r3, [sp, #16]
 800ba0c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ba10:	46ab      	mov	fp, r5
 800ba12:	106d      	asrs	r5, r5, #1
 800ba14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ba18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ba1c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ba20:	2200      	movs	r2, #0
 800ba22:	4640      	mov	r0, r8
 800ba24:	4649      	mov	r1, r9
 800ba26:	4614      	mov	r4, r2
 800ba28:	461d      	mov	r5, r3
 800ba2a:	f7f4 fe0d 	bl	8000648 <__aeabi_dmul>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	4630      	mov	r0, r6
 800ba34:	4639      	mov	r1, r7
 800ba36:	f7f4 fc4f 	bl	80002d8 <__aeabi_dsub>
 800ba3a:	ec53 2b18 	vmov	r2, r3, d8
 800ba3e:	4606      	mov	r6, r0
 800ba40:	460f      	mov	r7, r1
 800ba42:	4620      	mov	r0, r4
 800ba44:	4629      	mov	r1, r5
 800ba46:	f7f4 fc47 	bl	80002d8 <__aeabi_dsub>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4650      	mov	r0, sl
 800ba50:	4659      	mov	r1, fp
 800ba52:	f7f4 fc41 	bl	80002d8 <__aeabi_dsub>
 800ba56:	4642      	mov	r2, r8
 800ba58:	464b      	mov	r3, r9
 800ba5a:	f7f4 fdf5 	bl	8000648 <__aeabi_dmul>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	4630      	mov	r0, r6
 800ba64:	4639      	mov	r1, r7
 800ba66:	f7f4 fc37 	bl	80002d8 <__aeabi_dsub>
 800ba6a:	ec53 2b19 	vmov	r2, r3, d9
 800ba6e:	f7f4 fdeb 	bl	8000648 <__aeabi_dmul>
 800ba72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba76:	ec41 0b18 	vmov	d8, r0, r1
 800ba7a:	4610      	mov	r0, r2
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	f7f4 fde3 	bl	8000648 <__aeabi_dmul>
 800ba82:	a37d      	add	r3, pc, #500	; (adr r3, 800bc78 <__ieee754_pow+0x6f0>)
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	f7f4 fddc 	bl	8000648 <__aeabi_dmul>
 800ba90:	a37b      	add	r3, pc, #492	; (adr r3, 800bc80 <__ieee754_pow+0x6f8>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f4 fc21 	bl	80002dc <__adddf3>
 800ba9a:	4622      	mov	r2, r4
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	f7f4 fdd3 	bl	8000648 <__aeabi_dmul>
 800baa2:	a379      	add	r3, pc, #484	; (adr r3, 800bc88 <__ieee754_pow+0x700>)
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	f7f4 fc18 	bl	80002dc <__adddf3>
 800baac:	4622      	mov	r2, r4
 800baae:	462b      	mov	r3, r5
 800bab0:	f7f4 fdca 	bl	8000648 <__aeabi_dmul>
 800bab4:	a376      	add	r3, pc, #472	; (adr r3, 800bc90 <__ieee754_pow+0x708>)
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	f7f4 fc0f 	bl	80002dc <__adddf3>
 800babe:	4622      	mov	r2, r4
 800bac0:	462b      	mov	r3, r5
 800bac2:	f7f4 fdc1 	bl	8000648 <__aeabi_dmul>
 800bac6:	a374      	add	r3, pc, #464	; (adr r3, 800bc98 <__ieee754_pow+0x710>)
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	f7f4 fc06 	bl	80002dc <__adddf3>
 800bad0:	4622      	mov	r2, r4
 800bad2:	462b      	mov	r3, r5
 800bad4:	f7f4 fdb8 	bl	8000648 <__aeabi_dmul>
 800bad8:	a371      	add	r3, pc, #452	; (adr r3, 800bca0 <__ieee754_pow+0x718>)
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f7f4 fbfd 	bl	80002dc <__adddf3>
 800bae2:	4622      	mov	r2, r4
 800bae4:	4606      	mov	r6, r0
 800bae6:	460f      	mov	r7, r1
 800bae8:	462b      	mov	r3, r5
 800baea:	4620      	mov	r0, r4
 800baec:	4629      	mov	r1, r5
 800baee:	f7f4 fdab 	bl	8000648 <__aeabi_dmul>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	4630      	mov	r0, r6
 800baf8:	4639      	mov	r1, r7
 800bafa:	f7f4 fda5 	bl	8000648 <__aeabi_dmul>
 800bafe:	4642      	mov	r2, r8
 800bb00:	4604      	mov	r4, r0
 800bb02:	460d      	mov	r5, r1
 800bb04:	464b      	mov	r3, r9
 800bb06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb0a:	f7f4 fbe7 	bl	80002dc <__adddf3>
 800bb0e:	ec53 2b18 	vmov	r2, r3, d8
 800bb12:	f7f4 fd99 	bl	8000648 <__aeabi_dmul>
 800bb16:	4622      	mov	r2, r4
 800bb18:	462b      	mov	r3, r5
 800bb1a:	f7f4 fbdf 	bl	80002dc <__adddf3>
 800bb1e:	4642      	mov	r2, r8
 800bb20:	4682      	mov	sl, r0
 800bb22:	468b      	mov	fp, r1
 800bb24:	464b      	mov	r3, r9
 800bb26:	4640      	mov	r0, r8
 800bb28:	4649      	mov	r1, r9
 800bb2a:	f7f4 fd8d 	bl	8000648 <__aeabi_dmul>
 800bb2e:	4b6c      	ldr	r3, [pc, #432]	; (800bce0 <__ieee754_pow+0x758>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	4606      	mov	r6, r0
 800bb34:	460f      	mov	r7, r1
 800bb36:	f7f4 fbd1 	bl	80002dc <__adddf3>
 800bb3a:	4652      	mov	r2, sl
 800bb3c:	465b      	mov	r3, fp
 800bb3e:	f7f4 fbcd 	bl	80002dc <__adddf3>
 800bb42:	9c04      	ldr	r4, [sp, #16]
 800bb44:	460d      	mov	r5, r1
 800bb46:	4622      	mov	r2, r4
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	f7f4 fd7b 	bl	8000648 <__aeabi_dmul>
 800bb52:	4b63      	ldr	r3, [pc, #396]	; (800bce0 <__ieee754_pow+0x758>)
 800bb54:	4680      	mov	r8, r0
 800bb56:	4689      	mov	r9, r1
 800bb58:	2200      	movs	r2, #0
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	f7f4 fbbb 	bl	80002d8 <__aeabi_dsub>
 800bb62:	4632      	mov	r2, r6
 800bb64:	463b      	mov	r3, r7
 800bb66:	f7f4 fbb7 	bl	80002d8 <__aeabi_dsub>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4650      	mov	r0, sl
 800bb70:	4659      	mov	r1, fp
 800bb72:	f7f4 fbb1 	bl	80002d8 <__aeabi_dsub>
 800bb76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb7a:	f7f4 fd65 	bl	8000648 <__aeabi_dmul>
 800bb7e:	4622      	mov	r2, r4
 800bb80:	4606      	mov	r6, r0
 800bb82:	460f      	mov	r7, r1
 800bb84:	462b      	mov	r3, r5
 800bb86:	ec51 0b18 	vmov	r0, r1, d8
 800bb8a:	f7f4 fd5d 	bl	8000648 <__aeabi_dmul>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	460b      	mov	r3, r1
 800bb92:	4630      	mov	r0, r6
 800bb94:	4639      	mov	r1, r7
 800bb96:	f7f4 fba1 	bl	80002dc <__adddf3>
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	4602      	mov	r2, r0
 800bba0:	460b      	mov	r3, r1
 800bba2:	4640      	mov	r0, r8
 800bba4:	4649      	mov	r1, r9
 800bba6:	f7f4 fb99 	bl	80002dc <__adddf3>
 800bbaa:	9c04      	ldr	r4, [sp, #16]
 800bbac:	a33e      	add	r3, pc, #248	; (adr r3, 800bca8 <__ieee754_pow+0x720>)
 800bbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	460d      	mov	r5, r1
 800bbb6:	f7f4 fd47 	bl	8000648 <__aeabi_dmul>
 800bbba:	4642      	mov	r2, r8
 800bbbc:	ec41 0b18 	vmov	d8, r0, r1
 800bbc0:	464b      	mov	r3, r9
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	f7f4 fb87 	bl	80002d8 <__aeabi_dsub>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	4630      	mov	r0, r6
 800bbd0:	4639      	mov	r1, r7
 800bbd2:	f7f4 fb81 	bl	80002d8 <__aeabi_dsub>
 800bbd6:	a336      	add	r3, pc, #216	; (adr r3, 800bcb0 <__ieee754_pow+0x728>)
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	f7f4 fd34 	bl	8000648 <__aeabi_dmul>
 800bbe0:	a335      	add	r3, pc, #212	; (adr r3, 800bcb8 <__ieee754_pow+0x730>)
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	460f      	mov	r7, r1
 800bbea:	4620      	mov	r0, r4
 800bbec:	4629      	mov	r1, r5
 800bbee:	f7f4 fd2b 	bl	8000648 <__aeabi_dmul>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	4639      	mov	r1, r7
 800bbfa:	f7f4 fb6f 	bl	80002dc <__adddf3>
 800bbfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc00:	4b38      	ldr	r3, [pc, #224]	; (800bce4 <__ieee754_pow+0x75c>)
 800bc02:	4413      	add	r3, r2
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	f7f4 fb68 	bl	80002dc <__adddf3>
 800bc0c:	4682      	mov	sl, r0
 800bc0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc10:	468b      	mov	fp, r1
 800bc12:	f7f4 fcaf 	bl	8000574 <__aeabi_i2d>
 800bc16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc18:	4b33      	ldr	r3, [pc, #204]	; (800bce8 <__ieee754_pow+0x760>)
 800bc1a:	4413      	add	r3, r2
 800bc1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc20:	4606      	mov	r6, r0
 800bc22:	460f      	mov	r7, r1
 800bc24:	4652      	mov	r2, sl
 800bc26:	465b      	mov	r3, fp
 800bc28:	ec51 0b18 	vmov	r0, r1, d8
 800bc2c:	f7f4 fb56 	bl	80002dc <__adddf3>
 800bc30:	4642      	mov	r2, r8
 800bc32:	464b      	mov	r3, r9
 800bc34:	f7f4 fb52 	bl	80002dc <__adddf3>
 800bc38:	4632      	mov	r2, r6
 800bc3a:	463b      	mov	r3, r7
 800bc3c:	f7f4 fb4e 	bl	80002dc <__adddf3>
 800bc40:	9c04      	ldr	r4, [sp, #16]
 800bc42:	4632      	mov	r2, r6
 800bc44:	463b      	mov	r3, r7
 800bc46:	4620      	mov	r0, r4
 800bc48:	460d      	mov	r5, r1
 800bc4a:	f7f4 fb45 	bl	80002d8 <__aeabi_dsub>
 800bc4e:	4642      	mov	r2, r8
 800bc50:	464b      	mov	r3, r9
 800bc52:	f7f4 fb41 	bl	80002d8 <__aeabi_dsub>
 800bc56:	ec53 2b18 	vmov	r2, r3, d8
 800bc5a:	f7f4 fb3d 	bl	80002d8 <__aeabi_dsub>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	4650      	mov	r0, sl
 800bc64:	4659      	mov	r1, fp
 800bc66:	e606      	b.n	800b876 <__ieee754_pow+0x2ee>
 800bc68:	2401      	movs	r4, #1
 800bc6a:	e6a0      	b.n	800b9ae <__ieee754_pow+0x426>
 800bc6c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bcc0 <__ieee754_pow+0x738>
 800bc70:	e60d      	b.n	800b88e <__ieee754_pow+0x306>
 800bc72:	bf00      	nop
 800bc74:	f3af 8000 	nop.w
 800bc78:	4a454eef 	.word	0x4a454eef
 800bc7c:	3fca7e28 	.word	0x3fca7e28
 800bc80:	93c9db65 	.word	0x93c9db65
 800bc84:	3fcd864a 	.word	0x3fcd864a
 800bc88:	a91d4101 	.word	0xa91d4101
 800bc8c:	3fd17460 	.word	0x3fd17460
 800bc90:	518f264d 	.word	0x518f264d
 800bc94:	3fd55555 	.word	0x3fd55555
 800bc98:	db6fabff 	.word	0xdb6fabff
 800bc9c:	3fdb6db6 	.word	0x3fdb6db6
 800bca0:	33333303 	.word	0x33333303
 800bca4:	3fe33333 	.word	0x3fe33333
 800bca8:	e0000000 	.word	0xe0000000
 800bcac:	3feec709 	.word	0x3feec709
 800bcb0:	dc3a03fd 	.word	0xdc3a03fd
 800bcb4:	3feec709 	.word	0x3feec709
 800bcb8:	145b01f5 	.word	0x145b01f5
 800bcbc:	be3e2fe0 	.word	0xbe3e2fe0
 800bcc0:	00000000 	.word	0x00000000
 800bcc4:	3ff00000 	.word	0x3ff00000
 800bcc8:	7ff00000 	.word	0x7ff00000
 800bccc:	43400000 	.word	0x43400000
 800bcd0:	0003988e 	.word	0x0003988e
 800bcd4:	000bb679 	.word	0x000bb679
 800bcd8:	0800e240 	.word	0x0800e240
 800bcdc:	3ff00000 	.word	0x3ff00000
 800bce0:	40080000 	.word	0x40080000
 800bce4:	0800e260 	.word	0x0800e260
 800bce8:	0800e250 	.word	0x0800e250
 800bcec:	a3b5      	add	r3, pc, #724	; (adr r3, 800bfc4 <__ieee754_pow+0xa3c>)
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	f7f4 faf1 	bl	80002dc <__adddf3>
 800bcfa:	4622      	mov	r2, r4
 800bcfc:	ec41 0b1a 	vmov	d10, r0, r1
 800bd00:	462b      	mov	r3, r5
 800bd02:	4630      	mov	r0, r6
 800bd04:	4639      	mov	r1, r7
 800bd06:	f7f4 fae7 	bl	80002d8 <__aeabi_dsub>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	ec51 0b1a 	vmov	r0, r1, d10
 800bd12:	f7f4 ff29 	bl	8000b68 <__aeabi_dcmpgt>
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f47f adf8 	bne.w	800b90c <__ieee754_pow+0x384>
 800bd1c:	4aa4      	ldr	r2, [pc, #656]	; (800bfb0 <__ieee754_pow+0xa28>)
 800bd1e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd22:	4293      	cmp	r3, r2
 800bd24:	f340 810b 	ble.w	800bf3e <__ieee754_pow+0x9b6>
 800bd28:	151b      	asrs	r3, r3, #20
 800bd2a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bd2e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bd32:	fa4a f303 	asr.w	r3, sl, r3
 800bd36:	445b      	add	r3, fp
 800bd38:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bd3c:	4e9d      	ldr	r6, [pc, #628]	; (800bfb4 <__ieee754_pow+0xa2c>)
 800bd3e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bd42:	4116      	asrs	r6, r2
 800bd44:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bd48:	2000      	movs	r0, #0
 800bd4a:	ea23 0106 	bic.w	r1, r3, r6
 800bd4e:	f1c2 0214 	rsb	r2, r2, #20
 800bd52:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bd56:	fa4a fa02 	asr.w	sl, sl, r2
 800bd5a:	f1bb 0f00 	cmp.w	fp, #0
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	4620      	mov	r0, r4
 800bd64:	4629      	mov	r1, r5
 800bd66:	bfb8      	it	lt
 800bd68:	f1ca 0a00 	rsblt	sl, sl, #0
 800bd6c:	f7f4 fab4 	bl	80002d8 <__aeabi_dsub>
 800bd70:	ec41 0b19 	vmov	d9, r0, r1
 800bd74:	4642      	mov	r2, r8
 800bd76:	464b      	mov	r3, r9
 800bd78:	ec51 0b19 	vmov	r0, r1, d9
 800bd7c:	f7f4 faae 	bl	80002dc <__adddf3>
 800bd80:	2400      	movs	r4, #0
 800bd82:	a379      	add	r3, pc, #484	; (adr r3, 800bf68 <__ieee754_pow+0x9e0>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	4620      	mov	r0, r4
 800bd8a:	460d      	mov	r5, r1
 800bd8c:	f7f4 fc5c 	bl	8000648 <__aeabi_dmul>
 800bd90:	ec53 2b19 	vmov	r2, r3, d9
 800bd94:	4606      	mov	r6, r0
 800bd96:	460f      	mov	r7, r1
 800bd98:	4620      	mov	r0, r4
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	f7f4 fa9c 	bl	80002d8 <__aeabi_dsub>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4640      	mov	r0, r8
 800bda6:	4649      	mov	r1, r9
 800bda8:	f7f4 fa96 	bl	80002d8 <__aeabi_dsub>
 800bdac:	a370      	add	r3, pc, #448	; (adr r3, 800bf70 <__ieee754_pow+0x9e8>)
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	f7f4 fc49 	bl	8000648 <__aeabi_dmul>
 800bdb6:	a370      	add	r3, pc, #448	; (adr r3, 800bf78 <__ieee754_pow+0x9f0>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	4689      	mov	r9, r1
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	f7f4 fc40 	bl	8000648 <__aeabi_dmul>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4640      	mov	r0, r8
 800bdce:	4649      	mov	r1, r9
 800bdd0:	f7f4 fa84 	bl	80002dc <__adddf3>
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	460d      	mov	r5, r1
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4630      	mov	r0, r6
 800bdde:	4639      	mov	r1, r7
 800bde0:	f7f4 fa7c 	bl	80002dc <__adddf3>
 800bde4:	4632      	mov	r2, r6
 800bde6:	463b      	mov	r3, r7
 800bde8:	4680      	mov	r8, r0
 800bdea:	4689      	mov	r9, r1
 800bdec:	f7f4 fa74 	bl	80002d8 <__aeabi_dsub>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	f7f4 fa6e 	bl	80002d8 <__aeabi_dsub>
 800bdfc:	4642      	mov	r2, r8
 800bdfe:	4606      	mov	r6, r0
 800be00:	460f      	mov	r7, r1
 800be02:	464b      	mov	r3, r9
 800be04:	4640      	mov	r0, r8
 800be06:	4649      	mov	r1, r9
 800be08:	f7f4 fc1e 	bl	8000648 <__aeabi_dmul>
 800be0c:	a35c      	add	r3, pc, #368	; (adr r3, 800bf80 <__ieee754_pow+0x9f8>)
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	4604      	mov	r4, r0
 800be14:	460d      	mov	r5, r1
 800be16:	f7f4 fc17 	bl	8000648 <__aeabi_dmul>
 800be1a:	a35b      	add	r3, pc, #364	; (adr r3, 800bf88 <__ieee754_pow+0xa00>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 fa5a 	bl	80002d8 <__aeabi_dsub>
 800be24:	4622      	mov	r2, r4
 800be26:	462b      	mov	r3, r5
 800be28:	f7f4 fc0e 	bl	8000648 <__aeabi_dmul>
 800be2c:	a358      	add	r3, pc, #352	; (adr r3, 800bf90 <__ieee754_pow+0xa08>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	f7f4 fa53 	bl	80002dc <__adddf3>
 800be36:	4622      	mov	r2, r4
 800be38:	462b      	mov	r3, r5
 800be3a:	f7f4 fc05 	bl	8000648 <__aeabi_dmul>
 800be3e:	a356      	add	r3, pc, #344	; (adr r3, 800bf98 <__ieee754_pow+0xa10>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f7f4 fa48 	bl	80002d8 <__aeabi_dsub>
 800be48:	4622      	mov	r2, r4
 800be4a:	462b      	mov	r3, r5
 800be4c:	f7f4 fbfc 	bl	8000648 <__aeabi_dmul>
 800be50:	a353      	add	r3, pc, #332	; (adr r3, 800bfa0 <__ieee754_pow+0xa18>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 fa41 	bl	80002dc <__adddf3>
 800be5a:	4622      	mov	r2, r4
 800be5c:	462b      	mov	r3, r5
 800be5e:	f7f4 fbf3 	bl	8000648 <__aeabi_dmul>
 800be62:	4602      	mov	r2, r0
 800be64:	460b      	mov	r3, r1
 800be66:	4640      	mov	r0, r8
 800be68:	4649      	mov	r1, r9
 800be6a:	f7f4 fa35 	bl	80002d8 <__aeabi_dsub>
 800be6e:	4604      	mov	r4, r0
 800be70:	460d      	mov	r5, r1
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4640      	mov	r0, r8
 800be78:	4649      	mov	r1, r9
 800be7a:	f7f4 fbe5 	bl	8000648 <__aeabi_dmul>
 800be7e:	2200      	movs	r2, #0
 800be80:	ec41 0b19 	vmov	d9, r0, r1
 800be84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be88:	4620      	mov	r0, r4
 800be8a:	4629      	mov	r1, r5
 800be8c:	f7f4 fa24 	bl	80002d8 <__aeabi_dsub>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	ec51 0b19 	vmov	r0, r1, d9
 800be98:	f7f4 fd00 	bl	800089c <__aeabi_ddiv>
 800be9c:	4632      	mov	r2, r6
 800be9e:	4604      	mov	r4, r0
 800bea0:	460d      	mov	r5, r1
 800bea2:	463b      	mov	r3, r7
 800bea4:	4640      	mov	r0, r8
 800bea6:	4649      	mov	r1, r9
 800bea8:	f7f4 fbce 	bl	8000648 <__aeabi_dmul>
 800beac:	4632      	mov	r2, r6
 800beae:	463b      	mov	r3, r7
 800beb0:	f7f4 fa14 	bl	80002dc <__adddf3>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	4620      	mov	r0, r4
 800beba:	4629      	mov	r1, r5
 800bebc:	f7f4 fa0c 	bl	80002d8 <__aeabi_dsub>
 800bec0:	4642      	mov	r2, r8
 800bec2:	464b      	mov	r3, r9
 800bec4:	f7f4 fa08 	bl	80002d8 <__aeabi_dsub>
 800bec8:	460b      	mov	r3, r1
 800beca:	4602      	mov	r2, r0
 800becc:	493a      	ldr	r1, [pc, #232]	; (800bfb8 <__ieee754_pow+0xa30>)
 800bece:	2000      	movs	r0, #0
 800bed0:	f7f4 fa02 	bl	80002d8 <__aeabi_dsub>
 800bed4:	e9cd 0100 	strd	r0, r1, [sp]
 800bed8:	9b01      	ldr	r3, [sp, #4]
 800beda:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bee2:	da2f      	bge.n	800bf44 <__ieee754_pow+0x9bc>
 800bee4:	4650      	mov	r0, sl
 800bee6:	ed9d 0b00 	vldr	d0, [sp]
 800beea:	f001 f921 	bl	800d130 <scalbn>
 800beee:	ec51 0b10 	vmov	r0, r1, d0
 800bef2:	ec53 2b18 	vmov	r2, r3, d8
 800bef6:	f7ff bbe0 	b.w	800b6ba <__ieee754_pow+0x132>
 800befa:	4b30      	ldr	r3, [pc, #192]	; (800bfbc <__ieee754_pow+0xa34>)
 800befc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bf00:	429e      	cmp	r6, r3
 800bf02:	f77f af0b 	ble.w	800bd1c <__ieee754_pow+0x794>
 800bf06:	4b2e      	ldr	r3, [pc, #184]	; (800bfc0 <__ieee754_pow+0xa38>)
 800bf08:	440b      	add	r3, r1
 800bf0a:	4303      	orrs	r3, r0
 800bf0c:	d00b      	beq.n	800bf26 <__ieee754_pow+0x99e>
 800bf0e:	a326      	add	r3, pc, #152	; (adr r3, 800bfa8 <__ieee754_pow+0xa20>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	ec51 0b18 	vmov	r0, r1, d8
 800bf18:	f7f4 fb96 	bl	8000648 <__aeabi_dmul>
 800bf1c:	a322      	add	r3, pc, #136	; (adr r3, 800bfa8 <__ieee754_pow+0xa20>)
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	f7ff bbca 	b.w	800b6ba <__ieee754_pow+0x132>
 800bf26:	4622      	mov	r2, r4
 800bf28:	462b      	mov	r3, r5
 800bf2a:	f7f4 f9d5 	bl	80002d8 <__aeabi_dsub>
 800bf2e:	4642      	mov	r2, r8
 800bf30:	464b      	mov	r3, r9
 800bf32:	f7f4 fe0f 	bl	8000b54 <__aeabi_dcmpge>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f43f aef0 	beq.w	800bd1c <__ieee754_pow+0x794>
 800bf3c:	e7e7      	b.n	800bf0e <__ieee754_pow+0x986>
 800bf3e:	f04f 0a00 	mov.w	sl, #0
 800bf42:	e717      	b.n	800bd74 <__ieee754_pow+0x7ec>
 800bf44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	e7d2      	b.n	800bef2 <__ieee754_pow+0x96a>
 800bf4c:	491a      	ldr	r1, [pc, #104]	; (800bfb8 <__ieee754_pow+0xa30>)
 800bf4e:	2000      	movs	r0, #0
 800bf50:	f7ff bb9e 	b.w	800b690 <__ieee754_pow+0x108>
 800bf54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf58:	f7ff bb9a 	b.w	800b690 <__ieee754_pow+0x108>
 800bf5c:	9000      	str	r0, [sp, #0]
 800bf5e:	f7ff bb76 	b.w	800b64e <__ieee754_pow+0xc6>
 800bf62:	2100      	movs	r1, #0
 800bf64:	f7ff bb60 	b.w	800b628 <__ieee754_pow+0xa0>
 800bf68:	00000000 	.word	0x00000000
 800bf6c:	3fe62e43 	.word	0x3fe62e43
 800bf70:	fefa39ef 	.word	0xfefa39ef
 800bf74:	3fe62e42 	.word	0x3fe62e42
 800bf78:	0ca86c39 	.word	0x0ca86c39
 800bf7c:	be205c61 	.word	0xbe205c61
 800bf80:	72bea4d0 	.word	0x72bea4d0
 800bf84:	3e663769 	.word	0x3e663769
 800bf88:	c5d26bf1 	.word	0xc5d26bf1
 800bf8c:	3ebbbd41 	.word	0x3ebbbd41
 800bf90:	af25de2c 	.word	0xaf25de2c
 800bf94:	3f11566a 	.word	0x3f11566a
 800bf98:	16bebd93 	.word	0x16bebd93
 800bf9c:	3f66c16c 	.word	0x3f66c16c
 800bfa0:	5555553e 	.word	0x5555553e
 800bfa4:	3fc55555 	.word	0x3fc55555
 800bfa8:	c2f8f359 	.word	0xc2f8f359
 800bfac:	01a56e1f 	.word	0x01a56e1f
 800bfb0:	3fe00000 	.word	0x3fe00000
 800bfb4:	000fffff 	.word	0x000fffff
 800bfb8:	3ff00000 	.word	0x3ff00000
 800bfbc:	4090cbff 	.word	0x4090cbff
 800bfc0:	3f6f3400 	.word	0x3f6f3400
 800bfc4:	652b82fe 	.word	0x652b82fe
 800bfc8:	3c971547 	.word	0x3c971547
 800bfcc:	00000000 	.word	0x00000000

0800bfd0 <__ieee754_rem_pio2>:
 800bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd4:	ed2d 8b02 	vpush	{d8}
 800bfd8:	ec55 4b10 	vmov	r4, r5, d0
 800bfdc:	4bca      	ldr	r3, [pc, #808]	; (800c308 <__ieee754_rem_pio2+0x338>)
 800bfde:	b08b      	sub	sp, #44	; 0x2c
 800bfe0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bfe4:	4598      	cmp	r8, r3
 800bfe6:	4682      	mov	sl, r0
 800bfe8:	9502      	str	r5, [sp, #8]
 800bfea:	dc08      	bgt.n	800bffe <__ieee754_rem_pio2+0x2e>
 800bfec:	2200      	movs	r2, #0
 800bfee:	2300      	movs	r3, #0
 800bff0:	ed80 0b00 	vstr	d0, [r0]
 800bff4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bff8:	f04f 0b00 	mov.w	fp, #0
 800bffc:	e028      	b.n	800c050 <__ieee754_rem_pio2+0x80>
 800bffe:	4bc3      	ldr	r3, [pc, #780]	; (800c30c <__ieee754_rem_pio2+0x33c>)
 800c000:	4598      	cmp	r8, r3
 800c002:	dc78      	bgt.n	800c0f6 <__ieee754_rem_pio2+0x126>
 800c004:	9b02      	ldr	r3, [sp, #8]
 800c006:	4ec2      	ldr	r6, [pc, #776]	; (800c310 <__ieee754_rem_pio2+0x340>)
 800c008:	2b00      	cmp	r3, #0
 800c00a:	ee10 0a10 	vmov	r0, s0
 800c00e:	a3b0      	add	r3, pc, #704	; (adr r3, 800c2d0 <__ieee754_rem_pio2+0x300>)
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	4629      	mov	r1, r5
 800c016:	dd39      	ble.n	800c08c <__ieee754_rem_pio2+0xbc>
 800c018:	f7f4 f95e 	bl	80002d8 <__aeabi_dsub>
 800c01c:	45b0      	cmp	r8, r6
 800c01e:	4604      	mov	r4, r0
 800c020:	460d      	mov	r5, r1
 800c022:	d01b      	beq.n	800c05c <__ieee754_rem_pio2+0x8c>
 800c024:	a3ac      	add	r3, pc, #688	; (adr r3, 800c2d8 <__ieee754_rem_pio2+0x308>)
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	f7f4 f955 	bl	80002d8 <__aeabi_dsub>
 800c02e:	4602      	mov	r2, r0
 800c030:	460b      	mov	r3, r1
 800c032:	e9ca 2300 	strd	r2, r3, [sl]
 800c036:	4620      	mov	r0, r4
 800c038:	4629      	mov	r1, r5
 800c03a:	f7f4 f94d 	bl	80002d8 <__aeabi_dsub>
 800c03e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c2d8 <__ieee754_rem_pio2+0x308>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f7f4 f948 	bl	80002d8 <__aeabi_dsub>
 800c048:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c04c:	f04f 0b01 	mov.w	fp, #1
 800c050:	4658      	mov	r0, fp
 800c052:	b00b      	add	sp, #44	; 0x2c
 800c054:	ecbd 8b02 	vpop	{d8}
 800c058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c2e0 <__ieee754_rem_pio2+0x310>)
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	f7f4 f939 	bl	80002d8 <__aeabi_dsub>
 800c066:	a3a0      	add	r3, pc, #640	; (adr r3, 800c2e8 <__ieee754_rem_pio2+0x318>)
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	4604      	mov	r4, r0
 800c06e:	460d      	mov	r5, r1
 800c070:	f7f4 f932 	bl	80002d8 <__aeabi_dsub>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	e9ca 2300 	strd	r2, r3, [sl]
 800c07c:	4620      	mov	r0, r4
 800c07e:	4629      	mov	r1, r5
 800c080:	f7f4 f92a 	bl	80002d8 <__aeabi_dsub>
 800c084:	a398      	add	r3, pc, #608	; (adr r3, 800c2e8 <__ieee754_rem_pio2+0x318>)
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	e7db      	b.n	800c044 <__ieee754_rem_pio2+0x74>
 800c08c:	f7f4 f926 	bl	80002dc <__adddf3>
 800c090:	45b0      	cmp	r8, r6
 800c092:	4604      	mov	r4, r0
 800c094:	460d      	mov	r5, r1
 800c096:	d016      	beq.n	800c0c6 <__ieee754_rem_pio2+0xf6>
 800c098:	a38f      	add	r3, pc, #572	; (adr r3, 800c2d8 <__ieee754_rem_pio2+0x308>)
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	f7f4 f91d 	bl	80002dc <__adddf3>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	e9ca 2300 	strd	r2, r3, [sl]
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	f7f4 f913 	bl	80002d8 <__aeabi_dsub>
 800c0b2:	a389      	add	r3, pc, #548	; (adr r3, 800c2d8 <__ieee754_rem_pio2+0x308>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	f7f4 f910 	bl	80002dc <__adddf3>
 800c0bc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c0c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c0c4:	e7c4      	b.n	800c050 <__ieee754_rem_pio2+0x80>
 800c0c6:	a386      	add	r3, pc, #536	; (adr r3, 800c2e0 <__ieee754_rem_pio2+0x310>)
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	f7f4 f906 	bl	80002dc <__adddf3>
 800c0d0:	a385      	add	r3, pc, #532	; (adr r3, 800c2e8 <__ieee754_rem_pio2+0x318>)
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	460d      	mov	r5, r1
 800c0da:	f7f4 f8ff 	bl	80002dc <__adddf3>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	e9ca 2300 	strd	r2, r3, [sl]
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	f7f4 f8f5 	bl	80002d8 <__aeabi_dsub>
 800c0ee:	a37e      	add	r3, pc, #504	; (adr r3, 800c2e8 <__ieee754_rem_pio2+0x318>)
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	e7e0      	b.n	800c0b8 <__ieee754_rem_pio2+0xe8>
 800c0f6:	4b87      	ldr	r3, [pc, #540]	; (800c314 <__ieee754_rem_pio2+0x344>)
 800c0f8:	4598      	cmp	r8, r3
 800c0fa:	f300 80d9 	bgt.w	800c2b0 <__ieee754_rem_pio2+0x2e0>
 800c0fe:	f000 feed 	bl	800cedc <fabs>
 800c102:	ec55 4b10 	vmov	r4, r5, d0
 800c106:	ee10 0a10 	vmov	r0, s0
 800c10a:	a379      	add	r3, pc, #484	; (adr r3, 800c2f0 <__ieee754_rem_pio2+0x320>)
 800c10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c110:	4629      	mov	r1, r5
 800c112:	f7f4 fa99 	bl	8000648 <__aeabi_dmul>
 800c116:	4b80      	ldr	r3, [pc, #512]	; (800c318 <__ieee754_rem_pio2+0x348>)
 800c118:	2200      	movs	r2, #0
 800c11a:	f7f4 f8df 	bl	80002dc <__adddf3>
 800c11e:	f7f4 fd43 	bl	8000ba8 <__aeabi_d2iz>
 800c122:	4683      	mov	fp, r0
 800c124:	f7f4 fa26 	bl	8000574 <__aeabi_i2d>
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	ec43 2b18 	vmov	d8, r2, r3
 800c130:	a367      	add	r3, pc, #412	; (adr r3, 800c2d0 <__ieee754_rem_pio2+0x300>)
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	f7f4 fa87 	bl	8000648 <__aeabi_dmul>
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	4620      	mov	r0, r4
 800c140:	4629      	mov	r1, r5
 800c142:	f7f4 f8c9 	bl	80002d8 <__aeabi_dsub>
 800c146:	a364      	add	r3, pc, #400	; (adr r3, 800c2d8 <__ieee754_rem_pio2+0x308>)
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	4606      	mov	r6, r0
 800c14e:	460f      	mov	r7, r1
 800c150:	ec51 0b18 	vmov	r0, r1, d8
 800c154:	f7f4 fa78 	bl	8000648 <__aeabi_dmul>
 800c158:	f1bb 0f1f 	cmp.w	fp, #31
 800c15c:	4604      	mov	r4, r0
 800c15e:	460d      	mov	r5, r1
 800c160:	dc0d      	bgt.n	800c17e <__ieee754_rem_pio2+0x1ae>
 800c162:	4b6e      	ldr	r3, [pc, #440]	; (800c31c <__ieee754_rem_pio2+0x34c>)
 800c164:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800c168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c16c:	4543      	cmp	r3, r8
 800c16e:	d006      	beq.n	800c17e <__ieee754_rem_pio2+0x1ae>
 800c170:	4622      	mov	r2, r4
 800c172:	462b      	mov	r3, r5
 800c174:	4630      	mov	r0, r6
 800c176:	4639      	mov	r1, r7
 800c178:	f7f4 f8ae 	bl	80002d8 <__aeabi_dsub>
 800c17c:	e00f      	b.n	800c19e <__ieee754_rem_pio2+0x1ce>
 800c17e:	462b      	mov	r3, r5
 800c180:	4622      	mov	r2, r4
 800c182:	4630      	mov	r0, r6
 800c184:	4639      	mov	r1, r7
 800c186:	f7f4 f8a7 	bl	80002d8 <__aeabi_dsub>
 800c18a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c18e:	9303      	str	r3, [sp, #12]
 800c190:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c194:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c198:	f1b8 0f10 	cmp.w	r8, #16
 800c19c:	dc02      	bgt.n	800c1a4 <__ieee754_rem_pio2+0x1d4>
 800c19e:	e9ca 0100 	strd	r0, r1, [sl]
 800c1a2:	e039      	b.n	800c218 <__ieee754_rem_pio2+0x248>
 800c1a4:	a34e      	add	r3, pc, #312	; (adr r3, 800c2e0 <__ieee754_rem_pio2+0x310>)
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	ec51 0b18 	vmov	r0, r1, d8
 800c1ae:	f7f4 fa4b 	bl	8000648 <__aeabi_dmul>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	4639      	mov	r1, r7
 800c1be:	f7f4 f88b 	bl	80002d8 <__aeabi_dsub>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4680      	mov	r8, r0
 800c1c8:	4689      	mov	r9, r1
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	4639      	mov	r1, r7
 800c1ce:	f7f4 f883 	bl	80002d8 <__aeabi_dsub>
 800c1d2:	4622      	mov	r2, r4
 800c1d4:	462b      	mov	r3, r5
 800c1d6:	f7f4 f87f 	bl	80002d8 <__aeabi_dsub>
 800c1da:	a343      	add	r3, pc, #268	; (adr r3, 800c2e8 <__ieee754_rem_pio2+0x318>)
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	ec51 0b18 	vmov	r0, r1, d8
 800c1e8:	f7f4 fa2e 	bl	8000648 <__aeabi_dmul>
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	462b      	mov	r3, r5
 800c1f0:	f7f4 f872 	bl	80002d8 <__aeabi_dsub>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	460d      	mov	r5, r1
 800c1fc:	4640      	mov	r0, r8
 800c1fe:	4649      	mov	r1, r9
 800c200:	f7f4 f86a 	bl	80002d8 <__aeabi_dsub>
 800c204:	9a03      	ldr	r2, [sp, #12]
 800c206:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	2b31      	cmp	r3, #49	; 0x31
 800c20e:	dc24      	bgt.n	800c25a <__ieee754_rem_pio2+0x28a>
 800c210:	e9ca 0100 	strd	r0, r1, [sl]
 800c214:	4646      	mov	r6, r8
 800c216:	464f      	mov	r7, r9
 800c218:	e9da 8900 	ldrd	r8, r9, [sl]
 800c21c:	4630      	mov	r0, r6
 800c21e:	4642      	mov	r2, r8
 800c220:	464b      	mov	r3, r9
 800c222:	4639      	mov	r1, r7
 800c224:	f7f4 f858 	bl	80002d8 <__aeabi_dsub>
 800c228:	462b      	mov	r3, r5
 800c22a:	4622      	mov	r2, r4
 800c22c:	f7f4 f854 	bl	80002d8 <__aeabi_dsub>
 800c230:	9b02      	ldr	r3, [sp, #8]
 800c232:	2b00      	cmp	r3, #0
 800c234:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c238:	f6bf af0a 	bge.w	800c050 <__ieee754_rem_pio2+0x80>
 800c23c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c240:	f8ca 3004 	str.w	r3, [sl, #4]
 800c244:	f8ca 8000 	str.w	r8, [sl]
 800c248:	f8ca 0008 	str.w	r0, [sl, #8]
 800c24c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c250:	f8ca 300c 	str.w	r3, [sl, #12]
 800c254:	f1cb 0b00 	rsb	fp, fp, #0
 800c258:	e6fa      	b.n	800c050 <__ieee754_rem_pio2+0x80>
 800c25a:	a327      	add	r3, pc, #156	; (adr r3, 800c2f8 <__ieee754_rem_pio2+0x328>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	ec51 0b18 	vmov	r0, r1, d8
 800c264:	f7f4 f9f0 	bl	8000648 <__aeabi_dmul>
 800c268:	4604      	mov	r4, r0
 800c26a:	460d      	mov	r5, r1
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4640      	mov	r0, r8
 800c272:	4649      	mov	r1, r9
 800c274:	f7f4 f830 	bl	80002d8 <__aeabi_dsub>
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	4606      	mov	r6, r0
 800c27e:	460f      	mov	r7, r1
 800c280:	4640      	mov	r0, r8
 800c282:	4649      	mov	r1, r9
 800c284:	f7f4 f828 	bl	80002d8 <__aeabi_dsub>
 800c288:	4622      	mov	r2, r4
 800c28a:	462b      	mov	r3, r5
 800c28c:	f7f4 f824 	bl	80002d8 <__aeabi_dsub>
 800c290:	a31b      	add	r3, pc, #108	; (adr r3, 800c300 <__ieee754_rem_pio2+0x330>)
 800c292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c296:	4604      	mov	r4, r0
 800c298:	460d      	mov	r5, r1
 800c29a:	ec51 0b18 	vmov	r0, r1, d8
 800c29e:	f7f4 f9d3 	bl	8000648 <__aeabi_dmul>
 800c2a2:	4622      	mov	r2, r4
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	f7f4 f817 	bl	80002d8 <__aeabi_dsub>
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	460d      	mov	r5, r1
 800c2ae:	e75f      	b.n	800c170 <__ieee754_rem_pio2+0x1a0>
 800c2b0:	4b1b      	ldr	r3, [pc, #108]	; (800c320 <__ieee754_rem_pio2+0x350>)
 800c2b2:	4598      	cmp	r8, r3
 800c2b4:	dd36      	ble.n	800c324 <__ieee754_rem_pio2+0x354>
 800c2b6:	ee10 2a10 	vmov	r2, s0
 800c2ba:	462b      	mov	r3, r5
 800c2bc:	4620      	mov	r0, r4
 800c2be:	4629      	mov	r1, r5
 800c2c0:	f7f4 f80a 	bl	80002d8 <__aeabi_dsub>
 800c2c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c2c8:	e9ca 0100 	strd	r0, r1, [sl]
 800c2cc:	e694      	b.n	800bff8 <__ieee754_rem_pio2+0x28>
 800c2ce:	bf00      	nop
 800c2d0:	54400000 	.word	0x54400000
 800c2d4:	3ff921fb 	.word	0x3ff921fb
 800c2d8:	1a626331 	.word	0x1a626331
 800c2dc:	3dd0b461 	.word	0x3dd0b461
 800c2e0:	1a600000 	.word	0x1a600000
 800c2e4:	3dd0b461 	.word	0x3dd0b461
 800c2e8:	2e037073 	.word	0x2e037073
 800c2ec:	3ba3198a 	.word	0x3ba3198a
 800c2f0:	6dc9c883 	.word	0x6dc9c883
 800c2f4:	3fe45f30 	.word	0x3fe45f30
 800c2f8:	2e000000 	.word	0x2e000000
 800c2fc:	3ba3198a 	.word	0x3ba3198a
 800c300:	252049c1 	.word	0x252049c1
 800c304:	397b839a 	.word	0x397b839a
 800c308:	3fe921fb 	.word	0x3fe921fb
 800c30c:	4002d97b 	.word	0x4002d97b
 800c310:	3ff921fb 	.word	0x3ff921fb
 800c314:	413921fb 	.word	0x413921fb
 800c318:	3fe00000 	.word	0x3fe00000
 800c31c:	0800e270 	.word	0x0800e270
 800c320:	7fefffff 	.word	0x7fefffff
 800c324:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c328:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c32c:	ee10 0a10 	vmov	r0, s0
 800c330:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c334:	ee10 6a10 	vmov	r6, s0
 800c338:	460f      	mov	r7, r1
 800c33a:	f7f4 fc35 	bl	8000ba8 <__aeabi_d2iz>
 800c33e:	f7f4 f919 	bl	8000574 <__aeabi_i2d>
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	4630      	mov	r0, r6
 800c348:	4639      	mov	r1, r7
 800c34a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c34e:	f7f3 ffc3 	bl	80002d8 <__aeabi_dsub>
 800c352:	4b22      	ldr	r3, [pc, #136]	; (800c3dc <__ieee754_rem_pio2+0x40c>)
 800c354:	2200      	movs	r2, #0
 800c356:	f7f4 f977 	bl	8000648 <__aeabi_dmul>
 800c35a:	460f      	mov	r7, r1
 800c35c:	4606      	mov	r6, r0
 800c35e:	f7f4 fc23 	bl	8000ba8 <__aeabi_d2iz>
 800c362:	f7f4 f907 	bl	8000574 <__aeabi_i2d>
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	4630      	mov	r0, r6
 800c36c:	4639      	mov	r1, r7
 800c36e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c372:	f7f3 ffb1 	bl	80002d8 <__aeabi_dsub>
 800c376:	4b19      	ldr	r3, [pc, #100]	; (800c3dc <__ieee754_rem_pio2+0x40c>)
 800c378:	2200      	movs	r2, #0
 800c37a:	f7f4 f965 	bl	8000648 <__aeabi_dmul>
 800c37e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c382:	ad04      	add	r5, sp, #16
 800c384:	f04f 0803 	mov.w	r8, #3
 800c388:	46a9      	mov	r9, r5
 800c38a:	2600      	movs	r6, #0
 800c38c:	2700      	movs	r7, #0
 800c38e:	4632      	mov	r2, r6
 800c390:	463b      	mov	r3, r7
 800c392:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c396:	46c3      	mov	fp, r8
 800c398:	3d08      	subs	r5, #8
 800c39a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c39e:	f7f4 fbbb 	bl	8000b18 <__aeabi_dcmpeq>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d1f3      	bne.n	800c38e <__ieee754_rem_pio2+0x3be>
 800c3a6:	4b0e      	ldr	r3, [pc, #56]	; (800c3e0 <__ieee754_rem_pio2+0x410>)
 800c3a8:	9301      	str	r3, [sp, #4]
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	4622      	mov	r2, r4
 800c3b0:	465b      	mov	r3, fp
 800c3b2:	4651      	mov	r1, sl
 800c3b4:	4648      	mov	r0, r9
 800c3b6:	f000 f993 	bl	800c6e0 <__kernel_rem_pio2>
 800c3ba:	9b02      	ldr	r3, [sp, #8]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	4683      	mov	fp, r0
 800c3c0:	f6bf ae46 	bge.w	800c050 <__ieee754_rem_pio2+0x80>
 800c3c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c3c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c3cc:	f8ca 3004 	str.w	r3, [sl, #4]
 800c3d0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c3d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c3d8:	e73a      	b.n	800c250 <__ieee754_rem_pio2+0x280>
 800c3da:	bf00      	nop
 800c3dc:	41700000 	.word	0x41700000
 800c3e0:	0800e2f0 	.word	0x0800e2f0

0800c3e4 <__ieee754_sqrt>:
 800c3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e8:	ec55 4b10 	vmov	r4, r5, d0
 800c3ec:	4e56      	ldr	r6, [pc, #344]	; (800c548 <__ieee754_sqrt+0x164>)
 800c3ee:	43ae      	bics	r6, r5
 800c3f0:	ee10 0a10 	vmov	r0, s0
 800c3f4:	ee10 3a10 	vmov	r3, s0
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	462a      	mov	r2, r5
 800c3fc:	d110      	bne.n	800c420 <__ieee754_sqrt+0x3c>
 800c3fe:	ee10 2a10 	vmov	r2, s0
 800c402:	462b      	mov	r3, r5
 800c404:	f7f4 f920 	bl	8000648 <__aeabi_dmul>
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	4620      	mov	r0, r4
 800c40e:	4629      	mov	r1, r5
 800c410:	f7f3 ff64 	bl	80002dc <__adddf3>
 800c414:	4604      	mov	r4, r0
 800c416:	460d      	mov	r5, r1
 800c418:	ec45 4b10 	vmov	d0, r4, r5
 800c41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c420:	2d00      	cmp	r5, #0
 800c422:	dc10      	bgt.n	800c446 <__ieee754_sqrt+0x62>
 800c424:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c428:	4330      	orrs	r0, r6
 800c42a:	d0f5      	beq.n	800c418 <__ieee754_sqrt+0x34>
 800c42c:	b15d      	cbz	r5, 800c446 <__ieee754_sqrt+0x62>
 800c42e:	ee10 2a10 	vmov	r2, s0
 800c432:	462b      	mov	r3, r5
 800c434:	ee10 0a10 	vmov	r0, s0
 800c438:	f7f3 ff4e 	bl	80002d8 <__aeabi_dsub>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	f7f4 fa2c 	bl	800089c <__aeabi_ddiv>
 800c444:	e7e6      	b.n	800c414 <__ieee754_sqrt+0x30>
 800c446:	1509      	asrs	r1, r1, #20
 800c448:	d076      	beq.n	800c538 <__ieee754_sqrt+0x154>
 800c44a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c44e:	07ce      	lsls	r6, r1, #31
 800c450:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c454:	bf5e      	ittt	pl
 800c456:	0fda      	lsrpl	r2, r3, #31
 800c458:	005b      	lslpl	r3, r3, #1
 800c45a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c45e:	0fda      	lsrs	r2, r3, #31
 800c460:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c464:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c468:	2000      	movs	r0, #0
 800c46a:	106d      	asrs	r5, r5, #1
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	f04f 0e16 	mov.w	lr, #22
 800c472:	4684      	mov	ip, r0
 800c474:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c478:	eb0c 0401 	add.w	r4, ip, r1
 800c47c:	4294      	cmp	r4, r2
 800c47e:	bfde      	ittt	le
 800c480:	1b12      	suble	r2, r2, r4
 800c482:	eb04 0c01 	addle.w	ip, r4, r1
 800c486:	1840      	addle	r0, r0, r1
 800c488:	0052      	lsls	r2, r2, #1
 800c48a:	f1be 0e01 	subs.w	lr, lr, #1
 800c48e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c492:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c496:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c49a:	d1ed      	bne.n	800c478 <__ieee754_sqrt+0x94>
 800c49c:	4671      	mov	r1, lr
 800c49e:	2720      	movs	r7, #32
 800c4a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c4a4:	4562      	cmp	r2, ip
 800c4a6:	eb04 060e 	add.w	r6, r4, lr
 800c4aa:	dc02      	bgt.n	800c4b2 <__ieee754_sqrt+0xce>
 800c4ac:	d113      	bne.n	800c4d6 <__ieee754_sqrt+0xf2>
 800c4ae:	429e      	cmp	r6, r3
 800c4b0:	d811      	bhi.n	800c4d6 <__ieee754_sqrt+0xf2>
 800c4b2:	2e00      	cmp	r6, #0
 800c4b4:	eb06 0e04 	add.w	lr, r6, r4
 800c4b8:	da43      	bge.n	800c542 <__ieee754_sqrt+0x15e>
 800c4ba:	f1be 0f00 	cmp.w	lr, #0
 800c4be:	db40      	blt.n	800c542 <__ieee754_sqrt+0x15e>
 800c4c0:	f10c 0801 	add.w	r8, ip, #1
 800c4c4:	eba2 020c 	sub.w	r2, r2, ip
 800c4c8:	429e      	cmp	r6, r3
 800c4ca:	bf88      	it	hi
 800c4cc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800c4d0:	1b9b      	subs	r3, r3, r6
 800c4d2:	4421      	add	r1, r4
 800c4d4:	46c4      	mov	ip, r8
 800c4d6:	0052      	lsls	r2, r2, #1
 800c4d8:	3f01      	subs	r7, #1
 800c4da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c4de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c4e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c4e6:	d1dd      	bne.n	800c4a4 <__ieee754_sqrt+0xc0>
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	d006      	beq.n	800c4fa <__ieee754_sqrt+0x116>
 800c4ec:	1c4c      	adds	r4, r1, #1
 800c4ee:	bf13      	iteet	ne
 800c4f0:	3101      	addne	r1, #1
 800c4f2:	3001      	addeq	r0, #1
 800c4f4:	4639      	moveq	r1, r7
 800c4f6:	f021 0101 	bicne.w	r1, r1, #1
 800c4fa:	1043      	asrs	r3, r0, #1
 800c4fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c500:	0849      	lsrs	r1, r1, #1
 800c502:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c506:	07c2      	lsls	r2, r0, #31
 800c508:	bf48      	it	mi
 800c50a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c50e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c512:	460c      	mov	r4, r1
 800c514:	463d      	mov	r5, r7
 800c516:	e77f      	b.n	800c418 <__ieee754_sqrt+0x34>
 800c518:	0ada      	lsrs	r2, r3, #11
 800c51a:	3815      	subs	r0, #21
 800c51c:	055b      	lsls	r3, r3, #21
 800c51e:	2a00      	cmp	r2, #0
 800c520:	d0fa      	beq.n	800c518 <__ieee754_sqrt+0x134>
 800c522:	02d7      	lsls	r7, r2, #11
 800c524:	d50a      	bpl.n	800c53c <__ieee754_sqrt+0x158>
 800c526:	f1c1 0420 	rsb	r4, r1, #32
 800c52a:	fa23 f404 	lsr.w	r4, r3, r4
 800c52e:	1e4d      	subs	r5, r1, #1
 800c530:	408b      	lsls	r3, r1
 800c532:	4322      	orrs	r2, r4
 800c534:	1b41      	subs	r1, r0, r5
 800c536:	e788      	b.n	800c44a <__ieee754_sqrt+0x66>
 800c538:	4608      	mov	r0, r1
 800c53a:	e7f0      	b.n	800c51e <__ieee754_sqrt+0x13a>
 800c53c:	0052      	lsls	r2, r2, #1
 800c53e:	3101      	adds	r1, #1
 800c540:	e7ef      	b.n	800c522 <__ieee754_sqrt+0x13e>
 800c542:	46e0      	mov	r8, ip
 800c544:	e7be      	b.n	800c4c4 <__ieee754_sqrt+0xe0>
 800c546:	bf00      	nop
 800c548:	7ff00000 	.word	0x7ff00000
 800c54c:	00000000 	.word	0x00000000

0800c550 <__kernel_cos>:
 800c550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	ec57 6b10 	vmov	r6, r7, d0
 800c558:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c55c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c560:	ed8d 1b00 	vstr	d1, [sp]
 800c564:	da07      	bge.n	800c576 <__kernel_cos+0x26>
 800c566:	ee10 0a10 	vmov	r0, s0
 800c56a:	4639      	mov	r1, r7
 800c56c:	f7f4 fb1c 	bl	8000ba8 <__aeabi_d2iz>
 800c570:	2800      	cmp	r0, #0
 800c572:	f000 8088 	beq.w	800c686 <__kernel_cos+0x136>
 800c576:	4632      	mov	r2, r6
 800c578:	463b      	mov	r3, r7
 800c57a:	4630      	mov	r0, r6
 800c57c:	4639      	mov	r1, r7
 800c57e:	f7f4 f863 	bl	8000648 <__aeabi_dmul>
 800c582:	4b51      	ldr	r3, [pc, #324]	; (800c6c8 <__kernel_cos+0x178>)
 800c584:	2200      	movs	r2, #0
 800c586:	4604      	mov	r4, r0
 800c588:	460d      	mov	r5, r1
 800c58a:	f7f4 f85d 	bl	8000648 <__aeabi_dmul>
 800c58e:	a340      	add	r3, pc, #256	; (adr r3, 800c690 <__kernel_cos+0x140>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	4682      	mov	sl, r0
 800c596:	468b      	mov	fp, r1
 800c598:	4620      	mov	r0, r4
 800c59a:	4629      	mov	r1, r5
 800c59c:	f7f4 f854 	bl	8000648 <__aeabi_dmul>
 800c5a0:	a33d      	add	r3, pc, #244	; (adr r3, 800c698 <__kernel_cos+0x148>)
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	f7f3 fe99 	bl	80002dc <__adddf3>
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	462b      	mov	r3, r5
 800c5ae:	f7f4 f84b 	bl	8000648 <__aeabi_dmul>
 800c5b2:	a33b      	add	r3, pc, #236	; (adr r3, 800c6a0 <__kernel_cos+0x150>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f7f3 fe8e 	bl	80002d8 <__aeabi_dsub>
 800c5bc:	4622      	mov	r2, r4
 800c5be:	462b      	mov	r3, r5
 800c5c0:	f7f4 f842 	bl	8000648 <__aeabi_dmul>
 800c5c4:	a338      	add	r3, pc, #224	; (adr r3, 800c6a8 <__kernel_cos+0x158>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f3 fe87 	bl	80002dc <__adddf3>
 800c5ce:	4622      	mov	r2, r4
 800c5d0:	462b      	mov	r3, r5
 800c5d2:	f7f4 f839 	bl	8000648 <__aeabi_dmul>
 800c5d6:	a336      	add	r3, pc, #216	; (adr r3, 800c6b0 <__kernel_cos+0x160>)
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	f7f3 fe7c 	bl	80002d8 <__aeabi_dsub>
 800c5e0:	4622      	mov	r2, r4
 800c5e2:	462b      	mov	r3, r5
 800c5e4:	f7f4 f830 	bl	8000648 <__aeabi_dmul>
 800c5e8:	a333      	add	r3, pc, #204	; (adr r3, 800c6b8 <__kernel_cos+0x168>)
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	f7f3 fe75 	bl	80002dc <__adddf3>
 800c5f2:	4622      	mov	r2, r4
 800c5f4:	462b      	mov	r3, r5
 800c5f6:	f7f4 f827 	bl	8000648 <__aeabi_dmul>
 800c5fa:	4622      	mov	r2, r4
 800c5fc:	462b      	mov	r3, r5
 800c5fe:	f7f4 f823 	bl	8000648 <__aeabi_dmul>
 800c602:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c606:	4604      	mov	r4, r0
 800c608:	460d      	mov	r5, r1
 800c60a:	4630      	mov	r0, r6
 800c60c:	4639      	mov	r1, r7
 800c60e:	f7f4 f81b 	bl	8000648 <__aeabi_dmul>
 800c612:	460b      	mov	r3, r1
 800c614:	4602      	mov	r2, r0
 800c616:	4629      	mov	r1, r5
 800c618:	4620      	mov	r0, r4
 800c61a:	f7f3 fe5d 	bl	80002d8 <__aeabi_dsub>
 800c61e:	4b2b      	ldr	r3, [pc, #172]	; (800c6cc <__kernel_cos+0x17c>)
 800c620:	4598      	cmp	r8, r3
 800c622:	4606      	mov	r6, r0
 800c624:	460f      	mov	r7, r1
 800c626:	dc10      	bgt.n	800c64a <__kernel_cos+0xfa>
 800c628:	4602      	mov	r2, r0
 800c62a:	460b      	mov	r3, r1
 800c62c:	4650      	mov	r0, sl
 800c62e:	4659      	mov	r1, fp
 800c630:	f7f3 fe52 	bl	80002d8 <__aeabi_dsub>
 800c634:	460b      	mov	r3, r1
 800c636:	4926      	ldr	r1, [pc, #152]	; (800c6d0 <__kernel_cos+0x180>)
 800c638:	4602      	mov	r2, r0
 800c63a:	2000      	movs	r0, #0
 800c63c:	f7f3 fe4c 	bl	80002d8 <__aeabi_dsub>
 800c640:	ec41 0b10 	vmov	d0, r0, r1
 800c644:	b003      	add	sp, #12
 800c646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64a:	4b22      	ldr	r3, [pc, #136]	; (800c6d4 <__kernel_cos+0x184>)
 800c64c:	4920      	ldr	r1, [pc, #128]	; (800c6d0 <__kernel_cos+0x180>)
 800c64e:	4598      	cmp	r8, r3
 800c650:	bfcc      	ite	gt
 800c652:	4d21      	ldrgt	r5, [pc, #132]	; (800c6d8 <__kernel_cos+0x188>)
 800c654:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c658:	2400      	movs	r4, #0
 800c65a:	4622      	mov	r2, r4
 800c65c:	462b      	mov	r3, r5
 800c65e:	2000      	movs	r0, #0
 800c660:	f7f3 fe3a 	bl	80002d8 <__aeabi_dsub>
 800c664:	4622      	mov	r2, r4
 800c666:	4680      	mov	r8, r0
 800c668:	4689      	mov	r9, r1
 800c66a:	462b      	mov	r3, r5
 800c66c:	4650      	mov	r0, sl
 800c66e:	4659      	mov	r1, fp
 800c670:	f7f3 fe32 	bl	80002d8 <__aeabi_dsub>
 800c674:	4632      	mov	r2, r6
 800c676:	463b      	mov	r3, r7
 800c678:	f7f3 fe2e 	bl	80002d8 <__aeabi_dsub>
 800c67c:	4602      	mov	r2, r0
 800c67e:	460b      	mov	r3, r1
 800c680:	4640      	mov	r0, r8
 800c682:	4649      	mov	r1, r9
 800c684:	e7da      	b.n	800c63c <__kernel_cos+0xec>
 800c686:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c6c0 <__kernel_cos+0x170>
 800c68a:	e7db      	b.n	800c644 <__kernel_cos+0xf4>
 800c68c:	f3af 8000 	nop.w
 800c690:	be8838d4 	.word	0xbe8838d4
 800c694:	bda8fae9 	.word	0xbda8fae9
 800c698:	bdb4b1c4 	.word	0xbdb4b1c4
 800c69c:	3e21ee9e 	.word	0x3e21ee9e
 800c6a0:	809c52ad 	.word	0x809c52ad
 800c6a4:	3e927e4f 	.word	0x3e927e4f
 800c6a8:	19cb1590 	.word	0x19cb1590
 800c6ac:	3efa01a0 	.word	0x3efa01a0
 800c6b0:	16c15177 	.word	0x16c15177
 800c6b4:	3f56c16c 	.word	0x3f56c16c
 800c6b8:	5555554c 	.word	0x5555554c
 800c6bc:	3fa55555 	.word	0x3fa55555
 800c6c0:	00000000 	.word	0x00000000
 800c6c4:	3ff00000 	.word	0x3ff00000
 800c6c8:	3fe00000 	.word	0x3fe00000
 800c6cc:	3fd33332 	.word	0x3fd33332
 800c6d0:	3ff00000 	.word	0x3ff00000
 800c6d4:	3fe90000 	.word	0x3fe90000
 800c6d8:	3fd20000 	.word	0x3fd20000
 800c6dc:	00000000 	.word	0x00000000

0800c6e0 <__kernel_rem_pio2>:
 800c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e4:	ed2d 8b02 	vpush	{d8}
 800c6e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c6ec:	f112 0f14 	cmn.w	r2, #20
 800c6f0:	9308      	str	r3, [sp, #32]
 800c6f2:	9101      	str	r1, [sp, #4]
 800c6f4:	4bc6      	ldr	r3, [pc, #792]	; (800ca10 <__kernel_rem_pio2+0x330>)
 800c6f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c6f8:	9009      	str	r0, [sp, #36]	; 0x24
 800c6fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6fe:	9304      	str	r3, [sp, #16]
 800c700:	9b08      	ldr	r3, [sp, #32]
 800c702:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c706:	bfa8      	it	ge
 800c708:	1ed4      	subge	r4, r2, #3
 800c70a:	9306      	str	r3, [sp, #24]
 800c70c:	bfb2      	itee	lt
 800c70e:	2400      	movlt	r4, #0
 800c710:	2318      	movge	r3, #24
 800c712:	fb94 f4f3 	sdivge	r4, r4, r3
 800c716:	f06f 0317 	mvn.w	r3, #23
 800c71a:	fb04 3303 	mla	r3, r4, r3, r3
 800c71e:	eb03 0a02 	add.w	sl, r3, r2
 800c722:	9b04      	ldr	r3, [sp, #16]
 800c724:	9a06      	ldr	r2, [sp, #24]
 800c726:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ca00 <__kernel_rem_pio2+0x320>
 800c72a:	eb03 0802 	add.w	r8, r3, r2
 800c72e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c730:	1aa7      	subs	r7, r4, r2
 800c732:	ae20      	add	r6, sp, #128	; 0x80
 800c734:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c738:	2500      	movs	r5, #0
 800c73a:	4545      	cmp	r5, r8
 800c73c:	dd18      	ble.n	800c770 <__kernel_rem_pio2+0x90>
 800c73e:	9b08      	ldr	r3, [sp, #32]
 800c740:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c744:	aa20      	add	r2, sp, #128	; 0x80
 800c746:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800ca00 <__kernel_rem_pio2+0x320>
 800c74a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c74e:	f1c3 0301 	rsb	r3, r3, #1
 800c752:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c756:	9307      	str	r3, [sp, #28]
 800c758:	9b07      	ldr	r3, [sp, #28]
 800c75a:	9a04      	ldr	r2, [sp, #16]
 800c75c:	4443      	add	r3, r8
 800c75e:	429a      	cmp	r2, r3
 800c760:	db2f      	blt.n	800c7c2 <__kernel_rem_pio2+0xe2>
 800c762:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c766:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c76a:	462f      	mov	r7, r5
 800c76c:	2600      	movs	r6, #0
 800c76e:	e01b      	b.n	800c7a8 <__kernel_rem_pio2+0xc8>
 800c770:	42ef      	cmn	r7, r5
 800c772:	d407      	bmi.n	800c784 <__kernel_rem_pio2+0xa4>
 800c774:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c778:	f7f3 fefc 	bl	8000574 <__aeabi_i2d>
 800c77c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c780:	3501      	adds	r5, #1
 800c782:	e7da      	b.n	800c73a <__kernel_rem_pio2+0x5a>
 800c784:	ec51 0b18 	vmov	r0, r1, d8
 800c788:	e7f8      	b.n	800c77c <__kernel_rem_pio2+0x9c>
 800c78a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c78e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c792:	f7f3 ff59 	bl	8000648 <__aeabi_dmul>
 800c796:	4602      	mov	r2, r0
 800c798:	460b      	mov	r3, r1
 800c79a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c79e:	f7f3 fd9d 	bl	80002dc <__adddf3>
 800c7a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7a6:	3601      	adds	r6, #1
 800c7a8:	9b06      	ldr	r3, [sp, #24]
 800c7aa:	429e      	cmp	r6, r3
 800c7ac:	f1a7 0708 	sub.w	r7, r7, #8
 800c7b0:	ddeb      	ble.n	800c78a <__kernel_rem_pio2+0xaa>
 800c7b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7b6:	3508      	adds	r5, #8
 800c7b8:	ecab 7b02 	vstmia	fp!, {d7}
 800c7bc:	f108 0801 	add.w	r8, r8, #1
 800c7c0:	e7ca      	b.n	800c758 <__kernel_rem_pio2+0x78>
 800c7c2:	9b04      	ldr	r3, [sp, #16]
 800c7c4:	aa0c      	add	r2, sp, #48	; 0x30
 800c7c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c7ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c7d2:	9c04      	ldr	r4, [sp, #16]
 800c7d4:	930a      	str	r3, [sp, #40]	; 0x28
 800c7d6:	ab98      	add	r3, sp, #608	; 0x260
 800c7d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7dc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c7e0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c7e4:	f8cd b008 	str.w	fp, [sp, #8]
 800c7e8:	4625      	mov	r5, r4
 800c7ea:	2d00      	cmp	r5, #0
 800c7ec:	dc78      	bgt.n	800c8e0 <__kernel_rem_pio2+0x200>
 800c7ee:	ec47 6b10 	vmov	d0, r6, r7
 800c7f2:	4650      	mov	r0, sl
 800c7f4:	f000 fc9c 	bl	800d130 <scalbn>
 800c7f8:	ec57 6b10 	vmov	r6, r7, d0
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c802:	ee10 0a10 	vmov	r0, s0
 800c806:	4639      	mov	r1, r7
 800c808:	f7f3 ff1e 	bl	8000648 <__aeabi_dmul>
 800c80c:	ec41 0b10 	vmov	d0, r0, r1
 800c810:	f000 fb7a 	bl	800cf08 <floor>
 800c814:	4b7f      	ldr	r3, [pc, #508]	; (800ca14 <__kernel_rem_pio2+0x334>)
 800c816:	ec51 0b10 	vmov	r0, r1, d0
 800c81a:	2200      	movs	r2, #0
 800c81c:	f7f3 ff14 	bl	8000648 <__aeabi_dmul>
 800c820:	4602      	mov	r2, r0
 800c822:	460b      	mov	r3, r1
 800c824:	4630      	mov	r0, r6
 800c826:	4639      	mov	r1, r7
 800c828:	f7f3 fd56 	bl	80002d8 <__aeabi_dsub>
 800c82c:	460f      	mov	r7, r1
 800c82e:	4606      	mov	r6, r0
 800c830:	f7f4 f9ba 	bl	8000ba8 <__aeabi_d2iz>
 800c834:	9007      	str	r0, [sp, #28]
 800c836:	f7f3 fe9d 	bl	8000574 <__aeabi_i2d>
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	4630      	mov	r0, r6
 800c840:	4639      	mov	r1, r7
 800c842:	f7f3 fd49 	bl	80002d8 <__aeabi_dsub>
 800c846:	f1ba 0f00 	cmp.w	sl, #0
 800c84a:	4606      	mov	r6, r0
 800c84c:	460f      	mov	r7, r1
 800c84e:	dd70      	ble.n	800c932 <__kernel_rem_pio2+0x252>
 800c850:	1e62      	subs	r2, r4, #1
 800c852:	ab0c      	add	r3, sp, #48	; 0x30
 800c854:	9d07      	ldr	r5, [sp, #28]
 800c856:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c85a:	f1ca 0118 	rsb	r1, sl, #24
 800c85e:	fa40 f301 	asr.w	r3, r0, r1
 800c862:	441d      	add	r5, r3
 800c864:	408b      	lsls	r3, r1
 800c866:	1ac0      	subs	r0, r0, r3
 800c868:	ab0c      	add	r3, sp, #48	; 0x30
 800c86a:	9507      	str	r5, [sp, #28]
 800c86c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c870:	f1ca 0317 	rsb	r3, sl, #23
 800c874:	fa40 f303 	asr.w	r3, r0, r3
 800c878:	9302      	str	r3, [sp, #8]
 800c87a:	9b02      	ldr	r3, [sp, #8]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	dd66      	ble.n	800c94e <__kernel_rem_pio2+0x26e>
 800c880:	9b07      	ldr	r3, [sp, #28]
 800c882:	2200      	movs	r2, #0
 800c884:	3301      	adds	r3, #1
 800c886:	9307      	str	r3, [sp, #28]
 800c888:	4615      	mov	r5, r2
 800c88a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c88e:	4294      	cmp	r4, r2
 800c890:	f300 8099 	bgt.w	800c9c6 <__kernel_rem_pio2+0x2e6>
 800c894:	f1ba 0f00 	cmp.w	sl, #0
 800c898:	dd07      	ble.n	800c8aa <__kernel_rem_pio2+0x1ca>
 800c89a:	f1ba 0f01 	cmp.w	sl, #1
 800c89e:	f000 80a5 	beq.w	800c9ec <__kernel_rem_pio2+0x30c>
 800c8a2:	f1ba 0f02 	cmp.w	sl, #2
 800c8a6:	f000 80c1 	beq.w	800ca2c <__kernel_rem_pio2+0x34c>
 800c8aa:	9b02      	ldr	r3, [sp, #8]
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d14e      	bne.n	800c94e <__kernel_rem_pio2+0x26e>
 800c8b0:	4632      	mov	r2, r6
 800c8b2:	463b      	mov	r3, r7
 800c8b4:	4958      	ldr	r1, [pc, #352]	; (800ca18 <__kernel_rem_pio2+0x338>)
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	f7f3 fd0e 	bl	80002d8 <__aeabi_dsub>
 800c8bc:	4606      	mov	r6, r0
 800c8be:	460f      	mov	r7, r1
 800c8c0:	2d00      	cmp	r5, #0
 800c8c2:	d044      	beq.n	800c94e <__kernel_rem_pio2+0x26e>
 800c8c4:	4650      	mov	r0, sl
 800c8c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ca08 <__kernel_rem_pio2+0x328>
 800c8ca:	f000 fc31 	bl	800d130 <scalbn>
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	ec53 2b10 	vmov	r2, r3, d0
 800c8d6:	f7f3 fcff 	bl	80002d8 <__aeabi_dsub>
 800c8da:	4606      	mov	r6, r0
 800c8dc:	460f      	mov	r7, r1
 800c8de:	e036      	b.n	800c94e <__kernel_rem_pio2+0x26e>
 800c8e0:	4b4e      	ldr	r3, [pc, #312]	; (800ca1c <__kernel_rem_pio2+0x33c>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	4639      	mov	r1, r7
 800c8e8:	f7f3 feae 	bl	8000648 <__aeabi_dmul>
 800c8ec:	f7f4 f95c 	bl	8000ba8 <__aeabi_d2iz>
 800c8f0:	f7f3 fe40 	bl	8000574 <__aeabi_i2d>
 800c8f4:	4b4a      	ldr	r3, [pc, #296]	; (800ca20 <__kernel_rem_pio2+0x340>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	4680      	mov	r8, r0
 800c8fa:	4689      	mov	r9, r1
 800c8fc:	f7f3 fea4 	bl	8000648 <__aeabi_dmul>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4630      	mov	r0, r6
 800c906:	4639      	mov	r1, r7
 800c908:	f7f3 fce6 	bl	80002d8 <__aeabi_dsub>
 800c90c:	f7f4 f94c 	bl	8000ba8 <__aeabi_d2iz>
 800c910:	9b02      	ldr	r3, [sp, #8]
 800c912:	f843 0b04 	str.w	r0, [r3], #4
 800c916:	3d01      	subs	r5, #1
 800c918:	9302      	str	r3, [sp, #8]
 800c91a:	ab70      	add	r3, sp, #448	; 0x1c0
 800c91c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	4640      	mov	r0, r8
 800c926:	4649      	mov	r1, r9
 800c928:	f7f3 fcd8 	bl	80002dc <__adddf3>
 800c92c:	4606      	mov	r6, r0
 800c92e:	460f      	mov	r7, r1
 800c930:	e75b      	b.n	800c7ea <__kernel_rem_pio2+0x10a>
 800c932:	d105      	bne.n	800c940 <__kernel_rem_pio2+0x260>
 800c934:	1e63      	subs	r3, r4, #1
 800c936:	aa0c      	add	r2, sp, #48	; 0x30
 800c938:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c93c:	15c3      	asrs	r3, r0, #23
 800c93e:	e79b      	b.n	800c878 <__kernel_rem_pio2+0x198>
 800c940:	4b38      	ldr	r3, [pc, #224]	; (800ca24 <__kernel_rem_pio2+0x344>)
 800c942:	2200      	movs	r2, #0
 800c944:	f7f4 f906 	bl	8000b54 <__aeabi_dcmpge>
 800c948:	2800      	cmp	r0, #0
 800c94a:	d139      	bne.n	800c9c0 <__kernel_rem_pio2+0x2e0>
 800c94c:	9002      	str	r0, [sp, #8]
 800c94e:	2200      	movs	r2, #0
 800c950:	2300      	movs	r3, #0
 800c952:	4630      	mov	r0, r6
 800c954:	4639      	mov	r1, r7
 800c956:	f7f4 f8df 	bl	8000b18 <__aeabi_dcmpeq>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	f000 80b4 	beq.w	800cac8 <__kernel_rem_pio2+0x3e8>
 800c960:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800c964:	465b      	mov	r3, fp
 800c966:	2200      	movs	r2, #0
 800c968:	9904      	ldr	r1, [sp, #16]
 800c96a:	428b      	cmp	r3, r1
 800c96c:	da65      	bge.n	800ca3a <__kernel_rem_pio2+0x35a>
 800c96e:	2a00      	cmp	r2, #0
 800c970:	d07b      	beq.n	800ca6a <__kernel_rem_pio2+0x38a>
 800c972:	ab0c      	add	r3, sp, #48	; 0x30
 800c974:	f1aa 0a18 	sub.w	sl, sl, #24
 800c978:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 80a0 	beq.w	800cac2 <__kernel_rem_pio2+0x3e2>
 800c982:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800ca08 <__kernel_rem_pio2+0x328>
 800c986:	4650      	mov	r0, sl
 800c988:	f000 fbd2 	bl	800d130 <scalbn>
 800c98c:	4f23      	ldr	r7, [pc, #140]	; (800ca1c <__kernel_rem_pio2+0x33c>)
 800c98e:	ec55 4b10 	vmov	r4, r5, d0
 800c992:	46d8      	mov	r8, fp
 800c994:	2600      	movs	r6, #0
 800c996:	f1b8 0f00 	cmp.w	r8, #0
 800c99a:	f280 80cf 	bge.w	800cb3c <__kernel_rem_pio2+0x45c>
 800c99e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800ca00 <__kernel_rem_pio2+0x320>
 800c9a2:	465f      	mov	r7, fp
 800c9a4:	f04f 0800 	mov.w	r8, #0
 800c9a8:	2f00      	cmp	r7, #0
 800c9aa:	f2c0 80fd 	blt.w	800cba8 <__kernel_rem_pio2+0x4c8>
 800c9ae:	ab70      	add	r3, sp, #448	; 0x1c0
 800c9b0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800ca28 <__kernel_rem_pio2+0x348>
 800c9b4:	ec55 4b18 	vmov	r4, r5, d8
 800c9b8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c9bc:	2600      	movs	r6, #0
 800c9be:	e0e5      	b.n	800cb8c <__kernel_rem_pio2+0x4ac>
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	9302      	str	r3, [sp, #8]
 800c9c4:	e75c      	b.n	800c880 <__kernel_rem_pio2+0x1a0>
 800c9c6:	f8db 3000 	ldr.w	r3, [fp]
 800c9ca:	b955      	cbnz	r5, 800c9e2 <__kernel_rem_pio2+0x302>
 800c9cc:	b123      	cbz	r3, 800c9d8 <__kernel_rem_pio2+0x2f8>
 800c9ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c9d2:	f8cb 3000 	str.w	r3, [fp]
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	3201      	adds	r2, #1
 800c9da:	f10b 0b04 	add.w	fp, fp, #4
 800c9de:	461d      	mov	r5, r3
 800c9e0:	e755      	b.n	800c88e <__kernel_rem_pio2+0x1ae>
 800c9e2:	1acb      	subs	r3, r1, r3
 800c9e4:	f8cb 3000 	str.w	r3, [fp]
 800c9e8:	462b      	mov	r3, r5
 800c9ea:	e7f5      	b.n	800c9d8 <__kernel_rem_pio2+0x2f8>
 800c9ec:	1e62      	subs	r2, r4, #1
 800c9ee:	ab0c      	add	r3, sp, #48	; 0x30
 800c9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c9f8:	a90c      	add	r1, sp, #48	; 0x30
 800c9fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c9fe:	e754      	b.n	800c8aa <__kernel_rem_pio2+0x1ca>
	...
 800ca0c:	3ff00000 	.word	0x3ff00000
 800ca10:	0800e438 	.word	0x0800e438
 800ca14:	40200000 	.word	0x40200000
 800ca18:	3ff00000 	.word	0x3ff00000
 800ca1c:	3e700000 	.word	0x3e700000
 800ca20:	41700000 	.word	0x41700000
 800ca24:	3fe00000 	.word	0x3fe00000
 800ca28:	0800e3f8 	.word	0x0800e3f8
 800ca2c:	1e62      	subs	r2, r4, #1
 800ca2e:	ab0c      	add	r3, sp, #48	; 0x30
 800ca30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca34:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ca38:	e7de      	b.n	800c9f8 <__kernel_rem_pio2+0x318>
 800ca3a:	a90c      	add	r1, sp, #48	; 0x30
 800ca3c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	430a      	orrs	r2, r1
 800ca44:	e790      	b.n	800c968 <__kernel_rem_pio2+0x288>
 800ca46:	3301      	adds	r3, #1
 800ca48:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ca4c:	2900      	cmp	r1, #0
 800ca4e:	d0fa      	beq.n	800ca46 <__kernel_rem_pio2+0x366>
 800ca50:	9a08      	ldr	r2, [sp, #32]
 800ca52:	18e3      	adds	r3, r4, r3
 800ca54:	18a6      	adds	r6, r4, r2
 800ca56:	aa20      	add	r2, sp, #128	; 0x80
 800ca58:	1c65      	adds	r5, r4, #1
 800ca5a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ca5e:	9302      	str	r3, [sp, #8]
 800ca60:	9b02      	ldr	r3, [sp, #8]
 800ca62:	42ab      	cmp	r3, r5
 800ca64:	da04      	bge.n	800ca70 <__kernel_rem_pio2+0x390>
 800ca66:	461c      	mov	r4, r3
 800ca68:	e6b5      	b.n	800c7d6 <__kernel_rem_pio2+0xf6>
 800ca6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e7eb      	b.n	800ca48 <__kernel_rem_pio2+0x368>
 800ca70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca76:	f7f3 fd7d 	bl	8000574 <__aeabi_i2d>
 800ca7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ca7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca80:	46b3      	mov	fp, r6
 800ca82:	461c      	mov	r4, r3
 800ca84:	2700      	movs	r7, #0
 800ca86:	f04f 0800 	mov.w	r8, #0
 800ca8a:	f04f 0900 	mov.w	r9, #0
 800ca8e:	9b06      	ldr	r3, [sp, #24]
 800ca90:	429f      	cmp	r7, r3
 800ca92:	dd06      	ble.n	800caa2 <__kernel_rem_pio2+0x3c2>
 800ca94:	ab70      	add	r3, sp, #448	; 0x1c0
 800ca96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ca9a:	e9c3 8900 	strd	r8, r9, [r3]
 800ca9e:	3501      	adds	r5, #1
 800caa0:	e7de      	b.n	800ca60 <__kernel_rem_pio2+0x380>
 800caa2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800caa6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800caaa:	f7f3 fdcd 	bl	8000648 <__aeabi_dmul>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	4640      	mov	r0, r8
 800cab4:	4649      	mov	r1, r9
 800cab6:	f7f3 fc11 	bl	80002dc <__adddf3>
 800caba:	3701      	adds	r7, #1
 800cabc:	4680      	mov	r8, r0
 800cabe:	4689      	mov	r9, r1
 800cac0:	e7e5      	b.n	800ca8e <__kernel_rem_pio2+0x3ae>
 800cac2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cac6:	e754      	b.n	800c972 <__kernel_rem_pio2+0x292>
 800cac8:	ec47 6b10 	vmov	d0, r6, r7
 800cacc:	f1ca 0000 	rsb	r0, sl, #0
 800cad0:	f000 fb2e 	bl	800d130 <scalbn>
 800cad4:	ec57 6b10 	vmov	r6, r7, d0
 800cad8:	4b9f      	ldr	r3, [pc, #636]	; (800cd58 <__kernel_rem_pio2+0x678>)
 800cada:	ee10 0a10 	vmov	r0, s0
 800cade:	2200      	movs	r2, #0
 800cae0:	4639      	mov	r1, r7
 800cae2:	f7f4 f837 	bl	8000b54 <__aeabi_dcmpge>
 800cae6:	b300      	cbz	r0, 800cb2a <__kernel_rem_pio2+0x44a>
 800cae8:	4b9c      	ldr	r3, [pc, #624]	; (800cd5c <__kernel_rem_pio2+0x67c>)
 800caea:	2200      	movs	r2, #0
 800caec:	4630      	mov	r0, r6
 800caee:	4639      	mov	r1, r7
 800caf0:	f7f3 fdaa 	bl	8000648 <__aeabi_dmul>
 800caf4:	f7f4 f858 	bl	8000ba8 <__aeabi_d2iz>
 800caf8:	4605      	mov	r5, r0
 800cafa:	f7f3 fd3b 	bl	8000574 <__aeabi_i2d>
 800cafe:	4b96      	ldr	r3, [pc, #600]	; (800cd58 <__kernel_rem_pio2+0x678>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	f7f3 fda1 	bl	8000648 <__aeabi_dmul>
 800cb06:	460b      	mov	r3, r1
 800cb08:	4602      	mov	r2, r0
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f7f3 fbe3 	bl	80002d8 <__aeabi_dsub>
 800cb12:	f7f4 f849 	bl	8000ba8 <__aeabi_d2iz>
 800cb16:	f104 0b01 	add.w	fp, r4, #1
 800cb1a:	ab0c      	add	r3, sp, #48	; 0x30
 800cb1c:	f10a 0a18 	add.w	sl, sl, #24
 800cb20:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cb24:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800cb28:	e72b      	b.n	800c982 <__kernel_rem_pio2+0x2a2>
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	4639      	mov	r1, r7
 800cb2e:	f7f4 f83b 	bl	8000ba8 <__aeabi_d2iz>
 800cb32:	ab0c      	add	r3, sp, #48	; 0x30
 800cb34:	46a3      	mov	fp, r4
 800cb36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cb3a:	e722      	b.n	800c982 <__kernel_rem_pio2+0x2a2>
 800cb3c:	ab70      	add	r3, sp, #448	; 0x1c0
 800cb3e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800cb42:	ab0c      	add	r3, sp, #48	; 0x30
 800cb44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cb48:	f7f3 fd14 	bl	8000574 <__aeabi_i2d>
 800cb4c:	4622      	mov	r2, r4
 800cb4e:	462b      	mov	r3, r5
 800cb50:	f7f3 fd7a 	bl	8000648 <__aeabi_dmul>
 800cb54:	4632      	mov	r2, r6
 800cb56:	e9c9 0100 	strd	r0, r1, [r9]
 800cb5a:	463b      	mov	r3, r7
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	4629      	mov	r1, r5
 800cb60:	f7f3 fd72 	bl	8000648 <__aeabi_dmul>
 800cb64:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cb68:	4604      	mov	r4, r0
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	e713      	b.n	800c996 <__kernel_rem_pio2+0x2b6>
 800cb6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cb72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800cb76:	f7f3 fd67 	bl	8000648 <__aeabi_dmul>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	4620      	mov	r0, r4
 800cb80:	4629      	mov	r1, r5
 800cb82:	f7f3 fbab 	bl	80002dc <__adddf3>
 800cb86:	3601      	adds	r6, #1
 800cb88:	4604      	mov	r4, r0
 800cb8a:	460d      	mov	r5, r1
 800cb8c:	9b04      	ldr	r3, [sp, #16]
 800cb8e:	429e      	cmp	r6, r3
 800cb90:	dc01      	bgt.n	800cb96 <__kernel_rem_pio2+0x4b6>
 800cb92:	45b0      	cmp	r8, r6
 800cb94:	daeb      	bge.n	800cb6e <__kernel_rem_pio2+0x48e>
 800cb96:	ab48      	add	r3, sp, #288	; 0x120
 800cb98:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cb9c:	e9c3 4500 	strd	r4, r5, [r3]
 800cba0:	3f01      	subs	r7, #1
 800cba2:	f108 0801 	add.w	r8, r8, #1
 800cba6:	e6ff      	b.n	800c9a8 <__kernel_rem_pio2+0x2c8>
 800cba8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	dc0b      	bgt.n	800cbc6 <__kernel_rem_pio2+0x4e6>
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	dc6e      	bgt.n	800cc90 <__kernel_rem_pio2+0x5b0>
 800cbb2:	d045      	beq.n	800cc40 <__kernel_rem_pio2+0x560>
 800cbb4:	9b07      	ldr	r3, [sp, #28]
 800cbb6:	f003 0007 	and.w	r0, r3, #7
 800cbba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cbbe:	ecbd 8b02 	vpop	{d8}
 800cbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cbc8:	2b03      	cmp	r3, #3
 800cbca:	d1f3      	bne.n	800cbb4 <__kernel_rem_pio2+0x4d4>
 800cbcc:	ab48      	add	r3, sp, #288	; 0x120
 800cbce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800cbd2:	46d0      	mov	r8, sl
 800cbd4:	46d9      	mov	r9, fp
 800cbd6:	f1b9 0f00 	cmp.w	r9, #0
 800cbda:	f1a8 0808 	sub.w	r8, r8, #8
 800cbde:	dc64      	bgt.n	800ccaa <__kernel_rem_pio2+0x5ca>
 800cbe0:	465c      	mov	r4, fp
 800cbe2:	2c01      	cmp	r4, #1
 800cbe4:	f1aa 0a08 	sub.w	sl, sl, #8
 800cbe8:	dc7e      	bgt.n	800cce8 <__kernel_rem_pio2+0x608>
 800cbea:	2000      	movs	r0, #0
 800cbec:	2100      	movs	r1, #0
 800cbee:	f1bb 0f01 	cmp.w	fp, #1
 800cbf2:	f300 8097 	bgt.w	800cd24 <__kernel_rem_pio2+0x644>
 800cbf6:	9b02      	ldr	r3, [sp, #8]
 800cbf8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800cbfc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f040 8099 	bne.w	800cd38 <__kernel_rem_pio2+0x658>
 800cc06:	9b01      	ldr	r3, [sp, #4]
 800cc08:	e9c3 5600 	strd	r5, r6, [r3]
 800cc0c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800cc10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cc14:	e7ce      	b.n	800cbb4 <__kernel_rem_pio2+0x4d4>
 800cc16:	ab48      	add	r3, sp, #288	; 0x120
 800cc18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc20:	f7f3 fb5c 	bl	80002dc <__adddf3>
 800cc24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cc28:	f1bb 0f00 	cmp.w	fp, #0
 800cc2c:	daf3      	bge.n	800cc16 <__kernel_rem_pio2+0x536>
 800cc2e:	9b02      	ldr	r3, [sp, #8]
 800cc30:	b113      	cbz	r3, 800cc38 <__kernel_rem_pio2+0x558>
 800cc32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc36:	4619      	mov	r1, r3
 800cc38:	9b01      	ldr	r3, [sp, #4]
 800cc3a:	e9c3 0100 	strd	r0, r1, [r3]
 800cc3e:	e7b9      	b.n	800cbb4 <__kernel_rem_pio2+0x4d4>
 800cc40:	2000      	movs	r0, #0
 800cc42:	2100      	movs	r1, #0
 800cc44:	e7f0      	b.n	800cc28 <__kernel_rem_pio2+0x548>
 800cc46:	ab48      	add	r3, sp, #288	; 0x120
 800cc48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	f7f3 fb44 	bl	80002dc <__adddf3>
 800cc54:	3c01      	subs	r4, #1
 800cc56:	2c00      	cmp	r4, #0
 800cc58:	daf5      	bge.n	800cc46 <__kernel_rem_pio2+0x566>
 800cc5a:	9b02      	ldr	r3, [sp, #8]
 800cc5c:	b1e3      	cbz	r3, 800cc98 <__kernel_rem_pio2+0x5b8>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc64:	9c01      	ldr	r4, [sp, #4]
 800cc66:	e9c4 2300 	strd	r2, r3, [r4]
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800cc72:	f7f3 fb31 	bl	80002d8 <__aeabi_dsub>
 800cc76:	ad4a      	add	r5, sp, #296	; 0x128
 800cc78:	2401      	movs	r4, #1
 800cc7a:	45a3      	cmp	fp, r4
 800cc7c:	da0f      	bge.n	800cc9e <__kernel_rem_pio2+0x5be>
 800cc7e:	9b02      	ldr	r3, [sp, #8]
 800cc80:	b113      	cbz	r3, 800cc88 <__kernel_rem_pio2+0x5a8>
 800cc82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc86:	4619      	mov	r1, r3
 800cc88:	9b01      	ldr	r3, [sp, #4]
 800cc8a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cc8e:	e791      	b.n	800cbb4 <__kernel_rem_pio2+0x4d4>
 800cc90:	465c      	mov	r4, fp
 800cc92:	2000      	movs	r0, #0
 800cc94:	2100      	movs	r1, #0
 800cc96:	e7de      	b.n	800cc56 <__kernel_rem_pio2+0x576>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	e7e2      	b.n	800cc64 <__kernel_rem_pio2+0x584>
 800cc9e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800cca2:	f7f3 fb1b 	bl	80002dc <__adddf3>
 800cca6:	3401      	adds	r4, #1
 800cca8:	e7e7      	b.n	800cc7a <__kernel_rem_pio2+0x59a>
 800ccaa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800ccae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	4632      	mov	r2, r6
 800ccb6:	463b      	mov	r3, r7
 800ccb8:	4629      	mov	r1, r5
 800ccba:	f7f3 fb0f 	bl	80002dc <__adddf3>
 800ccbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	4629      	mov	r1, r5
 800ccca:	f7f3 fb05 	bl	80002d8 <__aeabi_dsub>
 800ccce:	4632      	mov	r2, r6
 800ccd0:	463b      	mov	r3, r7
 800ccd2:	f7f3 fb03 	bl	80002dc <__adddf3>
 800ccd6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ccda:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800ccde:	ed88 7b00 	vstr	d7, [r8]
 800cce2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cce6:	e776      	b.n	800cbd6 <__kernel_rem_pio2+0x4f6>
 800cce8:	e9da 8900 	ldrd	r8, r9, [sl]
 800ccec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ccf0:	4640      	mov	r0, r8
 800ccf2:	4632      	mov	r2, r6
 800ccf4:	463b      	mov	r3, r7
 800ccf6:	4649      	mov	r1, r9
 800ccf8:	f7f3 faf0 	bl	80002dc <__adddf3>
 800ccfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4640      	mov	r0, r8
 800cd06:	4649      	mov	r1, r9
 800cd08:	f7f3 fae6 	bl	80002d8 <__aeabi_dsub>
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	463b      	mov	r3, r7
 800cd10:	f7f3 fae4 	bl	80002dc <__adddf3>
 800cd14:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cd18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd1c:	ed8a 7b00 	vstr	d7, [sl]
 800cd20:	3c01      	subs	r4, #1
 800cd22:	e75e      	b.n	800cbe2 <__kernel_rem_pio2+0x502>
 800cd24:	ab48      	add	r3, sp, #288	; 0x120
 800cd26:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2e:	f7f3 fad5 	bl	80002dc <__adddf3>
 800cd32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cd36:	e75a      	b.n	800cbee <__kernel_rem_pio2+0x50e>
 800cd38:	9b01      	ldr	r3, [sp, #4]
 800cd3a:	9a01      	ldr	r2, [sp, #4]
 800cd3c:	601d      	str	r5, [r3, #0]
 800cd3e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800cd42:	605c      	str	r4, [r3, #4]
 800cd44:	609f      	str	r7, [r3, #8]
 800cd46:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800cd4a:	60d3      	str	r3, [r2, #12]
 800cd4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd50:	6110      	str	r0, [r2, #16]
 800cd52:	6153      	str	r3, [r2, #20]
 800cd54:	e72e      	b.n	800cbb4 <__kernel_rem_pio2+0x4d4>
 800cd56:	bf00      	nop
 800cd58:	41700000 	.word	0x41700000
 800cd5c:	3e700000 	.word	0x3e700000

0800cd60 <__kernel_sin>:
 800cd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd64:	ed2d 8b04 	vpush	{d8-d9}
 800cd68:	eeb0 8a41 	vmov.f32	s16, s2
 800cd6c:	eef0 8a61 	vmov.f32	s17, s3
 800cd70:	ec55 4b10 	vmov	r4, r5, d0
 800cd74:	b083      	sub	sp, #12
 800cd76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cd7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cd7e:	9001      	str	r0, [sp, #4]
 800cd80:	da06      	bge.n	800cd90 <__kernel_sin+0x30>
 800cd82:	ee10 0a10 	vmov	r0, s0
 800cd86:	4629      	mov	r1, r5
 800cd88:	f7f3 ff0e 	bl	8000ba8 <__aeabi_d2iz>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d051      	beq.n	800ce34 <__kernel_sin+0xd4>
 800cd90:	4622      	mov	r2, r4
 800cd92:	462b      	mov	r3, r5
 800cd94:	4620      	mov	r0, r4
 800cd96:	4629      	mov	r1, r5
 800cd98:	f7f3 fc56 	bl	8000648 <__aeabi_dmul>
 800cd9c:	4682      	mov	sl, r0
 800cd9e:	468b      	mov	fp, r1
 800cda0:	4602      	mov	r2, r0
 800cda2:	460b      	mov	r3, r1
 800cda4:	4620      	mov	r0, r4
 800cda6:	4629      	mov	r1, r5
 800cda8:	f7f3 fc4e 	bl	8000648 <__aeabi_dmul>
 800cdac:	a341      	add	r3, pc, #260	; (adr r3, 800ceb4 <__kernel_sin+0x154>)
 800cdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb2:	4680      	mov	r8, r0
 800cdb4:	4689      	mov	r9, r1
 800cdb6:	4650      	mov	r0, sl
 800cdb8:	4659      	mov	r1, fp
 800cdba:	f7f3 fc45 	bl	8000648 <__aeabi_dmul>
 800cdbe:	a33f      	add	r3, pc, #252	; (adr r3, 800cebc <__kernel_sin+0x15c>)
 800cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc4:	f7f3 fa88 	bl	80002d8 <__aeabi_dsub>
 800cdc8:	4652      	mov	r2, sl
 800cdca:	465b      	mov	r3, fp
 800cdcc:	f7f3 fc3c 	bl	8000648 <__aeabi_dmul>
 800cdd0:	a33c      	add	r3, pc, #240	; (adr r3, 800cec4 <__kernel_sin+0x164>)
 800cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd6:	f7f3 fa81 	bl	80002dc <__adddf3>
 800cdda:	4652      	mov	r2, sl
 800cddc:	465b      	mov	r3, fp
 800cdde:	f7f3 fc33 	bl	8000648 <__aeabi_dmul>
 800cde2:	a33a      	add	r3, pc, #232	; (adr r3, 800cecc <__kernel_sin+0x16c>)
 800cde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde8:	f7f3 fa76 	bl	80002d8 <__aeabi_dsub>
 800cdec:	4652      	mov	r2, sl
 800cdee:	465b      	mov	r3, fp
 800cdf0:	f7f3 fc2a 	bl	8000648 <__aeabi_dmul>
 800cdf4:	a337      	add	r3, pc, #220	; (adr r3, 800ced4 <__kernel_sin+0x174>)
 800cdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfa:	f7f3 fa6f 	bl	80002dc <__adddf3>
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	4606      	mov	r6, r0
 800ce02:	460f      	mov	r7, r1
 800ce04:	b9eb      	cbnz	r3, 800ce42 <__kernel_sin+0xe2>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4650      	mov	r0, sl
 800ce0c:	4659      	mov	r1, fp
 800ce0e:	f7f3 fc1b 	bl	8000648 <__aeabi_dmul>
 800ce12:	a325      	add	r3, pc, #148	; (adr r3, 800cea8 <__kernel_sin+0x148>)
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	f7f3 fa5e 	bl	80002d8 <__aeabi_dsub>
 800ce1c:	4642      	mov	r2, r8
 800ce1e:	464b      	mov	r3, r9
 800ce20:	f7f3 fc12 	bl	8000648 <__aeabi_dmul>
 800ce24:	4602      	mov	r2, r0
 800ce26:	460b      	mov	r3, r1
 800ce28:	4620      	mov	r0, r4
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	f7f3 fa56 	bl	80002dc <__adddf3>
 800ce30:	4604      	mov	r4, r0
 800ce32:	460d      	mov	r5, r1
 800ce34:	ec45 4b10 	vmov	d0, r4, r5
 800ce38:	b003      	add	sp, #12
 800ce3a:	ecbd 8b04 	vpop	{d8-d9}
 800ce3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce42:	4b1b      	ldr	r3, [pc, #108]	; (800ceb0 <__kernel_sin+0x150>)
 800ce44:	ec51 0b18 	vmov	r0, r1, d8
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f7f3 fbfd 	bl	8000648 <__aeabi_dmul>
 800ce4e:	4632      	mov	r2, r6
 800ce50:	ec41 0b19 	vmov	d9, r0, r1
 800ce54:	463b      	mov	r3, r7
 800ce56:	4640      	mov	r0, r8
 800ce58:	4649      	mov	r1, r9
 800ce5a:	f7f3 fbf5 	bl	8000648 <__aeabi_dmul>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	ec51 0b19 	vmov	r0, r1, d9
 800ce66:	f7f3 fa37 	bl	80002d8 <__aeabi_dsub>
 800ce6a:	4652      	mov	r2, sl
 800ce6c:	465b      	mov	r3, fp
 800ce6e:	f7f3 fbeb 	bl	8000648 <__aeabi_dmul>
 800ce72:	ec53 2b18 	vmov	r2, r3, d8
 800ce76:	f7f3 fa2f 	bl	80002d8 <__aeabi_dsub>
 800ce7a:	a30b      	add	r3, pc, #44	; (adr r3, 800cea8 <__kernel_sin+0x148>)
 800ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce80:	4606      	mov	r6, r0
 800ce82:	460f      	mov	r7, r1
 800ce84:	4640      	mov	r0, r8
 800ce86:	4649      	mov	r1, r9
 800ce88:	f7f3 fbde 	bl	8000648 <__aeabi_dmul>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	4630      	mov	r0, r6
 800ce92:	4639      	mov	r1, r7
 800ce94:	f7f3 fa22 	bl	80002dc <__adddf3>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	4629      	mov	r1, r5
 800cea0:	f7f3 fa1a 	bl	80002d8 <__aeabi_dsub>
 800cea4:	e7c4      	b.n	800ce30 <__kernel_sin+0xd0>
 800cea6:	bf00      	nop
 800cea8:	55555549 	.word	0x55555549
 800ceac:	3fc55555 	.word	0x3fc55555
 800ceb0:	3fe00000 	.word	0x3fe00000
 800ceb4:	5acfd57c 	.word	0x5acfd57c
 800ceb8:	3de5d93a 	.word	0x3de5d93a
 800cebc:	8a2b9ceb 	.word	0x8a2b9ceb
 800cec0:	3e5ae5e6 	.word	0x3e5ae5e6
 800cec4:	57b1fe7d 	.word	0x57b1fe7d
 800cec8:	3ec71de3 	.word	0x3ec71de3
 800cecc:	19c161d5 	.word	0x19c161d5
 800ced0:	3f2a01a0 	.word	0x3f2a01a0
 800ced4:	1110f8a6 	.word	0x1110f8a6
 800ced8:	3f811111 	.word	0x3f811111

0800cedc <fabs>:
 800cedc:	ec51 0b10 	vmov	r0, r1, d0
 800cee0:	ee10 2a10 	vmov	r2, s0
 800cee4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cee8:	ec43 2b10 	vmov	d0, r2, r3
 800ceec:	4770      	bx	lr

0800ceee <finite>:
 800ceee:	b082      	sub	sp, #8
 800cef0:	ed8d 0b00 	vstr	d0, [sp]
 800cef4:	9801      	ldr	r0, [sp, #4]
 800cef6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cefa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cefe:	0fc0      	lsrs	r0, r0, #31
 800cf00:	b002      	add	sp, #8
 800cf02:	4770      	bx	lr
 800cf04:	0000      	movs	r0, r0
	...

0800cf08 <floor>:
 800cf08:	ec51 0b10 	vmov	r0, r1, d0
 800cf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cf14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cf18:	2e13      	cmp	r6, #19
 800cf1a:	ee10 5a10 	vmov	r5, s0
 800cf1e:	ee10 8a10 	vmov	r8, s0
 800cf22:	460c      	mov	r4, r1
 800cf24:	dc32      	bgt.n	800cf8c <floor+0x84>
 800cf26:	2e00      	cmp	r6, #0
 800cf28:	da14      	bge.n	800cf54 <floor+0x4c>
 800cf2a:	a333      	add	r3, pc, #204	; (adr r3, 800cff8 <floor+0xf0>)
 800cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf30:	f7f3 f9d4 	bl	80002dc <__adddf3>
 800cf34:	2200      	movs	r2, #0
 800cf36:	2300      	movs	r3, #0
 800cf38:	f7f3 fe16 	bl	8000b68 <__aeabi_dcmpgt>
 800cf3c:	b138      	cbz	r0, 800cf4e <floor+0x46>
 800cf3e:	2c00      	cmp	r4, #0
 800cf40:	da57      	bge.n	800cff2 <floor+0xea>
 800cf42:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cf46:	431d      	orrs	r5, r3
 800cf48:	d001      	beq.n	800cf4e <floor+0x46>
 800cf4a:	4c2d      	ldr	r4, [pc, #180]	; (800d000 <floor+0xf8>)
 800cf4c:	2500      	movs	r5, #0
 800cf4e:	4621      	mov	r1, r4
 800cf50:	4628      	mov	r0, r5
 800cf52:	e025      	b.n	800cfa0 <floor+0x98>
 800cf54:	4f2b      	ldr	r7, [pc, #172]	; (800d004 <floor+0xfc>)
 800cf56:	4137      	asrs	r7, r6
 800cf58:	ea01 0307 	and.w	r3, r1, r7
 800cf5c:	4303      	orrs	r3, r0
 800cf5e:	d01f      	beq.n	800cfa0 <floor+0x98>
 800cf60:	a325      	add	r3, pc, #148	; (adr r3, 800cff8 <floor+0xf0>)
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	f7f3 f9b9 	bl	80002dc <__adddf3>
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f7f3 fdfb 	bl	8000b68 <__aeabi_dcmpgt>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d0eb      	beq.n	800cf4e <floor+0x46>
 800cf76:	2c00      	cmp	r4, #0
 800cf78:	bfbe      	ittt	lt
 800cf7a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cf7e:	fa43 f606 	asrlt.w	r6, r3, r6
 800cf82:	19a4      	addlt	r4, r4, r6
 800cf84:	ea24 0407 	bic.w	r4, r4, r7
 800cf88:	2500      	movs	r5, #0
 800cf8a:	e7e0      	b.n	800cf4e <floor+0x46>
 800cf8c:	2e33      	cmp	r6, #51	; 0x33
 800cf8e:	dd0b      	ble.n	800cfa8 <floor+0xa0>
 800cf90:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cf94:	d104      	bne.n	800cfa0 <floor+0x98>
 800cf96:	ee10 2a10 	vmov	r2, s0
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	f7f3 f99e 	bl	80002dc <__adddf3>
 800cfa0:	ec41 0b10 	vmov	d0, r0, r1
 800cfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cfac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfb0:	fa23 f707 	lsr.w	r7, r3, r7
 800cfb4:	4207      	tst	r7, r0
 800cfb6:	d0f3      	beq.n	800cfa0 <floor+0x98>
 800cfb8:	a30f      	add	r3, pc, #60	; (adr r3, 800cff8 <floor+0xf0>)
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	f7f3 f98d 	bl	80002dc <__adddf3>
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	f7f3 fdcf 	bl	8000b68 <__aeabi_dcmpgt>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d0bf      	beq.n	800cf4e <floor+0x46>
 800cfce:	2c00      	cmp	r4, #0
 800cfd0:	da02      	bge.n	800cfd8 <floor+0xd0>
 800cfd2:	2e14      	cmp	r6, #20
 800cfd4:	d103      	bne.n	800cfde <floor+0xd6>
 800cfd6:	3401      	adds	r4, #1
 800cfd8:	ea25 0507 	bic.w	r5, r5, r7
 800cfdc:	e7b7      	b.n	800cf4e <floor+0x46>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cfe4:	fa03 f606 	lsl.w	r6, r3, r6
 800cfe8:	4435      	add	r5, r6
 800cfea:	4545      	cmp	r5, r8
 800cfec:	bf38      	it	cc
 800cfee:	18e4      	addcc	r4, r4, r3
 800cff0:	e7f2      	b.n	800cfd8 <floor+0xd0>
 800cff2:	2500      	movs	r5, #0
 800cff4:	462c      	mov	r4, r5
 800cff6:	e7aa      	b.n	800cf4e <floor+0x46>
 800cff8:	8800759c 	.word	0x8800759c
 800cffc:	7e37e43c 	.word	0x7e37e43c
 800d000:	bff00000 	.word	0xbff00000
 800d004:	000fffff 	.word	0x000fffff

0800d008 <nan>:
 800d008:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d010 <nan+0x8>
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	00000000 	.word	0x00000000
 800d014:	7ff80000 	.word	0x7ff80000

0800d018 <rint>:
 800d018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d01a:	ec51 0b10 	vmov	r0, r1, d0
 800d01e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d022:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d026:	2e13      	cmp	r6, #19
 800d028:	ee10 4a10 	vmov	r4, s0
 800d02c:	460b      	mov	r3, r1
 800d02e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d032:	dc58      	bgt.n	800d0e6 <rint+0xce>
 800d034:	2e00      	cmp	r6, #0
 800d036:	da2b      	bge.n	800d090 <rint+0x78>
 800d038:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d03c:	4302      	orrs	r2, r0
 800d03e:	d023      	beq.n	800d088 <rint+0x70>
 800d040:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d044:	4302      	orrs	r2, r0
 800d046:	4254      	negs	r4, r2
 800d048:	4314      	orrs	r4, r2
 800d04a:	0c4b      	lsrs	r3, r1, #17
 800d04c:	0b24      	lsrs	r4, r4, #12
 800d04e:	045b      	lsls	r3, r3, #17
 800d050:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d054:	ea44 0103 	orr.w	r1, r4, r3
 800d058:	4b32      	ldr	r3, [pc, #200]	; (800d124 <rint+0x10c>)
 800d05a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d05e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	4630      	mov	r0, r6
 800d068:	4639      	mov	r1, r7
 800d06a:	f7f3 f937 	bl	80002dc <__adddf3>
 800d06e:	e9cd 0100 	strd	r0, r1, [sp]
 800d072:	463b      	mov	r3, r7
 800d074:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d078:	4632      	mov	r2, r6
 800d07a:	f7f3 f92d 	bl	80002d8 <__aeabi_dsub>
 800d07e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d082:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d086:	4639      	mov	r1, r7
 800d088:	ec41 0b10 	vmov	d0, r0, r1
 800d08c:	b003      	add	sp, #12
 800d08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d090:	4a25      	ldr	r2, [pc, #148]	; (800d128 <rint+0x110>)
 800d092:	4132      	asrs	r2, r6
 800d094:	ea01 0702 	and.w	r7, r1, r2
 800d098:	4307      	orrs	r7, r0
 800d09a:	d0f5      	beq.n	800d088 <rint+0x70>
 800d09c:	0851      	lsrs	r1, r2, #1
 800d09e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800d0a2:	4314      	orrs	r4, r2
 800d0a4:	d00c      	beq.n	800d0c0 <rint+0xa8>
 800d0a6:	ea23 0201 	bic.w	r2, r3, r1
 800d0aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d0ae:	2e13      	cmp	r6, #19
 800d0b0:	fa43 f606 	asr.w	r6, r3, r6
 800d0b4:	bf0c      	ite	eq
 800d0b6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d0ba:	2400      	movne	r4, #0
 800d0bc:	ea42 0306 	orr.w	r3, r2, r6
 800d0c0:	4918      	ldr	r1, [pc, #96]	; (800d124 <rint+0x10c>)
 800d0c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d0c6:	4622      	mov	r2, r4
 800d0c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	f7f3 f904 	bl	80002dc <__adddf3>
 800d0d4:	e9cd 0100 	strd	r0, r1, [sp]
 800d0d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0dc:	4622      	mov	r2, r4
 800d0de:	462b      	mov	r3, r5
 800d0e0:	f7f3 f8fa 	bl	80002d8 <__aeabi_dsub>
 800d0e4:	e7d0      	b.n	800d088 <rint+0x70>
 800d0e6:	2e33      	cmp	r6, #51	; 0x33
 800d0e8:	dd07      	ble.n	800d0fa <rint+0xe2>
 800d0ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d0ee:	d1cb      	bne.n	800d088 <rint+0x70>
 800d0f0:	ee10 2a10 	vmov	r2, s0
 800d0f4:	f7f3 f8f2 	bl	80002dc <__adddf3>
 800d0f8:	e7c6      	b.n	800d088 <rint+0x70>
 800d0fa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d0fe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d102:	40d6      	lsrs	r6, r2
 800d104:	4230      	tst	r0, r6
 800d106:	d0bf      	beq.n	800d088 <rint+0x70>
 800d108:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800d10c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800d110:	bf1f      	itttt	ne
 800d112:	ea24 0101 	bicne.w	r1, r4, r1
 800d116:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d11a:	fa44 f202 	asrne.w	r2, r4, r2
 800d11e:	ea41 0402 	orrne.w	r4, r1, r2
 800d122:	e7cd      	b.n	800d0c0 <rint+0xa8>
 800d124:	0800e448 	.word	0x0800e448
 800d128:	000fffff 	.word	0x000fffff
 800d12c:	00000000 	.word	0x00000000

0800d130 <scalbn>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	ec55 4b10 	vmov	r4, r5, d0
 800d136:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d13a:	4606      	mov	r6, r0
 800d13c:	462b      	mov	r3, r5
 800d13e:	b99a      	cbnz	r2, 800d168 <scalbn+0x38>
 800d140:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d144:	4323      	orrs	r3, r4
 800d146:	d036      	beq.n	800d1b6 <scalbn+0x86>
 800d148:	4b39      	ldr	r3, [pc, #228]	; (800d230 <scalbn+0x100>)
 800d14a:	4629      	mov	r1, r5
 800d14c:	ee10 0a10 	vmov	r0, s0
 800d150:	2200      	movs	r2, #0
 800d152:	f7f3 fa79 	bl	8000648 <__aeabi_dmul>
 800d156:	4b37      	ldr	r3, [pc, #220]	; (800d234 <scalbn+0x104>)
 800d158:	429e      	cmp	r6, r3
 800d15a:	4604      	mov	r4, r0
 800d15c:	460d      	mov	r5, r1
 800d15e:	da10      	bge.n	800d182 <scalbn+0x52>
 800d160:	a32b      	add	r3, pc, #172	; (adr r3, 800d210 <scalbn+0xe0>)
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	e03a      	b.n	800d1de <scalbn+0xae>
 800d168:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d16c:	428a      	cmp	r2, r1
 800d16e:	d10c      	bne.n	800d18a <scalbn+0x5a>
 800d170:	ee10 2a10 	vmov	r2, s0
 800d174:	4620      	mov	r0, r4
 800d176:	4629      	mov	r1, r5
 800d178:	f7f3 f8b0 	bl	80002dc <__adddf3>
 800d17c:	4604      	mov	r4, r0
 800d17e:	460d      	mov	r5, r1
 800d180:	e019      	b.n	800d1b6 <scalbn+0x86>
 800d182:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d186:	460b      	mov	r3, r1
 800d188:	3a36      	subs	r2, #54	; 0x36
 800d18a:	4432      	add	r2, r6
 800d18c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d190:	428a      	cmp	r2, r1
 800d192:	dd08      	ble.n	800d1a6 <scalbn+0x76>
 800d194:	2d00      	cmp	r5, #0
 800d196:	a120      	add	r1, pc, #128	; (adr r1, 800d218 <scalbn+0xe8>)
 800d198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d19c:	da1c      	bge.n	800d1d8 <scalbn+0xa8>
 800d19e:	a120      	add	r1, pc, #128	; (adr r1, 800d220 <scalbn+0xf0>)
 800d1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1a4:	e018      	b.n	800d1d8 <scalbn+0xa8>
 800d1a6:	2a00      	cmp	r2, #0
 800d1a8:	dd08      	ble.n	800d1bc <scalbn+0x8c>
 800d1aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d1ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d1b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d1b6:	ec45 4b10 	vmov	d0, r4, r5
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
 800d1bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d1c0:	da19      	bge.n	800d1f6 <scalbn+0xc6>
 800d1c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d1c6:	429e      	cmp	r6, r3
 800d1c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d1cc:	dd0a      	ble.n	800d1e4 <scalbn+0xb4>
 800d1ce:	a112      	add	r1, pc, #72	; (adr r1, 800d218 <scalbn+0xe8>)
 800d1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1e2      	bne.n	800d19e <scalbn+0x6e>
 800d1d8:	a30f      	add	r3, pc, #60	; (adr r3, 800d218 <scalbn+0xe8>)
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	f7f3 fa33 	bl	8000648 <__aeabi_dmul>
 800d1e2:	e7cb      	b.n	800d17c <scalbn+0x4c>
 800d1e4:	a10a      	add	r1, pc, #40	; (adr r1, 800d210 <scalbn+0xe0>)
 800d1e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d0b8      	beq.n	800d160 <scalbn+0x30>
 800d1ee:	a10e      	add	r1, pc, #56	; (adr r1, 800d228 <scalbn+0xf8>)
 800d1f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1f4:	e7b4      	b.n	800d160 <scalbn+0x30>
 800d1f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d1fa:	3236      	adds	r2, #54	; 0x36
 800d1fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d200:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d204:	4620      	mov	r0, r4
 800d206:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <scalbn+0x108>)
 800d208:	2200      	movs	r2, #0
 800d20a:	e7e8      	b.n	800d1de <scalbn+0xae>
 800d20c:	f3af 8000 	nop.w
 800d210:	c2f8f359 	.word	0xc2f8f359
 800d214:	01a56e1f 	.word	0x01a56e1f
 800d218:	8800759c 	.word	0x8800759c
 800d21c:	7e37e43c 	.word	0x7e37e43c
 800d220:	8800759c 	.word	0x8800759c
 800d224:	fe37e43c 	.word	0xfe37e43c
 800d228:	c2f8f359 	.word	0xc2f8f359
 800d22c:	81a56e1f 	.word	0x81a56e1f
 800d230:	43500000 	.word	0x43500000
 800d234:	ffff3cb0 	.word	0xffff3cb0
 800d238:	3c900000 	.word	0x3c900000

0800d23c <_init>:
 800d23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23e:	bf00      	nop
 800d240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d242:	bc08      	pop	{r3}
 800d244:	469e      	mov	lr, r3
 800d246:	4770      	bx	lr

0800d248 <_fini>:
 800d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24a:	bf00      	nop
 800d24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d24e:	bc08      	pop	{r3}
 800d250:	469e      	mov	lr, r3
 800d252:	4770      	bx	lr
